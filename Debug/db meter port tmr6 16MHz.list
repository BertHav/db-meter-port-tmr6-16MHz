
db meter port tmr6 16MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007348  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  08007408  08007408  00008408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b90  08007b90  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007b90  08007b90  00008b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b98  08007b98  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b98  08007b98  00008b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b9c  08007b9c  00008b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007ba0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001350  20000070  08007c10  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200013c0  08007c10  000093c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d02  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f9f  00000000  00000000  0001bd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0001ed40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab6  00000000  00000000  0001fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001692f  00000000  00000000  00020706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001319b  00000000  00000000  00037035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b54  00000000  00000000  0004a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  000d1d24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c0  00000000  00000000  000d1dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d5798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  000d5809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  000d7d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080073f0 	.word	0x080073f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080073f0 	.word	0x080073f0

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strlen>:
 8000158:	2300      	movs	r3, #0
 800015a:	5cc2      	ldrb	r2, [r0, r3]
 800015c:	3301      	adds	r3, #1
 800015e:	2a00      	cmp	r2, #0
 8000160:	d1fb      	bne.n	800015a <strlen+0x2>
 8000162:	1e58      	subs	r0, r3, #1
 8000164:	4770      	bx	lr
	...

08000168 <__gnu_thumb1_case_shi>:
 8000168:	b403      	push	{r0, r1}
 800016a:	4671      	mov	r1, lr
 800016c:	0849      	lsrs	r1, r1, #1
 800016e:	0040      	lsls	r0, r0, #1
 8000170:	0049      	lsls	r1, r1, #1
 8000172:	5e09      	ldrsh	r1, [r1, r0]
 8000174:	0049      	lsls	r1, r1, #1
 8000176:	448e      	add	lr, r1
 8000178:	bc03      	pop	{r0, r1}
 800017a:	4770      	bx	lr

0800017c <__udivsi3>:
 800017c:	2200      	movs	r2, #0
 800017e:	0843      	lsrs	r3, r0, #1
 8000180:	428b      	cmp	r3, r1
 8000182:	d374      	bcc.n	800026e <__udivsi3+0xf2>
 8000184:	0903      	lsrs	r3, r0, #4
 8000186:	428b      	cmp	r3, r1
 8000188:	d35f      	bcc.n	800024a <__udivsi3+0xce>
 800018a:	0a03      	lsrs	r3, r0, #8
 800018c:	428b      	cmp	r3, r1
 800018e:	d344      	bcc.n	800021a <__udivsi3+0x9e>
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d328      	bcc.n	80001e8 <__udivsi3+0x6c>
 8000196:	0c03      	lsrs	r3, r0, #16
 8000198:	428b      	cmp	r3, r1
 800019a:	d30d      	bcc.n	80001b8 <__udivsi3+0x3c>
 800019c:	22ff      	movs	r2, #255	@ 0xff
 800019e:	0209      	lsls	r1, r1, #8
 80001a0:	ba12      	rev	r2, r2
 80001a2:	0c03      	lsrs	r3, r0, #16
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d302      	bcc.n	80001ae <__udivsi3+0x32>
 80001a8:	1212      	asrs	r2, r2, #8
 80001aa:	0209      	lsls	r1, r1, #8
 80001ac:	d065      	beq.n	800027a <__udivsi3+0xfe>
 80001ae:	0b03      	lsrs	r3, r0, #12
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d319      	bcc.n	80001e8 <__udivsi3+0x6c>
 80001b4:	e000      	b.n	80001b8 <__udivsi3+0x3c>
 80001b6:	0a09      	lsrs	r1, r1, #8
 80001b8:	0bc3      	lsrs	r3, r0, #15
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x46>
 80001be:	03cb      	lsls	r3, r1, #15
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0b83      	lsrs	r3, r0, #14
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x52>
 80001ca:	038b      	lsls	r3, r1, #14
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0b43      	lsrs	r3, r0, #13
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x5e>
 80001d6:	034b      	lsls	r3, r1, #13
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0b03      	lsrs	r3, r0, #12
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x6a>
 80001e2:	030b      	lsls	r3, r1, #12
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0ac3      	lsrs	r3, r0, #11
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x76>
 80001ee:	02cb      	lsls	r3, r1, #11
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	0a83      	lsrs	r3, r0, #10
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x82>
 80001fa:	028b      	lsls	r3, r1, #10
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	0a43      	lsrs	r3, r0, #9
 8000202:	428b      	cmp	r3, r1
 8000204:	d301      	bcc.n	800020a <__udivsi3+0x8e>
 8000206:	024b      	lsls	r3, r1, #9
 8000208:	1ac0      	subs	r0, r0, r3
 800020a:	4152      	adcs	r2, r2
 800020c:	0a03      	lsrs	r3, r0, #8
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x9a>
 8000212:	020b      	lsls	r3, r1, #8
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	d2cd      	bcs.n	80001b6 <__udivsi3+0x3a>
 800021a:	09c3      	lsrs	r3, r0, #7
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xa8>
 8000220:	01cb      	lsls	r3, r1, #7
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0983      	lsrs	r3, r0, #6
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xb4>
 800022c:	018b      	lsls	r3, r1, #6
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0943      	lsrs	r3, r0, #5
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xc0>
 8000238:	014b      	lsls	r3, r1, #5
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xcc>
 8000244:	010b      	lsls	r3, r1, #4
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	08c3      	lsrs	r3, r0, #3
 800024c:	428b      	cmp	r3, r1
 800024e:	d301      	bcc.n	8000254 <__udivsi3+0xd8>
 8000250:	00cb      	lsls	r3, r1, #3
 8000252:	1ac0      	subs	r0, r0, r3
 8000254:	4152      	adcs	r2, r2
 8000256:	0883      	lsrs	r3, r0, #2
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__udivsi3+0xe4>
 800025c:	008b      	lsls	r3, r1, #2
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0843      	lsrs	r3, r0, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__udivsi3+0xf0>
 8000268:	004b      	lsls	r3, r1, #1
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	1a41      	subs	r1, r0, r1
 8000270:	d200      	bcs.n	8000274 <__udivsi3+0xf8>
 8000272:	4601      	mov	r1, r0
 8000274:	4152      	adcs	r2, r2
 8000276:	4610      	mov	r0, r2
 8000278:	4770      	bx	lr
 800027a:	e7ff      	b.n	800027c <__udivsi3+0x100>
 800027c:	b501      	push	{r0, lr}
 800027e:	2000      	movs	r0, #0
 8000280:	f000 f806 	bl	8000290 <__aeabi_idiv0>
 8000284:	bd02      	pop	{r1, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_uidivmod>:
 8000288:	2900      	cmp	r1, #0
 800028a:	d0f7      	beq.n	800027c <__udivsi3+0x100>
 800028c:	e776      	b.n	800017c <__udivsi3>
 800028e:	4770      	bx	lr

08000290 <__aeabi_idiv0>:
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	0008      	movs	r0, r1
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	@ (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	@ (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	ffffffd9 	.word	0xffffffd9
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f84c 	bl	8000360 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4699      	mov	r9, r3
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	469c      	mov	ip, r3
 80002de:	0413      	lsls	r3, r2, #16
 80002e0:	4647      	mov	r7, r8
 80002e2:	0c1b      	lsrs	r3, r3, #16
 80002e4:	001d      	movs	r5, r3
 80002e6:	000e      	movs	r6, r1
 80002e8:	4661      	mov	r1, ip
 80002ea:	0404      	lsls	r4, r0, #16
 80002ec:	0c24      	lsrs	r4, r4, #16
 80002ee:	b580      	push	{r7, lr}
 80002f0:	0007      	movs	r7, r0
 80002f2:	0c10      	lsrs	r0, r2, #16
 80002f4:	434b      	muls	r3, r1
 80002f6:	4365      	muls	r5, r4
 80002f8:	4341      	muls	r1, r0
 80002fa:	4360      	muls	r0, r4
 80002fc:	0c2c      	lsrs	r4, r5, #16
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	1824      	adds	r4, r4, r0
 8000302:	468c      	mov	ip, r1
 8000304:	42a3      	cmp	r3, r4
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x3c>
 8000308:	2380      	movs	r3, #128	@ 0x80
 800030a:	025b      	lsls	r3, r3, #9
 800030c:	4698      	mov	r8, r3
 800030e:	44c4      	add	ip, r8
 8000310:	4649      	mov	r1, r9
 8000312:	4379      	muls	r1, r7
 8000314:	4356      	muls	r6, r2
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	042d      	lsls	r5, r5, #16
 800031a:	0c2d      	lsrs	r5, r5, #16
 800031c:	1989      	adds	r1, r1, r6
 800031e:	4463      	add	r3, ip
 8000320:	0424      	lsls	r4, r4, #16
 8000322:	1960      	adds	r0, r4, r5
 8000324:	18c9      	adds	r1, r1, r3
 8000326:	bcc0      	pop	{r6, r7}
 8000328:	46b9      	mov	r9, r7
 800032a:	46b0      	mov	r8, r6
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	46c0      	nop			@ (mov r8, r8)

08000330 <__aeabi_f2uiz>:
 8000330:	219e      	movs	r1, #158	@ 0x9e
 8000332:	b510      	push	{r4, lr}
 8000334:	05c9      	lsls	r1, r1, #23
 8000336:	1c04      	adds	r4, r0, #0
 8000338:	f000 ff48 	bl	80011cc <__aeabi_fcmpge>
 800033c:	2800      	cmp	r0, #0
 800033e:	d103      	bne.n	8000348 <__aeabi_f2uiz+0x18>
 8000340:	1c20      	adds	r0, r4, #0
 8000342:	f000 fe65 	bl	8001010 <__aeabi_f2iz>
 8000346:	bd10      	pop	{r4, pc}
 8000348:	219e      	movs	r1, #158	@ 0x9e
 800034a:	1c20      	adds	r0, r4, #0
 800034c:	05c9      	lsls	r1, r1, #23
 800034e:	f000 fcbb 	bl	8000cc8 <__aeabi_fsub>
 8000352:	f000 fe5d 	bl	8001010 <__aeabi_f2iz>
 8000356:	2380      	movs	r3, #128	@ 0x80
 8000358:	061b      	lsls	r3, r3, #24
 800035a:	469c      	mov	ip, r3
 800035c:	4460      	add	r0, ip
 800035e:	e7f2      	b.n	8000346 <__aeabi_f2uiz+0x16>

08000360 <__udivmoddi4>:
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	4657      	mov	r7, sl
 8000364:	464e      	mov	r6, r9
 8000366:	4645      	mov	r5, r8
 8000368:	46de      	mov	lr, fp
 800036a:	b5e0      	push	{r5, r6, r7, lr}
 800036c:	0004      	movs	r4, r0
 800036e:	000d      	movs	r5, r1
 8000370:	4692      	mov	sl, r2
 8000372:	4699      	mov	r9, r3
 8000374:	b083      	sub	sp, #12
 8000376:	428b      	cmp	r3, r1
 8000378:	d830      	bhi.n	80003dc <__udivmoddi4+0x7c>
 800037a:	d02d      	beq.n	80003d8 <__udivmoddi4+0x78>
 800037c:	4649      	mov	r1, r9
 800037e:	4650      	mov	r0, sl
 8000380:	f000 ff4c 	bl	800121c <__clzdi2>
 8000384:	0029      	movs	r1, r5
 8000386:	0006      	movs	r6, r0
 8000388:	0020      	movs	r0, r4
 800038a:	f000 ff47 	bl	800121c <__clzdi2>
 800038e:	1a33      	subs	r3, r6, r0
 8000390:	4698      	mov	r8, r3
 8000392:	3b20      	subs	r3, #32
 8000394:	d434      	bmi.n	8000400 <__udivmoddi4+0xa0>
 8000396:	469b      	mov	fp, r3
 8000398:	4653      	mov	r3, sl
 800039a:	465a      	mov	r2, fp
 800039c:	4093      	lsls	r3, r2
 800039e:	4642      	mov	r2, r8
 80003a0:	001f      	movs	r7, r3
 80003a2:	4653      	mov	r3, sl
 80003a4:	4093      	lsls	r3, r2
 80003a6:	001e      	movs	r6, r3
 80003a8:	42af      	cmp	r7, r5
 80003aa:	d83b      	bhi.n	8000424 <__udivmoddi4+0xc4>
 80003ac:	42af      	cmp	r7, r5
 80003ae:	d100      	bne.n	80003b2 <__udivmoddi4+0x52>
 80003b0:	e079      	b.n	80004a6 <__udivmoddi4+0x146>
 80003b2:	465b      	mov	r3, fp
 80003b4:	1ba4      	subs	r4, r4, r6
 80003b6:	41bd      	sbcs	r5, r7
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	da00      	bge.n	80003be <__udivmoddi4+0x5e>
 80003bc:	e076      	b.n	80004ac <__udivmoddi4+0x14c>
 80003be:	2200      	movs	r2, #0
 80003c0:	2300      	movs	r3, #0
 80003c2:	9200      	str	r2, [sp, #0]
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	2301      	movs	r3, #1
 80003c8:	465a      	mov	r2, fp
 80003ca:	4093      	lsls	r3, r2
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2301      	movs	r3, #1
 80003d0:	4642      	mov	r2, r8
 80003d2:	4093      	lsls	r3, r2
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	e029      	b.n	800042c <__udivmoddi4+0xcc>
 80003d8:	4282      	cmp	r2, r0
 80003da:	d9cf      	bls.n	800037c <__udivmoddi4+0x1c>
 80003dc:	2200      	movs	r2, #0
 80003de:	2300      	movs	r3, #0
 80003e0:	9200      	str	r2, [sp, #0]
 80003e2:	9301      	str	r3, [sp, #4]
 80003e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <__udivmoddi4+0x8e>
 80003ea:	601c      	str	r4, [r3, #0]
 80003ec:	605d      	str	r5, [r3, #4]
 80003ee:	9800      	ldr	r0, [sp, #0]
 80003f0:	9901      	ldr	r1, [sp, #4]
 80003f2:	b003      	add	sp, #12
 80003f4:	bcf0      	pop	{r4, r5, r6, r7}
 80003f6:	46bb      	mov	fp, r7
 80003f8:	46b2      	mov	sl, r6
 80003fa:	46a9      	mov	r9, r5
 80003fc:	46a0      	mov	r8, r4
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	4642      	mov	r2, r8
 8000402:	469b      	mov	fp, r3
 8000404:	2320      	movs	r3, #32
 8000406:	1a9b      	subs	r3, r3, r2
 8000408:	4652      	mov	r2, sl
 800040a:	40da      	lsrs	r2, r3
 800040c:	4641      	mov	r1, r8
 800040e:	0013      	movs	r3, r2
 8000410:	464a      	mov	r2, r9
 8000412:	408a      	lsls	r2, r1
 8000414:	0017      	movs	r7, r2
 8000416:	4642      	mov	r2, r8
 8000418:	431f      	orrs	r7, r3
 800041a:	4653      	mov	r3, sl
 800041c:	4093      	lsls	r3, r2
 800041e:	001e      	movs	r6, r3
 8000420:	42af      	cmp	r7, r5
 8000422:	d9c3      	bls.n	80003ac <__udivmoddi4+0x4c>
 8000424:	2200      	movs	r2, #0
 8000426:	2300      	movs	r3, #0
 8000428:	9200      	str	r2, [sp, #0]
 800042a:	9301      	str	r3, [sp, #4]
 800042c:	4643      	mov	r3, r8
 800042e:	2b00      	cmp	r3, #0
 8000430:	d0d8      	beq.n	80003e4 <__udivmoddi4+0x84>
 8000432:	07fb      	lsls	r3, r7, #31
 8000434:	0872      	lsrs	r2, r6, #1
 8000436:	431a      	orrs	r2, r3
 8000438:	4646      	mov	r6, r8
 800043a:	087b      	lsrs	r3, r7, #1
 800043c:	e00e      	b.n	800045c <__udivmoddi4+0xfc>
 800043e:	42ab      	cmp	r3, r5
 8000440:	d101      	bne.n	8000446 <__udivmoddi4+0xe6>
 8000442:	42a2      	cmp	r2, r4
 8000444:	d80c      	bhi.n	8000460 <__udivmoddi4+0x100>
 8000446:	1aa4      	subs	r4, r4, r2
 8000448:	419d      	sbcs	r5, r3
 800044a:	2001      	movs	r0, #1
 800044c:	1924      	adds	r4, r4, r4
 800044e:	416d      	adcs	r5, r5
 8000450:	2100      	movs	r1, #0
 8000452:	3e01      	subs	r6, #1
 8000454:	1824      	adds	r4, r4, r0
 8000456:	414d      	adcs	r5, r1
 8000458:	2e00      	cmp	r6, #0
 800045a:	d006      	beq.n	800046a <__udivmoddi4+0x10a>
 800045c:	42ab      	cmp	r3, r5
 800045e:	d9ee      	bls.n	800043e <__udivmoddi4+0xde>
 8000460:	3e01      	subs	r6, #1
 8000462:	1924      	adds	r4, r4, r4
 8000464:	416d      	adcs	r5, r5
 8000466:	2e00      	cmp	r6, #0
 8000468:	d1f8      	bne.n	800045c <__udivmoddi4+0xfc>
 800046a:	9800      	ldr	r0, [sp, #0]
 800046c:	9901      	ldr	r1, [sp, #4]
 800046e:	465b      	mov	r3, fp
 8000470:	1900      	adds	r0, r0, r4
 8000472:	4169      	adcs	r1, r5
 8000474:	2b00      	cmp	r3, #0
 8000476:	db24      	blt.n	80004c2 <__udivmoddi4+0x162>
 8000478:	002b      	movs	r3, r5
 800047a:	465a      	mov	r2, fp
 800047c:	4644      	mov	r4, r8
 800047e:	40d3      	lsrs	r3, r2
 8000480:	002a      	movs	r2, r5
 8000482:	40e2      	lsrs	r2, r4
 8000484:	001c      	movs	r4, r3
 8000486:	465b      	mov	r3, fp
 8000488:	0015      	movs	r5, r2
 800048a:	2b00      	cmp	r3, #0
 800048c:	db2a      	blt.n	80004e4 <__udivmoddi4+0x184>
 800048e:	0026      	movs	r6, r4
 8000490:	409e      	lsls	r6, r3
 8000492:	0033      	movs	r3, r6
 8000494:	0026      	movs	r6, r4
 8000496:	4647      	mov	r7, r8
 8000498:	40be      	lsls	r6, r7
 800049a:	0032      	movs	r2, r6
 800049c:	1a80      	subs	r0, r0, r2
 800049e:	4199      	sbcs	r1, r3
 80004a0:	9000      	str	r0, [sp, #0]
 80004a2:	9101      	str	r1, [sp, #4]
 80004a4:	e79e      	b.n	80003e4 <__udivmoddi4+0x84>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d8bc      	bhi.n	8000424 <__udivmoddi4+0xc4>
 80004aa:	e782      	b.n	80003b2 <__udivmoddi4+0x52>
 80004ac:	4642      	mov	r2, r8
 80004ae:	2320      	movs	r3, #32
 80004b0:	2100      	movs	r1, #0
 80004b2:	1a9b      	subs	r3, r3, r2
 80004b4:	2200      	movs	r2, #0
 80004b6:	9100      	str	r1, [sp, #0]
 80004b8:	9201      	str	r2, [sp, #4]
 80004ba:	2201      	movs	r2, #1
 80004bc:	40da      	lsrs	r2, r3
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	e785      	b.n	80003ce <__udivmoddi4+0x6e>
 80004c2:	4642      	mov	r2, r8
 80004c4:	2320      	movs	r3, #32
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	002a      	movs	r2, r5
 80004ca:	4646      	mov	r6, r8
 80004cc:	409a      	lsls	r2, r3
 80004ce:	0023      	movs	r3, r4
 80004d0:	40f3      	lsrs	r3, r6
 80004d2:	4644      	mov	r4, r8
 80004d4:	4313      	orrs	r3, r2
 80004d6:	002a      	movs	r2, r5
 80004d8:	40e2      	lsrs	r2, r4
 80004da:	001c      	movs	r4, r3
 80004dc:	465b      	mov	r3, fp
 80004de:	0015      	movs	r5, r2
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	dad4      	bge.n	800048e <__udivmoddi4+0x12e>
 80004e4:	4642      	mov	r2, r8
 80004e6:	002f      	movs	r7, r5
 80004e8:	2320      	movs	r3, #32
 80004ea:	0026      	movs	r6, r4
 80004ec:	4097      	lsls	r7, r2
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	40de      	lsrs	r6, r3
 80004f2:	003b      	movs	r3, r7
 80004f4:	4333      	orrs	r3, r6
 80004f6:	e7cd      	b.n	8000494 <__udivmoddi4+0x134>

080004f8 <__aeabi_fadd>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	46ce      	mov	lr, r9
 80004fc:	4647      	mov	r7, r8
 80004fe:	0243      	lsls	r3, r0, #9
 8000500:	0a5a      	lsrs	r2, r3, #9
 8000502:	024e      	lsls	r6, r1, #9
 8000504:	0045      	lsls	r5, r0, #1
 8000506:	0fc4      	lsrs	r4, r0, #31
 8000508:	0048      	lsls	r0, r1, #1
 800050a:	4691      	mov	r9, r2
 800050c:	0e2d      	lsrs	r5, r5, #24
 800050e:	0a72      	lsrs	r2, r6, #9
 8000510:	0e00      	lsrs	r0, r0, #24
 8000512:	4694      	mov	ip, r2
 8000514:	b580      	push	{r7, lr}
 8000516:	099b      	lsrs	r3, r3, #6
 8000518:	0fc9      	lsrs	r1, r1, #31
 800051a:	09b6      	lsrs	r6, r6, #6
 800051c:	1a2a      	subs	r2, r5, r0
 800051e:	428c      	cmp	r4, r1
 8000520:	d021      	beq.n	8000566 <__aeabi_fadd+0x6e>
 8000522:	2a00      	cmp	r2, #0
 8000524:	dd0d      	ble.n	8000542 <__aeabi_fadd+0x4a>
 8000526:	2800      	cmp	r0, #0
 8000528:	d12d      	bne.n	8000586 <__aeabi_fadd+0x8e>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_fadd+0x38>
 800052e:	e08d      	b.n	800064c <__aeabi_fadd+0x154>
 8000530:	1e51      	subs	r1, r2, #1
 8000532:	2a01      	cmp	r2, #1
 8000534:	d100      	bne.n	8000538 <__aeabi_fadd+0x40>
 8000536:	e11d      	b.n	8000774 <__aeabi_fadd+0x27c>
 8000538:	2aff      	cmp	r2, #255	@ 0xff
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x46>
 800053c:	e0ab      	b.n	8000696 <__aeabi_fadd+0x19e>
 800053e:	000a      	movs	r2, r1
 8000540:	e027      	b.n	8000592 <__aeabi_fadd+0x9a>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d04d      	beq.n	80005e2 <__aeabi_fadd+0xea>
 8000546:	1b42      	subs	r2, r0, r5
 8000548:	2d00      	cmp	r5, #0
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0x56>
 800054c:	e0cc      	b.n	80006e8 <__aeabi_fadd+0x1f0>
 800054e:	2b00      	cmp	r3, #0
 8000550:	d100      	bne.n	8000554 <__aeabi_fadd+0x5c>
 8000552:	e079      	b.n	8000648 <__aeabi_fadd+0x150>
 8000554:	1e54      	subs	r4, r2, #1
 8000556:	2a01      	cmp	r2, #1
 8000558:	d100      	bne.n	800055c <__aeabi_fadd+0x64>
 800055a:	e128      	b.n	80007ae <__aeabi_fadd+0x2b6>
 800055c:	2aff      	cmp	r2, #255	@ 0xff
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x6a>
 8000560:	e097      	b.n	8000692 <__aeabi_fadd+0x19a>
 8000562:	0022      	movs	r2, r4
 8000564:	e0c5      	b.n	80006f2 <__aeabi_fadd+0x1fa>
 8000566:	2a00      	cmp	r2, #0
 8000568:	dc00      	bgt.n	800056c <__aeabi_fadd+0x74>
 800056a:	e096      	b.n	800069a <__aeabi_fadd+0x1a2>
 800056c:	2800      	cmp	r0, #0
 800056e:	d04f      	beq.n	8000610 <__aeabi_fadd+0x118>
 8000570:	2dff      	cmp	r5, #255	@ 0xff
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x7e>
 8000574:	e08f      	b.n	8000696 <__aeabi_fadd+0x19e>
 8000576:	2180      	movs	r1, #128	@ 0x80
 8000578:	04c9      	lsls	r1, r1, #19
 800057a:	430e      	orrs	r6, r1
 800057c:	2a1b      	cmp	r2, #27
 800057e:	dd51      	ble.n	8000624 <__aeabi_fadd+0x12c>
 8000580:	002a      	movs	r2, r5
 8000582:	3301      	adds	r3, #1
 8000584:	e018      	b.n	80005b8 <__aeabi_fadd+0xc0>
 8000586:	2dff      	cmp	r5, #255	@ 0xff
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x94>
 800058a:	e084      	b.n	8000696 <__aeabi_fadd+0x19e>
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	04c9      	lsls	r1, r1, #19
 8000590:	430e      	orrs	r6, r1
 8000592:	2101      	movs	r1, #1
 8000594:	2a1b      	cmp	r2, #27
 8000596:	dc08      	bgt.n	80005aa <__aeabi_fadd+0xb2>
 8000598:	0031      	movs	r1, r6
 800059a:	2020      	movs	r0, #32
 800059c:	40d1      	lsrs	r1, r2
 800059e:	1a82      	subs	r2, r0, r2
 80005a0:	4096      	lsls	r6, r2
 80005a2:	0032      	movs	r2, r6
 80005a4:	1e50      	subs	r0, r2, #1
 80005a6:	4182      	sbcs	r2, r0
 80005a8:	4311      	orrs	r1, r2
 80005aa:	1a5b      	subs	r3, r3, r1
 80005ac:	015a      	lsls	r2, r3, #5
 80005ae:	d459      	bmi.n	8000664 <__aeabi_fadd+0x16c>
 80005b0:	2107      	movs	r1, #7
 80005b2:	002a      	movs	r2, r5
 80005b4:	4019      	ands	r1, r3
 80005b6:	d049      	beq.n	800064c <__aeabi_fadd+0x154>
 80005b8:	210f      	movs	r1, #15
 80005ba:	4019      	ands	r1, r3
 80005bc:	2904      	cmp	r1, #4
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0xca>
 80005c0:	3304      	adds	r3, #4
 80005c2:	0159      	lsls	r1, r3, #5
 80005c4:	d542      	bpl.n	800064c <__aeabi_fadd+0x154>
 80005c6:	1c50      	adds	r0, r2, #1
 80005c8:	2afe      	cmp	r2, #254	@ 0xfe
 80005ca:	d03a      	beq.n	8000642 <__aeabi_fadd+0x14a>
 80005cc:	019b      	lsls	r3, r3, #6
 80005ce:	b2c0      	uxtb	r0, r0
 80005d0:	0a5b      	lsrs	r3, r3, #9
 80005d2:	05c0      	lsls	r0, r0, #23
 80005d4:	4318      	orrs	r0, r3
 80005d6:	07e4      	lsls	r4, r4, #31
 80005d8:	4320      	orrs	r0, r4
 80005da:	bcc0      	pop	{r6, r7}
 80005dc:	46b9      	mov	r9, r7
 80005de:	46b0      	mov	r8, r6
 80005e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005e2:	20fe      	movs	r0, #254	@ 0xfe
 80005e4:	4680      	mov	r8, r0
 80005e6:	1c6f      	adds	r7, r5, #1
 80005e8:	0038      	movs	r0, r7
 80005ea:	4647      	mov	r7, r8
 80005ec:	4207      	tst	r7, r0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0xfa>
 80005f0:	e08e      	b.n	8000710 <__aeabi_fadd+0x218>
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d000      	beq.n	80005f8 <__aeabi_fadd+0x100>
 80005f6:	e0b4      	b.n	8000762 <__aeabi_fadd+0x26a>
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d100      	bne.n	80005fe <__aeabi_fadd+0x106>
 80005fc:	e0db      	b.n	80007b6 <__aeabi_fadd+0x2be>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d06c      	beq.n	80006dc <__aeabi_fadd+0x1e4>
 8000602:	1b98      	subs	r0, r3, r6
 8000604:	0145      	lsls	r5, r0, #5
 8000606:	d400      	bmi.n	800060a <__aeabi_fadd+0x112>
 8000608:	e0f7      	b.n	80007fa <__aeabi_fadd+0x302>
 800060a:	000c      	movs	r4, r1
 800060c:	1af3      	subs	r3, r6, r3
 800060e:	e03d      	b.n	800068c <__aeabi_fadd+0x194>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d01b      	beq.n	800064c <__aeabi_fadd+0x154>
 8000614:	1e51      	subs	r1, r2, #1
 8000616:	2a01      	cmp	r2, #1
 8000618:	d100      	bne.n	800061c <__aeabi_fadd+0x124>
 800061a:	e082      	b.n	8000722 <__aeabi_fadd+0x22a>
 800061c:	2aff      	cmp	r2, #255	@ 0xff
 800061e:	d03a      	beq.n	8000696 <__aeabi_fadd+0x19e>
 8000620:	000a      	movs	r2, r1
 8000622:	e7ab      	b.n	800057c <__aeabi_fadd+0x84>
 8000624:	0031      	movs	r1, r6
 8000626:	2020      	movs	r0, #32
 8000628:	40d1      	lsrs	r1, r2
 800062a:	1a82      	subs	r2, r0, r2
 800062c:	4096      	lsls	r6, r2
 800062e:	0032      	movs	r2, r6
 8000630:	1e50      	subs	r0, r2, #1
 8000632:	4182      	sbcs	r2, r0
 8000634:	430a      	orrs	r2, r1
 8000636:	189b      	adds	r3, r3, r2
 8000638:	015a      	lsls	r2, r3, #5
 800063a:	d5b9      	bpl.n	80005b0 <__aeabi_fadd+0xb8>
 800063c:	1c6a      	adds	r2, r5, #1
 800063e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000640:	d175      	bne.n	800072e <__aeabi_fadd+0x236>
 8000642:	20ff      	movs	r0, #255	@ 0xff
 8000644:	2300      	movs	r3, #0
 8000646:	e7c4      	b.n	80005d2 <__aeabi_fadd+0xda>
 8000648:	000c      	movs	r4, r1
 800064a:	0033      	movs	r3, r6
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	2aff      	cmp	r2, #255	@ 0xff
 8000650:	d146      	bne.n	80006e0 <__aeabi_fadd+0x1e8>
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f5      	beq.n	8000642 <__aeabi_fadd+0x14a>
 8000656:	2280      	movs	r2, #128	@ 0x80
 8000658:	03d2      	lsls	r2, r2, #15
 800065a:	4313      	orrs	r3, r2
 800065c:	025b      	lsls	r3, r3, #9
 800065e:	20ff      	movs	r0, #255	@ 0xff
 8000660:	0a5b      	lsrs	r3, r3, #9
 8000662:	e7b6      	b.n	80005d2 <__aeabi_fadd+0xda>
 8000664:	019f      	lsls	r7, r3, #6
 8000666:	09bf      	lsrs	r7, r7, #6
 8000668:	0038      	movs	r0, r7
 800066a:	f000 fdb9 	bl	80011e0 <__clzsi2>
 800066e:	3805      	subs	r0, #5
 8000670:	4087      	lsls	r7, r0
 8000672:	4285      	cmp	r5, r0
 8000674:	dc24      	bgt.n	80006c0 <__aeabi_fadd+0x1c8>
 8000676:	003b      	movs	r3, r7
 8000678:	2120      	movs	r1, #32
 800067a:	1b42      	subs	r2, r0, r5
 800067c:	3201      	adds	r2, #1
 800067e:	40d3      	lsrs	r3, r2
 8000680:	1a8a      	subs	r2, r1, r2
 8000682:	4097      	lsls	r7, r2
 8000684:	1e7a      	subs	r2, r7, #1
 8000686:	4197      	sbcs	r7, r2
 8000688:	2200      	movs	r2, #0
 800068a:	433b      	orrs	r3, r7
 800068c:	0759      	lsls	r1, r3, #29
 800068e:	d193      	bne.n	80005b8 <__aeabi_fadd+0xc0>
 8000690:	e797      	b.n	80005c2 <__aeabi_fadd+0xca>
 8000692:	000c      	movs	r4, r1
 8000694:	0033      	movs	r3, r6
 8000696:	08db      	lsrs	r3, r3, #3
 8000698:	e7db      	b.n	8000652 <__aeabi_fadd+0x15a>
 800069a:	2a00      	cmp	r2, #0
 800069c:	d014      	beq.n	80006c8 <__aeabi_fadd+0x1d0>
 800069e:	1b42      	subs	r2, r0, r5
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d14b      	bne.n	800073c <__aeabi_fadd+0x244>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0d0      	beq.n	800064a <__aeabi_fadd+0x152>
 80006a8:	1e51      	subs	r1, r2, #1
 80006aa:	2a01      	cmp	r2, #1
 80006ac:	d100      	bne.n	80006b0 <__aeabi_fadd+0x1b8>
 80006ae:	e09e      	b.n	80007ee <__aeabi_fadd+0x2f6>
 80006b0:	2aff      	cmp	r2, #255	@ 0xff
 80006b2:	d0ef      	beq.n	8000694 <__aeabi_fadd+0x19c>
 80006b4:	000a      	movs	r2, r1
 80006b6:	2a1b      	cmp	r2, #27
 80006b8:	dd5f      	ble.n	800077a <__aeabi_fadd+0x282>
 80006ba:	0002      	movs	r2, r0
 80006bc:	1c73      	adds	r3, r6, #1
 80006be:	e77b      	b.n	80005b8 <__aeabi_fadd+0xc0>
 80006c0:	4b50      	ldr	r3, [pc, #320]	@ (8000804 <__aeabi_fadd+0x30c>)
 80006c2:	1a2a      	subs	r2, r5, r0
 80006c4:	403b      	ands	r3, r7
 80006c6:	e7e1      	b.n	800068c <__aeabi_fadd+0x194>
 80006c8:	21fe      	movs	r1, #254	@ 0xfe
 80006ca:	1c6a      	adds	r2, r5, #1
 80006cc:	4211      	tst	r1, r2
 80006ce:	d13b      	bne.n	8000748 <__aeabi_fadd+0x250>
 80006d0:	2d00      	cmp	r5, #0
 80006d2:	d15d      	bne.n	8000790 <__aeabi_fadd+0x298>
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d07f      	beq.n	80007d8 <__aeabi_fadd+0x2e0>
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d17f      	bne.n	80007dc <__aeabi_fadd+0x2e4>
 80006dc:	2200      	movs	r2, #0
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	025b      	lsls	r3, r3, #9
 80006e2:	0a5b      	lsrs	r3, r3, #9
 80006e4:	b2d0      	uxtb	r0, r2
 80006e6:	e774      	b.n	80005d2 <__aeabi_fadd+0xda>
 80006e8:	28ff      	cmp	r0, #255	@ 0xff
 80006ea:	d0d2      	beq.n	8000692 <__aeabi_fadd+0x19a>
 80006ec:	2480      	movs	r4, #128	@ 0x80
 80006ee:	04e4      	lsls	r4, r4, #19
 80006f0:	4323      	orrs	r3, r4
 80006f2:	2401      	movs	r4, #1
 80006f4:	2a1b      	cmp	r2, #27
 80006f6:	dc07      	bgt.n	8000708 <__aeabi_fadd+0x210>
 80006f8:	001c      	movs	r4, r3
 80006fa:	2520      	movs	r5, #32
 80006fc:	40d4      	lsrs	r4, r2
 80006fe:	1aaa      	subs	r2, r5, r2
 8000700:	4093      	lsls	r3, r2
 8000702:	1e5a      	subs	r2, r3, #1
 8000704:	4193      	sbcs	r3, r2
 8000706:	431c      	orrs	r4, r3
 8000708:	1b33      	subs	r3, r6, r4
 800070a:	0005      	movs	r5, r0
 800070c:	000c      	movs	r4, r1
 800070e:	e74d      	b.n	80005ac <__aeabi_fadd+0xb4>
 8000710:	1b9f      	subs	r7, r3, r6
 8000712:	017a      	lsls	r2, r7, #5
 8000714:	d422      	bmi.n	800075c <__aeabi_fadd+0x264>
 8000716:	2f00      	cmp	r7, #0
 8000718:	d1a6      	bne.n	8000668 <__aeabi_fadd+0x170>
 800071a:	2400      	movs	r4, #0
 800071c:	2000      	movs	r0, #0
 800071e:	2300      	movs	r3, #0
 8000720:	e757      	b.n	80005d2 <__aeabi_fadd+0xda>
 8000722:	199b      	adds	r3, r3, r6
 8000724:	2501      	movs	r5, #1
 8000726:	3201      	adds	r2, #1
 8000728:	0159      	lsls	r1, r3, #5
 800072a:	d400      	bmi.n	800072e <__aeabi_fadd+0x236>
 800072c:	e740      	b.n	80005b0 <__aeabi_fadd+0xb8>
 800072e:	2101      	movs	r1, #1
 8000730:	4835      	ldr	r0, [pc, #212]	@ (8000808 <__aeabi_fadd+0x310>)
 8000732:	4019      	ands	r1, r3
 8000734:	085b      	lsrs	r3, r3, #1
 8000736:	4003      	ands	r3, r0
 8000738:	430b      	orrs	r3, r1
 800073a:	e7a7      	b.n	800068c <__aeabi_fadd+0x194>
 800073c:	28ff      	cmp	r0, #255	@ 0xff
 800073e:	d0a9      	beq.n	8000694 <__aeabi_fadd+0x19c>
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	04c9      	lsls	r1, r1, #19
 8000744:	430b      	orrs	r3, r1
 8000746:	e7b6      	b.n	80006b6 <__aeabi_fadd+0x1be>
 8000748:	2aff      	cmp	r2, #255	@ 0xff
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x256>
 800074c:	e779      	b.n	8000642 <__aeabi_fadd+0x14a>
 800074e:	199b      	adds	r3, r3, r6
 8000750:	085b      	lsrs	r3, r3, #1
 8000752:	0759      	lsls	r1, r3, #29
 8000754:	d000      	beq.n	8000758 <__aeabi_fadd+0x260>
 8000756:	e72f      	b.n	80005b8 <__aeabi_fadd+0xc0>
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	e7c1      	b.n	80006e0 <__aeabi_fadd+0x1e8>
 800075c:	000c      	movs	r4, r1
 800075e:	1af7      	subs	r7, r6, r3
 8000760:	e782      	b.n	8000668 <__aeabi_fadd+0x170>
 8000762:	2b00      	cmp	r3, #0
 8000764:	d12c      	bne.n	80007c0 <__aeabi_fadd+0x2c8>
 8000766:	2e00      	cmp	r6, #0
 8000768:	d193      	bne.n	8000692 <__aeabi_fadd+0x19a>
 800076a:	2380      	movs	r3, #128	@ 0x80
 800076c:	2400      	movs	r4, #0
 800076e:	20ff      	movs	r0, #255	@ 0xff
 8000770:	03db      	lsls	r3, r3, #15
 8000772:	e72e      	b.n	80005d2 <__aeabi_fadd+0xda>
 8000774:	2501      	movs	r5, #1
 8000776:	1b9b      	subs	r3, r3, r6
 8000778:	e718      	b.n	80005ac <__aeabi_fadd+0xb4>
 800077a:	0019      	movs	r1, r3
 800077c:	2520      	movs	r5, #32
 800077e:	40d1      	lsrs	r1, r2
 8000780:	1aaa      	subs	r2, r5, r2
 8000782:	4093      	lsls	r3, r2
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	4193      	sbcs	r3, r2
 8000788:	430b      	orrs	r3, r1
 800078a:	0005      	movs	r5, r0
 800078c:	199b      	adds	r3, r3, r6
 800078e:	e753      	b.n	8000638 <__aeabi_fadd+0x140>
 8000790:	2b00      	cmp	r3, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x29e>
 8000794:	e77e      	b.n	8000694 <__aeabi_fadd+0x19c>
 8000796:	2e00      	cmp	r6, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x2a4>
 800079a:	e77c      	b.n	8000696 <__aeabi_fadd+0x19e>
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	03d2      	lsls	r2, r2, #15
 80007a0:	4591      	cmp	r9, r2
 80007a2:	d302      	bcc.n	80007aa <__aeabi_fadd+0x2b2>
 80007a4:	4594      	cmp	ip, r2
 80007a6:	d200      	bcs.n	80007aa <__aeabi_fadd+0x2b2>
 80007a8:	0033      	movs	r3, r6
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	e753      	b.n	8000656 <__aeabi_fadd+0x15e>
 80007ae:	000c      	movs	r4, r1
 80007b0:	1af3      	subs	r3, r6, r3
 80007b2:	3501      	adds	r5, #1
 80007b4:	e6fa      	b.n	80005ac <__aeabi_fadd+0xb4>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d0af      	beq.n	800071a <__aeabi_fadd+0x222>
 80007ba:	000c      	movs	r4, r1
 80007bc:	0033      	movs	r3, r6
 80007be:	e78d      	b.n	80006dc <__aeabi_fadd+0x1e4>
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0x2ce>
 80007c4:	e767      	b.n	8000696 <__aeabi_fadd+0x19e>
 80007c6:	2280      	movs	r2, #128	@ 0x80
 80007c8:	03d2      	lsls	r2, r2, #15
 80007ca:	4591      	cmp	r9, r2
 80007cc:	d3ed      	bcc.n	80007aa <__aeabi_fadd+0x2b2>
 80007ce:	4594      	cmp	ip, r2
 80007d0:	d2eb      	bcs.n	80007aa <__aeabi_fadd+0x2b2>
 80007d2:	000c      	movs	r4, r1
 80007d4:	0033      	movs	r3, r6
 80007d6:	e7e8      	b.n	80007aa <__aeabi_fadd+0x2b2>
 80007d8:	0033      	movs	r3, r6
 80007da:	e77f      	b.n	80006dc <__aeabi_fadd+0x1e4>
 80007dc:	199b      	adds	r3, r3, r6
 80007de:	2200      	movs	r2, #0
 80007e0:	0159      	lsls	r1, r3, #5
 80007e2:	d5b9      	bpl.n	8000758 <__aeabi_fadd+0x260>
 80007e4:	4a07      	ldr	r2, [pc, #28]	@ (8000804 <__aeabi_fadd+0x30c>)
 80007e6:	4013      	ands	r3, r2
 80007e8:	08db      	lsrs	r3, r3, #3
 80007ea:	2201      	movs	r2, #1
 80007ec:	e778      	b.n	80006e0 <__aeabi_fadd+0x1e8>
 80007ee:	199b      	adds	r3, r3, r6
 80007f0:	3201      	adds	r2, #1
 80007f2:	3501      	adds	r5, #1
 80007f4:	0159      	lsls	r1, r3, #5
 80007f6:	d49a      	bmi.n	800072e <__aeabi_fadd+0x236>
 80007f8:	e6da      	b.n	80005b0 <__aeabi_fadd+0xb8>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d08d      	beq.n	800071a <__aeabi_fadd+0x222>
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	e76e      	b.n	80006e0 <__aeabi_fadd+0x1e8>
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	fbffffff 	.word	0xfbffffff
 8000808:	7dffffff 	.word	0x7dffffff

0800080c <__aeabi_fdiv>:
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	464f      	mov	r7, r9
 8000810:	4646      	mov	r6, r8
 8000812:	46d6      	mov	lr, sl
 8000814:	0244      	lsls	r4, r0, #9
 8000816:	b5c0      	push	{r6, r7, lr}
 8000818:	0047      	lsls	r7, r0, #1
 800081a:	1c0e      	adds	r6, r1, #0
 800081c:	0a64      	lsrs	r4, r4, #9
 800081e:	0e3f      	lsrs	r7, r7, #24
 8000820:	0fc5      	lsrs	r5, r0, #31
 8000822:	2f00      	cmp	r7, #0
 8000824:	d03c      	beq.n	80008a0 <__aeabi_fdiv+0x94>
 8000826:	2fff      	cmp	r7, #255	@ 0xff
 8000828:	d042      	beq.n	80008b0 <__aeabi_fdiv+0xa4>
 800082a:	2300      	movs	r3, #0
 800082c:	2280      	movs	r2, #128	@ 0x80
 800082e:	4699      	mov	r9, r3
 8000830:	469a      	mov	sl, r3
 8000832:	00e4      	lsls	r4, r4, #3
 8000834:	04d2      	lsls	r2, r2, #19
 8000836:	4314      	orrs	r4, r2
 8000838:	3f7f      	subs	r7, #127	@ 0x7f
 800083a:	0273      	lsls	r3, r6, #9
 800083c:	0a5b      	lsrs	r3, r3, #9
 800083e:	4698      	mov	r8, r3
 8000840:	0073      	lsls	r3, r6, #1
 8000842:	0e1b      	lsrs	r3, r3, #24
 8000844:	0ff6      	lsrs	r6, r6, #31
 8000846:	2b00      	cmp	r3, #0
 8000848:	d01b      	beq.n	8000882 <__aeabi_fdiv+0x76>
 800084a:	2bff      	cmp	r3, #255	@ 0xff
 800084c:	d013      	beq.n	8000876 <__aeabi_fdiv+0x6a>
 800084e:	4642      	mov	r2, r8
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	00d2      	lsls	r2, r2, #3
 8000854:	04c9      	lsls	r1, r1, #19
 8000856:	4311      	orrs	r1, r2
 8000858:	4688      	mov	r8, r1
 800085a:	2000      	movs	r0, #0
 800085c:	3b7f      	subs	r3, #127	@ 0x7f
 800085e:	0029      	movs	r1, r5
 8000860:	1aff      	subs	r7, r7, r3
 8000862:	464b      	mov	r3, r9
 8000864:	4071      	eors	r1, r6
 8000866:	b2c9      	uxtb	r1, r1
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d900      	bls.n	800086e <__aeabi_fdiv+0x62>
 800086c:	e0b5      	b.n	80009da <__aeabi_fdiv+0x1ce>
 800086e:	4a74      	ldr	r2, [pc, #464]	@ (8000a40 <__aeabi_fdiv+0x234>)
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	58d3      	ldr	r3, [r2, r3]
 8000874:	469f      	mov	pc, r3
 8000876:	4643      	mov	r3, r8
 8000878:	2b00      	cmp	r3, #0
 800087a:	d13f      	bne.n	80008fc <__aeabi_fdiv+0xf0>
 800087c:	3fff      	subs	r7, #255	@ 0xff
 800087e:	3302      	adds	r3, #2
 8000880:	e003      	b.n	800088a <__aeabi_fdiv+0x7e>
 8000882:	4643      	mov	r3, r8
 8000884:	2b00      	cmp	r3, #0
 8000886:	d12d      	bne.n	80008e4 <__aeabi_fdiv+0xd8>
 8000888:	2301      	movs	r3, #1
 800088a:	0029      	movs	r1, r5
 800088c:	464a      	mov	r2, r9
 800088e:	4071      	eors	r1, r6
 8000890:	b2c9      	uxtb	r1, r1
 8000892:	431a      	orrs	r2, r3
 8000894:	2a0e      	cmp	r2, #14
 8000896:	d838      	bhi.n	800090a <__aeabi_fdiv+0xfe>
 8000898:	486a      	ldr	r0, [pc, #424]	@ (8000a44 <__aeabi_fdiv+0x238>)
 800089a:	0092      	lsls	r2, r2, #2
 800089c:	5882      	ldr	r2, [r0, r2]
 800089e:	4697      	mov	pc, r2
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d113      	bne.n	80008cc <__aeabi_fdiv+0xc0>
 80008a4:	2304      	movs	r3, #4
 80008a6:	4699      	mov	r9, r3
 80008a8:	3b03      	subs	r3, #3
 80008aa:	2700      	movs	r7, #0
 80008ac:	469a      	mov	sl, r3
 80008ae:	e7c4      	b.n	800083a <__aeabi_fdiv+0x2e>
 80008b0:	2c00      	cmp	r4, #0
 80008b2:	d105      	bne.n	80008c0 <__aeabi_fdiv+0xb4>
 80008b4:	2308      	movs	r3, #8
 80008b6:	4699      	mov	r9, r3
 80008b8:	3b06      	subs	r3, #6
 80008ba:	27ff      	movs	r7, #255	@ 0xff
 80008bc:	469a      	mov	sl, r3
 80008be:	e7bc      	b.n	800083a <__aeabi_fdiv+0x2e>
 80008c0:	230c      	movs	r3, #12
 80008c2:	4699      	mov	r9, r3
 80008c4:	3b09      	subs	r3, #9
 80008c6:	27ff      	movs	r7, #255	@ 0xff
 80008c8:	469a      	mov	sl, r3
 80008ca:	e7b6      	b.n	800083a <__aeabi_fdiv+0x2e>
 80008cc:	0020      	movs	r0, r4
 80008ce:	f000 fc87 	bl	80011e0 <__clzsi2>
 80008d2:	2776      	movs	r7, #118	@ 0x76
 80008d4:	1f43      	subs	r3, r0, #5
 80008d6:	409c      	lsls	r4, r3
 80008d8:	2300      	movs	r3, #0
 80008da:	427f      	negs	r7, r7
 80008dc:	4699      	mov	r9, r3
 80008de:	469a      	mov	sl, r3
 80008e0:	1a3f      	subs	r7, r7, r0
 80008e2:	e7aa      	b.n	800083a <__aeabi_fdiv+0x2e>
 80008e4:	4640      	mov	r0, r8
 80008e6:	f000 fc7b 	bl	80011e0 <__clzsi2>
 80008ea:	4642      	mov	r2, r8
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409a      	lsls	r2, r3
 80008f0:	2376      	movs	r3, #118	@ 0x76
 80008f2:	425b      	negs	r3, r3
 80008f4:	1a1b      	subs	r3, r3, r0
 80008f6:	4690      	mov	r8, r2
 80008f8:	2000      	movs	r0, #0
 80008fa:	e7b0      	b.n	800085e <__aeabi_fdiv+0x52>
 80008fc:	2303      	movs	r3, #3
 80008fe:	464a      	mov	r2, r9
 8000900:	431a      	orrs	r2, r3
 8000902:	4691      	mov	r9, r2
 8000904:	2003      	movs	r0, #3
 8000906:	33fc      	adds	r3, #252	@ 0xfc
 8000908:	e7a9      	b.n	800085e <__aeabi_fdiv+0x52>
 800090a:	000d      	movs	r5, r1
 800090c:	20ff      	movs	r0, #255	@ 0xff
 800090e:	2200      	movs	r2, #0
 8000910:	05c0      	lsls	r0, r0, #23
 8000912:	07ed      	lsls	r5, r5, #31
 8000914:	4310      	orrs	r0, r2
 8000916:	4328      	orrs	r0, r5
 8000918:	bce0      	pop	{r5, r6, r7}
 800091a:	46ba      	mov	sl, r7
 800091c:	46b1      	mov	r9, r6
 800091e:	46a8      	mov	r8, r5
 8000920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000922:	000d      	movs	r5, r1
 8000924:	2000      	movs	r0, #0
 8000926:	2200      	movs	r2, #0
 8000928:	e7f2      	b.n	8000910 <__aeabi_fdiv+0x104>
 800092a:	4653      	mov	r3, sl
 800092c:	2b02      	cmp	r3, #2
 800092e:	d0ed      	beq.n	800090c <__aeabi_fdiv+0x100>
 8000930:	2b03      	cmp	r3, #3
 8000932:	d033      	beq.n	800099c <__aeabi_fdiv+0x190>
 8000934:	46a0      	mov	r8, r4
 8000936:	2b01      	cmp	r3, #1
 8000938:	d105      	bne.n	8000946 <__aeabi_fdiv+0x13a>
 800093a:	2000      	movs	r0, #0
 800093c:	2200      	movs	r2, #0
 800093e:	e7e7      	b.n	8000910 <__aeabi_fdiv+0x104>
 8000940:	0035      	movs	r5, r6
 8000942:	2803      	cmp	r0, #3
 8000944:	d07a      	beq.n	8000a3c <__aeabi_fdiv+0x230>
 8000946:	003b      	movs	r3, r7
 8000948:	337f      	adds	r3, #127	@ 0x7f
 800094a:	2b00      	cmp	r3, #0
 800094c:	dd2d      	ble.n	80009aa <__aeabi_fdiv+0x19e>
 800094e:	4642      	mov	r2, r8
 8000950:	0752      	lsls	r2, r2, #29
 8000952:	d007      	beq.n	8000964 <__aeabi_fdiv+0x158>
 8000954:	220f      	movs	r2, #15
 8000956:	4641      	mov	r1, r8
 8000958:	400a      	ands	r2, r1
 800095a:	2a04      	cmp	r2, #4
 800095c:	d002      	beq.n	8000964 <__aeabi_fdiv+0x158>
 800095e:	2204      	movs	r2, #4
 8000960:	4694      	mov	ip, r2
 8000962:	44e0      	add	r8, ip
 8000964:	4642      	mov	r2, r8
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	d505      	bpl.n	8000976 <__aeabi_fdiv+0x16a>
 800096a:	4642      	mov	r2, r8
 800096c:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <__aeabi_fdiv+0x23c>)
 800096e:	401a      	ands	r2, r3
 8000970:	003b      	movs	r3, r7
 8000972:	4690      	mov	r8, r2
 8000974:	3380      	adds	r3, #128	@ 0x80
 8000976:	2bfe      	cmp	r3, #254	@ 0xfe
 8000978:	dcc8      	bgt.n	800090c <__aeabi_fdiv+0x100>
 800097a:	4642      	mov	r2, r8
 800097c:	0192      	lsls	r2, r2, #6
 800097e:	0a52      	lsrs	r2, r2, #9
 8000980:	b2d8      	uxtb	r0, r3
 8000982:	e7c5      	b.n	8000910 <__aeabi_fdiv+0x104>
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	2500      	movs	r5, #0
 8000988:	20ff      	movs	r0, #255	@ 0xff
 800098a:	03d2      	lsls	r2, r2, #15
 800098c:	e7c0      	b.n	8000910 <__aeabi_fdiv+0x104>
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	03d2      	lsls	r2, r2, #15
 8000992:	4214      	tst	r4, r2
 8000994:	d002      	beq.n	800099c <__aeabi_fdiv+0x190>
 8000996:	4643      	mov	r3, r8
 8000998:	4213      	tst	r3, r2
 800099a:	d049      	beq.n	8000a30 <__aeabi_fdiv+0x224>
 800099c:	2280      	movs	r2, #128	@ 0x80
 800099e:	03d2      	lsls	r2, r2, #15
 80009a0:	4322      	orrs	r2, r4
 80009a2:	0252      	lsls	r2, r2, #9
 80009a4:	20ff      	movs	r0, #255	@ 0xff
 80009a6:	0a52      	lsrs	r2, r2, #9
 80009a8:	e7b2      	b.n	8000910 <__aeabi_fdiv+0x104>
 80009aa:	2201      	movs	r2, #1
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	2b1b      	cmp	r3, #27
 80009b0:	dcc3      	bgt.n	800093a <__aeabi_fdiv+0x12e>
 80009b2:	4642      	mov	r2, r8
 80009b4:	40da      	lsrs	r2, r3
 80009b6:	4643      	mov	r3, r8
 80009b8:	379e      	adds	r7, #158	@ 0x9e
 80009ba:	40bb      	lsls	r3, r7
 80009bc:	1e59      	subs	r1, r3, #1
 80009be:	418b      	sbcs	r3, r1
 80009c0:	431a      	orrs	r2, r3
 80009c2:	0753      	lsls	r3, r2, #29
 80009c4:	d004      	beq.n	80009d0 <__aeabi_fdiv+0x1c4>
 80009c6:	230f      	movs	r3, #15
 80009c8:	4013      	ands	r3, r2
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d000      	beq.n	80009d0 <__aeabi_fdiv+0x1c4>
 80009ce:	3204      	adds	r2, #4
 80009d0:	0153      	lsls	r3, r2, #5
 80009d2:	d529      	bpl.n	8000a28 <__aeabi_fdiv+0x21c>
 80009d4:	2001      	movs	r0, #1
 80009d6:	2200      	movs	r2, #0
 80009d8:	e79a      	b.n	8000910 <__aeabi_fdiv+0x104>
 80009da:	4642      	mov	r2, r8
 80009dc:	0163      	lsls	r3, r4, #5
 80009de:	0155      	lsls	r5, r2, #5
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	d215      	bcs.n	8000a10 <__aeabi_fdiv+0x204>
 80009e4:	201b      	movs	r0, #27
 80009e6:	2200      	movs	r2, #0
 80009e8:	3f01      	subs	r7, #1
 80009ea:	2601      	movs	r6, #1
 80009ec:	001c      	movs	r4, r3
 80009ee:	0052      	lsls	r2, r2, #1
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	db01      	blt.n	80009fa <__aeabi_fdiv+0x1ee>
 80009f6:	429d      	cmp	r5, r3
 80009f8:	d801      	bhi.n	80009fe <__aeabi_fdiv+0x1f2>
 80009fa:	1b5b      	subs	r3, r3, r5
 80009fc:	4332      	orrs	r2, r6
 80009fe:	3801      	subs	r0, #1
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d1f3      	bne.n	80009ec <__aeabi_fdiv+0x1e0>
 8000a04:	1e58      	subs	r0, r3, #1
 8000a06:	4183      	sbcs	r3, r0
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	4698      	mov	r8, r3
 8000a0c:	000d      	movs	r5, r1
 8000a0e:	e79a      	b.n	8000946 <__aeabi_fdiv+0x13a>
 8000a10:	201a      	movs	r0, #26
 8000a12:	2201      	movs	r2, #1
 8000a14:	1b5b      	subs	r3, r3, r5
 8000a16:	e7e8      	b.n	80009ea <__aeabi_fdiv+0x1de>
 8000a18:	3b02      	subs	r3, #2
 8000a1a:	425a      	negs	r2, r3
 8000a1c:	4153      	adcs	r3, r2
 8000a1e:	425b      	negs	r3, r3
 8000a20:	0035      	movs	r5, r6
 8000a22:	2200      	movs	r2, #0
 8000a24:	b2d8      	uxtb	r0, r3
 8000a26:	e773      	b.n	8000910 <__aeabi_fdiv+0x104>
 8000a28:	0192      	lsls	r2, r2, #6
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	0a52      	lsrs	r2, r2, #9
 8000a2e:	e76f      	b.n	8000910 <__aeabi_fdiv+0x104>
 8000a30:	431a      	orrs	r2, r3
 8000a32:	0252      	lsls	r2, r2, #9
 8000a34:	0035      	movs	r5, r6
 8000a36:	20ff      	movs	r0, #255	@ 0xff
 8000a38:	0a52      	lsrs	r2, r2, #9
 8000a3a:	e769      	b.n	8000910 <__aeabi_fdiv+0x104>
 8000a3c:	4644      	mov	r4, r8
 8000a3e:	e7ad      	b.n	800099c <__aeabi_fdiv+0x190>
 8000a40:	080074d8 	.word	0x080074d8
 8000a44:	08007518 	.word	0x08007518
 8000a48:	f7ffffff 	.word	0xf7ffffff

08000a4c <__aeabi_fmul>:
 8000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4e:	464f      	mov	r7, r9
 8000a50:	4646      	mov	r6, r8
 8000a52:	46d6      	mov	lr, sl
 8000a54:	0243      	lsls	r3, r0, #9
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	0045      	lsls	r5, r0, #1
 8000a5a:	b5c0      	push	{r6, r7, lr}
 8000a5c:	4699      	mov	r9, r3
 8000a5e:	1c0f      	adds	r7, r1, #0
 8000a60:	0e2d      	lsrs	r5, r5, #24
 8000a62:	0fc6      	lsrs	r6, r0, #31
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_fmul+0x1e>
 8000a68:	e088      	b.n	8000b7c <__aeabi_fmul+0x130>
 8000a6a:	2dff      	cmp	r5, #255	@ 0xff
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fmul+0x24>
 8000a6e:	e08d      	b.n	8000b8c <__aeabi_fmul+0x140>
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	04d2      	lsls	r2, r2, #19
 8000a76:	431a      	orrs	r2, r3
 8000a78:	2300      	movs	r3, #0
 8000a7a:	4691      	mov	r9, r2
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	469a      	mov	sl, r3
 8000a80:	3d7f      	subs	r5, #127	@ 0x7f
 8000a82:	027c      	lsls	r4, r7, #9
 8000a84:	007b      	lsls	r3, r7, #1
 8000a86:	0a64      	lsrs	r4, r4, #9
 8000a88:	0e1b      	lsrs	r3, r3, #24
 8000a8a:	0fff      	lsrs	r7, r7, #31
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d068      	beq.n	8000b62 <__aeabi_fmul+0x116>
 8000a90:	2bff      	cmp	r3, #255	@ 0xff
 8000a92:	d021      	beq.n	8000ad8 <__aeabi_fmul+0x8c>
 8000a94:	2280      	movs	r2, #128	@ 0x80
 8000a96:	00e4      	lsls	r4, r4, #3
 8000a98:	04d2      	lsls	r2, r2, #19
 8000a9a:	4314      	orrs	r4, r2
 8000a9c:	4642      	mov	r2, r8
 8000a9e:	3b7f      	subs	r3, #127	@ 0x7f
 8000aa0:	195b      	adds	r3, r3, r5
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	1c5d      	adds	r5, r3, #1
 8000aa6:	2a0a      	cmp	r2, #10
 8000aa8:	dc2e      	bgt.n	8000b08 <__aeabi_fmul+0xbc>
 8000aaa:	407e      	eors	r6, r7
 8000aac:	4642      	mov	r2, r8
 8000aae:	2a02      	cmp	r2, #2
 8000ab0:	dc23      	bgt.n	8000afa <__aeabi_fmul+0xae>
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	2a01      	cmp	r2, #1
 8000ab6:	d900      	bls.n	8000aba <__aeabi_fmul+0x6e>
 8000ab8:	e0bd      	b.n	8000c36 <__aeabi_fmul+0x1ea>
 8000aba:	2902      	cmp	r1, #2
 8000abc:	d06e      	beq.n	8000b9c <__aeabi_fmul+0x150>
 8000abe:	2901      	cmp	r1, #1
 8000ac0:	d12c      	bne.n	8000b1c <__aeabi_fmul+0xd0>
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	05c0      	lsls	r0, r0, #23
 8000ac8:	07f6      	lsls	r6, r6, #31
 8000aca:	4310      	orrs	r0, r2
 8000acc:	4330      	orrs	r0, r6
 8000ace:	bce0      	pop	{r5, r6, r7}
 8000ad0:	46ba      	mov	sl, r7
 8000ad2:	46b1      	mov	r9, r6
 8000ad4:	46a8      	mov	r8, r5
 8000ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad8:	002b      	movs	r3, r5
 8000ada:	33ff      	adds	r3, #255	@ 0xff
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d065      	beq.n	8000bac <__aeabi_fmul+0x160>
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	4641      	mov	r1, r8
 8000ae4:	4311      	orrs	r1, r2
 8000ae6:	0032      	movs	r2, r6
 8000ae8:	3501      	adds	r5, #1
 8000aea:	4688      	mov	r8, r1
 8000aec:	407a      	eors	r2, r7
 8000aee:	35ff      	adds	r5, #255	@ 0xff
 8000af0:	290a      	cmp	r1, #10
 8000af2:	dd00      	ble.n	8000af6 <__aeabi_fmul+0xaa>
 8000af4:	e0d8      	b.n	8000ca8 <__aeabi_fmul+0x25c>
 8000af6:	0016      	movs	r6, r2
 8000af8:	2103      	movs	r1, #3
 8000afa:	4640      	mov	r0, r8
 8000afc:	2201      	movs	r2, #1
 8000afe:	4082      	lsls	r2, r0
 8000b00:	20a6      	movs	r0, #166	@ 0xa6
 8000b02:	00c0      	lsls	r0, r0, #3
 8000b04:	4202      	tst	r2, r0
 8000b06:	d020      	beq.n	8000b4a <__aeabi_fmul+0xfe>
 8000b08:	4653      	mov	r3, sl
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d046      	beq.n	8000b9c <__aeabi_fmul+0x150>
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fmul+0xc8>
 8000b12:	e0bb      	b.n	8000c8c <__aeabi_fmul+0x240>
 8000b14:	4651      	mov	r1, sl
 8000b16:	464c      	mov	r4, r9
 8000b18:	2901      	cmp	r1, #1
 8000b1a:	d0d2      	beq.n	8000ac2 <__aeabi_fmul+0x76>
 8000b1c:	002b      	movs	r3, r5
 8000b1e:	337f      	adds	r3, #127	@ 0x7f
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dd70      	ble.n	8000c06 <__aeabi_fmul+0x1ba>
 8000b24:	0762      	lsls	r2, r4, #29
 8000b26:	d004      	beq.n	8000b32 <__aeabi_fmul+0xe6>
 8000b28:	220f      	movs	r2, #15
 8000b2a:	4022      	ands	r2, r4
 8000b2c:	2a04      	cmp	r2, #4
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_fmul+0xe6>
 8000b30:	3404      	adds	r4, #4
 8000b32:	0122      	lsls	r2, r4, #4
 8000b34:	d503      	bpl.n	8000b3e <__aeabi_fmul+0xf2>
 8000b36:	4b63      	ldr	r3, [pc, #396]	@ (8000cc4 <__aeabi_fmul+0x278>)
 8000b38:	401c      	ands	r4, r3
 8000b3a:	002b      	movs	r3, r5
 8000b3c:	3380      	adds	r3, #128	@ 0x80
 8000b3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b40:	dc2c      	bgt.n	8000b9c <__aeabi_fmul+0x150>
 8000b42:	01a2      	lsls	r2, r4, #6
 8000b44:	0a52      	lsrs	r2, r2, #9
 8000b46:	b2d8      	uxtb	r0, r3
 8000b48:	e7bd      	b.n	8000ac6 <__aeabi_fmul+0x7a>
 8000b4a:	2090      	movs	r0, #144	@ 0x90
 8000b4c:	0080      	lsls	r0, r0, #2
 8000b4e:	4202      	tst	r2, r0
 8000b50:	d127      	bne.n	8000ba2 <__aeabi_fmul+0x156>
 8000b52:	38b9      	subs	r0, #185	@ 0xb9
 8000b54:	38ff      	subs	r0, #255	@ 0xff
 8000b56:	4210      	tst	r0, r2
 8000b58:	d06d      	beq.n	8000c36 <__aeabi_fmul+0x1ea>
 8000b5a:	003e      	movs	r6, r7
 8000b5c:	46a1      	mov	r9, r4
 8000b5e:	468a      	mov	sl, r1
 8000b60:	e7d2      	b.n	8000b08 <__aeabi_fmul+0xbc>
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d141      	bne.n	8000bea <__aeabi_fmul+0x19e>
 8000b66:	2301      	movs	r3, #1
 8000b68:	4642      	mov	r2, r8
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	002b      	movs	r3, r5
 8000b70:	4642      	mov	r2, r8
 8000b72:	2101      	movs	r1, #1
 8000b74:	1c5d      	adds	r5, r3, #1
 8000b76:	2a0a      	cmp	r2, #10
 8000b78:	dd97      	ble.n	8000aaa <__aeabi_fmul+0x5e>
 8000b7a:	e7c5      	b.n	8000b08 <__aeabi_fmul+0xbc>
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d126      	bne.n	8000bce <__aeabi_fmul+0x182>
 8000b80:	2304      	movs	r3, #4
 8000b82:	4698      	mov	r8, r3
 8000b84:	3b03      	subs	r3, #3
 8000b86:	2500      	movs	r5, #0
 8000b88:	469a      	mov	sl, r3
 8000b8a:	e77a      	b.n	8000a82 <__aeabi_fmul+0x36>
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d118      	bne.n	8000bc2 <__aeabi_fmul+0x176>
 8000b90:	2308      	movs	r3, #8
 8000b92:	4698      	mov	r8, r3
 8000b94:	3b06      	subs	r3, #6
 8000b96:	25ff      	movs	r5, #255	@ 0xff
 8000b98:	469a      	mov	sl, r3
 8000b9a:	e772      	b.n	8000a82 <__aeabi_fmul+0x36>
 8000b9c:	20ff      	movs	r0, #255	@ 0xff
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	e791      	b.n	8000ac6 <__aeabi_fmul+0x7a>
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	20ff      	movs	r0, #255	@ 0xff
 8000ba8:	03d2      	lsls	r2, r2, #15
 8000baa:	e78c      	b.n	8000ac6 <__aeabi_fmul+0x7a>
 8000bac:	4641      	mov	r1, r8
 8000bae:	2202      	movs	r2, #2
 8000bb0:	3501      	adds	r5, #1
 8000bb2:	4311      	orrs	r1, r2
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	35ff      	adds	r5, #255	@ 0xff
 8000bb8:	290a      	cmp	r1, #10
 8000bba:	dca5      	bgt.n	8000b08 <__aeabi_fmul+0xbc>
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	407e      	eors	r6, r7
 8000bc0:	e774      	b.n	8000aac <__aeabi_fmul+0x60>
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	3b09      	subs	r3, #9
 8000bc8:	25ff      	movs	r5, #255	@ 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e759      	b.n	8000a82 <__aeabi_fmul+0x36>
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 fb06 	bl	80011e0 <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	@ 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	4698      	mov	r8, r3
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e74b      	b.n	8000a82 <__aeabi_fmul+0x36>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f000 faf8 	bl	80011e0 <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	@ 0x76
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	1c5d      	adds	r5, r3, #1
 8000bfe:	2a0a      	cmp	r2, #10
 8000c00:	dc00      	bgt.n	8000c04 <__aeabi_fmul+0x1b8>
 8000c02:	e752      	b.n	8000aaa <__aeabi_fmul+0x5e>
 8000c04:	e780      	b.n	8000b08 <__aeabi_fmul+0xbc>
 8000c06:	2201      	movs	r2, #1
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	2b1b      	cmp	r3, #27
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fmul+0x1c4>
 8000c0e:	e758      	b.n	8000ac2 <__aeabi_fmul+0x76>
 8000c10:	359e      	adds	r5, #158	@ 0x9e
 8000c12:	0022      	movs	r2, r4
 8000c14:	40ac      	lsls	r4, r5
 8000c16:	40da      	lsrs	r2, r3
 8000c18:	1e63      	subs	r3, r4, #1
 8000c1a:	419c      	sbcs	r4, r3
 8000c1c:	4322      	orrs	r2, r4
 8000c1e:	0753      	lsls	r3, r2, #29
 8000c20:	d004      	beq.n	8000c2c <__aeabi_fmul+0x1e0>
 8000c22:	230f      	movs	r3, #15
 8000c24:	4013      	ands	r3, r2
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	d000      	beq.n	8000c2c <__aeabi_fmul+0x1e0>
 8000c2a:	3204      	adds	r2, #4
 8000c2c:	0153      	lsls	r3, r2, #5
 8000c2e:	d537      	bpl.n	8000ca0 <__aeabi_fmul+0x254>
 8000c30:	2001      	movs	r0, #1
 8000c32:	2200      	movs	r2, #0
 8000c34:	e747      	b.n	8000ac6 <__aeabi_fmul+0x7a>
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	464a      	mov	r2, r9
 8000c3a:	0424      	lsls	r4, r4, #16
 8000c3c:	0c24      	lsrs	r4, r4, #16
 8000c3e:	0027      	movs	r7, r4
 8000c40:	0c10      	lsrs	r0, r2, #16
 8000c42:	0412      	lsls	r2, r2, #16
 8000c44:	0c12      	lsrs	r2, r2, #16
 8000c46:	4344      	muls	r4, r0
 8000c48:	4357      	muls	r7, r2
 8000c4a:	4348      	muls	r0, r1
 8000c4c:	4351      	muls	r1, r2
 8000c4e:	0c3a      	lsrs	r2, r7, #16
 8000c50:	1909      	adds	r1, r1, r4
 8000c52:	1852      	adds	r2, r2, r1
 8000c54:	4294      	cmp	r4, r2
 8000c56:	d903      	bls.n	8000c60 <__aeabi_fmul+0x214>
 8000c58:	2180      	movs	r1, #128	@ 0x80
 8000c5a:	0249      	lsls	r1, r1, #9
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	4460      	add	r0, ip
 8000c60:	043f      	lsls	r7, r7, #16
 8000c62:	0411      	lsls	r1, r2, #16
 8000c64:	0c3f      	lsrs	r7, r7, #16
 8000c66:	19c9      	adds	r1, r1, r7
 8000c68:	018c      	lsls	r4, r1, #6
 8000c6a:	1e67      	subs	r7, r4, #1
 8000c6c:	41bc      	sbcs	r4, r7
 8000c6e:	0c12      	lsrs	r2, r2, #16
 8000c70:	0e89      	lsrs	r1, r1, #26
 8000c72:	1812      	adds	r2, r2, r0
 8000c74:	430c      	orrs	r4, r1
 8000c76:	0192      	lsls	r2, r2, #6
 8000c78:	4314      	orrs	r4, r2
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	d50e      	bpl.n	8000c9c <__aeabi_fmul+0x250>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	0862      	lsrs	r2, r4, #1
 8000c82:	401c      	ands	r4, r3
 8000c84:	4314      	orrs	r4, r2
 8000c86:	e749      	b.n	8000b1c <__aeabi_fmul+0xd0>
 8000c88:	003e      	movs	r6, r7
 8000c8a:	46a1      	mov	r9, r4
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	464b      	mov	r3, r9
 8000c90:	03d2      	lsls	r2, r2, #15
 8000c92:	431a      	orrs	r2, r3
 8000c94:	0252      	lsls	r2, r2, #9
 8000c96:	20ff      	movs	r0, #255	@ 0xff
 8000c98:	0a52      	lsrs	r2, r2, #9
 8000c9a:	e714      	b.n	8000ac6 <__aeabi_fmul+0x7a>
 8000c9c:	001d      	movs	r5, r3
 8000c9e:	e73d      	b.n	8000b1c <__aeabi_fmul+0xd0>
 8000ca0:	0192      	lsls	r2, r2, #6
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	0a52      	lsrs	r2, r2, #9
 8000ca6:	e70e      	b.n	8000ac6 <__aeabi_fmul+0x7a>
 8000ca8:	290f      	cmp	r1, #15
 8000caa:	d1ed      	bne.n	8000c88 <__aeabi_fmul+0x23c>
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	464b      	mov	r3, r9
 8000cb0:	03d2      	lsls	r2, r2, #15
 8000cb2:	4213      	tst	r3, r2
 8000cb4:	d0ea      	beq.n	8000c8c <__aeabi_fmul+0x240>
 8000cb6:	4214      	tst	r4, r2
 8000cb8:	d1e8      	bne.n	8000c8c <__aeabi_fmul+0x240>
 8000cba:	003e      	movs	r6, r7
 8000cbc:	20ff      	movs	r0, #255	@ 0xff
 8000cbe:	4322      	orrs	r2, r4
 8000cc0:	e701      	b.n	8000ac6 <__aeabi_fmul+0x7a>
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	f7ffffff 	.word	0xf7ffffff

08000cc8 <__aeabi_fsub>:
 8000cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cca:	4647      	mov	r7, r8
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	024e      	lsls	r6, r1, #9
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0045      	lsls	r5, r0, #1
 8000cd4:	0a72      	lsrs	r2, r6, #9
 8000cd6:	0fc4      	lsrs	r4, r0, #31
 8000cd8:	0048      	lsls	r0, r1, #1
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	4694      	mov	ip, r2
 8000cde:	0a5f      	lsrs	r7, r3, #9
 8000ce0:	0e2d      	lsrs	r5, r5, #24
 8000ce2:	099b      	lsrs	r3, r3, #6
 8000ce4:	0e00      	lsrs	r0, r0, #24
 8000ce6:	0fc9      	lsrs	r1, r1, #31
 8000ce8:	09b6      	lsrs	r6, r6, #6
 8000cea:	28ff      	cmp	r0, #255	@ 0xff
 8000cec:	d024      	beq.n	8000d38 <__aeabi_fsub+0x70>
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4051      	eors	r1, r2
 8000cf2:	1a2a      	subs	r2, r5, r0
 8000cf4:	428c      	cmp	r4, r1
 8000cf6:	d00f      	beq.n	8000d18 <__aeabi_fsub+0x50>
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	dc00      	bgt.n	8000cfe <__aeabi_fsub+0x36>
 8000cfc:	e16a      	b.n	8000fd4 <__aeabi_fsub+0x30c>
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d135      	bne.n	8000d6e <__aeabi_fsub+0xa6>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d100      	bne.n	8000d08 <__aeabi_fsub+0x40>
 8000d06:	e0a2      	b.n	8000e4e <__aeabi_fsub+0x186>
 8000d08:	1e51      	subs	r1, r2, #1
 8000d0a:	2a01      	cmp	r2, #1
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x48>
 8000d0e:	e124      	b.n	8000f5a <__aeabi_fsub+0x292>
 8000d10:	2aff      	cmp	r2, #255	@ 0xff
 8000d12:	d021      	beq.n	8000d58 <__aeabi_fsub+0x90>
 8000d14:	000a      	movs	r2, r1
 8000d16:	e02f      	b.n	8000d78 <__aeabi_fsub+0xb0>
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	dc00      	bgt.n	8000d1e <__aeabi_fsub+0x56>
 8000d1c:	e167      	b.n	8000fee <__aeabi_fsub+0x326>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d05e      	beq.n	8000de0 <__aeabi_fsub+0x118>
 8000d22:	2dff      	cmp	r5, #255	@ 0xff
 8000d24:	d018      	beq.n	8000d58 <__aeabi_fsub+0x90>
 8000d26:	2180      	movs	r1, #128	@ 0x80
 8000d28:	04c9      	lsls	r1, r1, #19
 8000d2a:	430e      	orrs	r6, r1
 8000d2c:	2a1b      	cmp	r2, #27
 8000d2e:	dc00      	bgt.n	8000d32 <__aeabi_fsub+0x6a>
 8000d30:	e076      	b.n	8000e20 <__aeabi_fsub+0x158>
 8000d32:	002a      	movs	r2, r5
 8000d34:	3301      	adds	r3, #1
 8000d36:	e032      	b.n	8000d9e <__aeabi_fsub+0xd6>
 8000d38:	002a      	movs	r2, r5
 8000d3a:	3aff      	subs	r2, #255	@ 0xff
 8000d3c:	4691      	mov	r9, r2
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d042      	beq.n	8000dc8 <__aeabi_fsub+0x100>
 8000d42:	428c      	cmp	r4, r1
 8000d44:	d055      	beq.n	8000df2 <__aeabi_fsub+0x12a>
 8000d46:	464a      	mov	r2, r9
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_fsub+0x86>
 8000d4c:	e09c      	b.n	8000e88 <__aeabi_fsub+0x1c0>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_fsub+0x8c>
 8000d52:	e077      	b.n	8000e44 <__aeabi_fsub+0x17c>
 8000d54:	000c      	movs	r4, r1
 8000d56:	0033      	movs	r3, r6
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_fsub+0x98>
 8000d5e:	e06e      	b.n	8000e3e <__aeabi_fsub+0x176>
 8000d60:	2280      	movs	r2, #128	@ 0x80
 8000d62:	03d2      	lsls	r2, r2, #15
 8000d64:	4313      	orrs	r3, r2
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	20ff      	movs	r0, #255	@ 0xff
 8000d6a:	0a5b      	lsrs	r3, r3, #9
 8000d6c:	e024      	b.n	8000db8 <__aeabi_fsub+0xf0>
 8000d6e:	2dff      	cmp	r5, #255	@ 0xff
 8000d70:	d0f2      	beq.n	8000d58 <__aeabi_fsub+0x90>
 8000d72:	2180      	movs	r1, #128	@ 0x80
 8000d74:	04c9      	lsls	r1, r1, #19
 8000d76:	430e      	orrs	r6, r1
 8000d78:	2101      	movs	r1, #1
 8000d7a:	2a1b      	cmp	r2, #27
 8000d7c:	dc08      	bgt.n	8000d90 <__aeabi_fsub+0xc8>
 8000d7e:	0031      	movs	r1, r6
 8000d80:	2020      	movs	r0, #32
 8000d82:	40d1      	lsrs	r1, r2
 8000d84:	1a82      	subs	r2, r0, r2
 8000d86:	4096      	lsls	r6, r2
 8000d88:	0032      	movs	r2, r6
 8000d8a:	1e50      	subs	r0, r2, #1
 8000d8c:	4182      	sbcs	r2, r0
 8000d8e:	4311      	orrs	r1, r2
 8000d90:	1a5b      	subs	r3, r3, r1
 8000d92:	015a      	lsls	r2, r3, #5
 8000d94:	d460      	bmi.n	8000e58 <__aeabi_fsub+0x190>
 8000d96:	2107      	movs	r1, #7
 8000d98:	002a      	movs	r2, r5
 8000d9a:	4019      	ands	r1, r3
 8000d9c:	d057      	beq.n	8000e4e <__aeabi_fsub+0x186>
 8000d9e:	210f      	movs	r1, #15
 8000da0:	4019      	ands	r1, r3
 8000da2:	2904      	cmp	r1, #4
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fsub+0xe0>
 8000da6:	3304      	adds	r3, #4
 8000da8:	0159      	lsls	r1, r3, #5
 8000daa:	d550      	bpl.n	8000e4e <__aeabi_fsub+0x186>
 8000dac:	1c50      	adds	r0, r2, #1
 8000dae:	2afe      	cmp	r2, #254	@ 0xfe
 8000db0:	d045      	beq.n	8000e3e <__aeabi_fsub+0x176>
 8000db2:	019b      	lsls	r3, r3, #6
 8000db4:	b2c0      	uxtb	r0, r0
 8000db6:	0a5b      	lsrs	r3, r3, #9
 8000db8:	05c0      	lsls	r0, r0, #23
 8000dba:	4318      	orrs	r0, r3
 8000dbc:	07e4      	lsls	r4, r4, #31
 8000dbe:	4320      	orrs	r0, r4
 8000dc0:	bcc0      	pop	{r6, r7}
 8000dc2:	46b9      	mov	r9, r7
 8000dc4:	46b0      	mov	r8, r6
 8000dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4051      	eors	r1, r2
 8000dcc:	428c      	cmp	r4, r1
 8000dce:	d1ba      	bne.n	8000d46 <__aeabi_fsub+0x7e>
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d010      	beq.n	8000df8 <__aeabi_fsub+0x130>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_fsub+0x114>
 8000dda:	e098      	b.n	8000f0e <__aeabi_fsub+0x246>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e7bb      	b.n	8000d58 <__aeabi_fsub+0x90>
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d034      	beq.n	8000e4e <__aeabi_fsub+0x186>
 8000de4:	1e51      	subs	r1, r2, #1
 8000de6:	2a01      	cmp	r2, #1
 8000de8:	d06e      	beq.n	8000ec8 <__aeabi_fsub+0x200>
 8000dea:	2aff      	cmp	r2, #255	@ 0xff
 8000dec:	d0b4      	beq.n	8000d58 <__aeabi_fsub+0x90>
 8000dee:	000a      	movs	r2, r1
 8000df0:	e79c      	b.n	8000d2c <__aeabi_fsub+0x64>
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d000      	beq.n	8000df8 <__aeabi_fsub+0x130>
 8000df6:	e088      	b.n	8000f0a <__aeabi_fsub+0x242>
 8000df8:	20fe      	movs	r0, #254	@ 0xfe
 8000dfa:	1c6a      	adds	r2, r5, #1
 8000dfc:	4210      	tst	r0, r2
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_fsub+0x13a>
 8000e00:	e092      	b.n	8000f28 <__aeabi_fsub+0x260>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d000      	beq.n	8000e08 <__aeabi_fsub+0x140>
 8000e06:	e0a4      	b.n	8000f52 <__aeabi_fsub+0x28a>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fsub+0x146>
 8000e0c:	e0cb      	b.n	8000fa6 <__aeabi_fsub+0x2de>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	d000      	beq.n	8000e14 <__aeabi_fsub+0x14c>
 8000e12:	e0ca      	b.n	8000faa <__aeabi_fsub+0x2e2>
 8000e14:	2200      	movs	r2, #0
 8000e16:	08db      	lsrs	r3, r3, #3
 8000e18:	025b      	lsls	r3, r3, #9
 8000e1a:	0a5b      	lsrs	r3, r3, #9
 8000e1c:	b2d0      	uxtb	r0, r2
 8000e1e:	e7cb      	b.n	8000db8 <__aeabi_fsub+0xf0>
 8000e20:	0031      	movs	r1, r6
 8000e22:	2020      	movs	r0, #32
 8000e24:	40d1      	lsrs	r1, r2
 8000e26:	1a82      	subs	r2, r0, r2
 8000e28:	4096      	lsls	r6, r2
 8000e2a:	0032      	movs	r2, r6
 8000e2c:	1e50      	subs	r0, r2, #1
 8000e2e:	4182      	sbcs	r2, r0
 8000e30:	430a      	orrs	r2, r1
 8000e32:	189b      	adds	r3, r3, r2
 8000e34:	015a      	lsls	r2, r3, #5
 8000e36:	d5ae      	bpl.n	8000d96 <__aeabi_fsub+0xce>
 8000e38:	1c6a      	adds	r2, r5, #1
 8000e3a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000e3c:	d14a      	bne.n	8000ed4 <__aeabi_fsub+0x20c>
 8000e3e:	20ff      	movs	r0, #255	@ 0xff
 8000e40:	2300      	movs	r3, #0
 8000e42:	e7b9      	b.n	8000db8 <__aeabi_fsub+0xf0>
 8000e44:	22ff      	movs	r2, #255	@ 0xff
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d14b      	bne.n	8000ee2 <__aeabi_fsub+0x21a>
 8000e4a:	000c      	movs	r4, r1
 8000e4c:	0033      	movs	r3, r6
 8000e4e:	08db      	lsrs	r3, r3, #3
 8000e50:	2aff      	cmp	r2, #255	@ 0xff
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0x18e>
 8000e54:	e781      	b.n	8000d5a <__aeabi_fsub+0x92>
 8000e56:	e7df      	b.n	8000e18 <__aeabi_fsub+0x150>
 8000e58:	019f      	lsls	r7, r3, #6
 8000e5a:	09bf      	lsrs	r7, r7, #6
 8000e5c:	0038      	movs	r0, r7
 8000e5e:	f000 f9bf 	bl	80011e0 <__clzsi2>
 8000e62:	3805      	subs	r0, #5
 8000e64:	4087      	lsls	r7, r0
 8000e66:	4285      	cmp	r5, r0
 8000e68:	dc21      	bgt.n	8000eae <__aeabi_fsub+0x1e6>
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2120      	movs	r1, #32
 8000e6e:	1b42      	subs	r2, r0, r5
 8000e70:	3201      	adds	r2, #1
 8000e72:	40d3      	lsrs	r3, r2
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	4097      	lsls	r7, r2
 8000e78:	1e7a      	subs	r2, r7, #1
 8000e7a:	4197      	sbcs	r7, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	433b      	orrs	r3, r7
 8000e80:	0759      	lsls	r1, r3, #29
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fsub+0x1be>
 8000e84:	e78b      	b.n	8000d9e <__aeabi_fsub+0xd6>
 8000e86:	e78f      	b.n	8000da8 <__aeabi_fsub+0xe0>
 8000e88:	20fe      	movs	r0, #254	@ 0xfe
 8000e8a:	1c6a      	adds	r2, r5, #1
 8000e8c:	4210      	tst	r0, r2
 8000e8e:	d112      	bne.n	8000eb6 <__aeabi_fsub+0x1ee>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d152      	bne.n	8000f3a <__aeabi_fsub+0x272>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d07c      	beq.n	8000f92 <__aeabi_fsub+0x2ca>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d0bb      	beq.n	8000e14 <__aeabi_fsub+0x14c>
 8000e9c:	1b9a      	subs	r2, r3, r6
 8000e9e:	0150      	lsls	r0, r2, #5
 8000ea0:	d400      	bmi.n	8000ea4 <__aeabi_fsub+0x1dc>
 8000ea2:	e08b      	b.n	8000fbc <__aeabi_fsub+0x2f4>
 8000ea4:	2401      	movs	r4, #1
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	1af3      	subs	r3, r6, r3
 8000eaa:	400c      	ands	r4, r1
 8000eac:	e7e8      	b.n	8000e80 <__aeabi_fsub+0x1b8>
 8000eae:	4b56      	ldr	r3, [pc, #344]	@ (8001008 <__aeabi_fsub+0x340>)
 8000eb0:	1a2a      	subs	r2, r5, r0
 8000eb2:	403b      	ands	r3, r7
 8000eb4:	e7e4      	b.n	8000e80 <__aeabi_fsub+0x1b8>
 8000eb6:	1b9f      	subs	r7, r3, r6
 8000eb8:	017a      	lsls	r2, r7, #5
 8000eba:	d446      	bmi.n	8000f4a <__aeabi_fsub+0x282>
 8000ebc:	2f00      	cmp	r7, #0
 8000ebe:	d1cd      	bne.n	8000e5c <__aeabi_fsub+0x194>
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e777      	b.n	8000db8 <__aeabi_fsub+0xf0>
 8000ec8:	199b      	adds	r3, r3, r6
 8000eca:	2501      	movs	r5, #1
 8000ecc:	3201      	adds	r2, #1
 8000ece:	0159      	lsls	r1, r3, #5
 8000ed0:	d400      	bmi.n	8000ed4 <__aeabi_fsub+0x20c>
 8000ed2:	e760      	b.n	8000d96 <__aeabi_fsub+0xce>
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	484d      	ldr	r0, [pc, #308]	@ (800100c <__aeabi_fsub+0x344>)
 8000ed8:	4019      	ands	r1, r3
 8000eda:	085b      	lsrs	r3, r3, #1
 8000edc:	4003      	ands	r3, r0
 8000ede:	430b      	orrs	r3, r1
 8000ee0:	e7ce      	b.n	8000e80 <__aeabi_fsub+0x1b8>
 8000ee2:	1e57      	subs	r7, r2, #1
 8000ee4:	2a01      	cmp	r2, #1
 8000ee6:	d05a      	beq.n	8000f9e <__aeabi_fsub+0x2d6>
 8000ee8:	000c      	movs	r4, r1
 8000eea:	2aff      	cmp	r2, #255	@ 0xff
 8000eec:	d033      	beq.n	8000f56 <__aeabi_fsub+0x28e>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2f1b      	cmp	r7, #27
 8000ef2:	dc07      	bgt.n	8000f04 <__aeabi_fsub+0x23c>
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	1bc9      	subs	r1, r1, r7
 8000ef8:	001a      	movs	r2, r3
 8000efa:	408b      	lsls	r3, r1
 8000efc:	40fa      	lsrs	r2, r7
 8000efe:	1e59      	subs	r1, r3, #1
 8000f00:	418b      	sbcs	r3, r1
 8000f02:	431a      	orrs	r2, r3
 8000f04:	0005      	movs	r5, r0
 8000f06:	1ab3      	subs	r3, r6, r2
 8000f08:	e743      	b.n	8000d92 <__aeabi_fsub+0xca>
 8000f0a:	2d00      	cmp	r5, #0
 8000f0c:	d123      	bne.n	8000f56 <__aeabi_fsub+0x28e>
 8000f0e:	22ff      	movs	r2, #255	@ 0xff
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d09b      	beq.n	8000e4c <__aeabi_fsub+0x184>
 8000f14:	1e51      	subs	r1, r2, #1
 8000f16:	2a01      	cmp	r2, #1
 8000f18:	d0d6      	beq.n	8000ec8 <__aeabi_fsub+0x200>
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01b      	beq.n	8000f56 <__aeabi_fsub+0x28e>
 8000f1e:	291b      	cmp	r1, #27
 8000f20:	dd2c      	ble.n	8000f7c <__aeabi_fsub+0x2b4>
 8000f22:	0002      	movs	r2, r0
 8000f24:	1c73      	adds	r3, r6, #1
 8000f26:	e73a      	b.n	8000d9e <__aeabi_fsub+0xd6>
 8000f28:	2aff      	cmp	r2, #255	@ 0xff
 8000f2a:	d088      	beq.n	8000e3e <__aeabi_fsub+0x176>
 8000f2c:	199b      	adds	r3, r3, r6
 8000f2e:	085b      	lsrs	r3, r3, #1
 8000f30:	0759      	lsls	r1, r3, #29
 8000f32:	d000      	beq.n	8000f36 <__aeabi_fsub+0x26e>
 8000f34:	e733      	b.n	8000d9e <__aeabi_fsub+0xd6>
 8000f36:	08db      	lsrs	r3, r3, #3
 8000f38:	e76e      	b.n	8000e18 <__aeabi_fsub+0x150>
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d110      	bne.n	8000f60 <__aeabi_fsub+0x298>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d043      	beq.n	8000fca <__aeabi_fsub+0x302>
 8000f42:	2401      	movs	r4, #1
 8000f44:	0033      	movs	r3, r6
 8000f46:	400c      	ands	r4, r1
 8000f48:	e706      	b.n	8000d58 <__aeabi_fsub+0x90>
 8000f4a:	2401      	movs	r4, #1
 8000f4c:	1af7      	subs	r7, r6, r3
 8000f4e:	400c      	ands	r4, r1
 8000f50:	e784      	b.n	8000e5c <__aeabi_fsub+0x194>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d104      	bne.n	8000f60 <__aeabi_fsub+0x298>
 8000f56:	0033      	movs	r3, r6
 8000f58:	e6fe      	b.n	8000d58 <__aeabi_fsub+0x90>
 8000f5a:	2501      	movs	r5, #1
 8000f5c:	1b9b      	subs	r3, r3, r6
 8000f5e:	e718      	b.n	8000d92 <__aeabi_fsub+0xca>
 8000f60:	2e00      	cmp	r6, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fsub+0x29e>
 8000f64:	e6f8      	b.n	8000d58 <__aeabi_fsub+0x90>
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	03d2      	lsls	r2, r2, #15
 8000f6a:	4297      	cmp	r7, r2
 8000f6c:	d304      	bcc.n	8000f78 <__aeabi_fsub+0x2b0>
 8000f6e:	4594      	cmp	ip, r2
 8000f70:	d202      	bcs.n	8000f78 <__aeabi_fsub+0x2b0>
 8000f72:	2401      	movs	r4, #1
 8000f74:	0033      	movs	r3, r6
 8000f76:	400c      	ands	r4, r1
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	e6f1      	b.n	8000d60 <__aeabi_fsub+0x98>
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2520      	movs	r5, #32
 8000f80:	40ca      	lsrs	r2, r1
 8000f82:	1a69      	subs	r1, r5, r1
 8000f84:	408b      	lsls	r3, r1
 8000f86:	1e59      	subs	r1, r3, #1
 8000f88:	418b      	sbcs	r3, r1
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	0005      	movs	r5, r0
 8000f8e:	199b      	adds	r3, r3, r6
 8000f90:	e750      	b.n	8000e34 <__aeabi_fsub+0x16c>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d094      	beq.n	8000ec0 <__aeabi_fsub+0x1f8>
 8000f96:	2401      	movs	r4, #1
 8000f98:	0033      	movs	r3, r6
 8000f9a:	400c      	ands	r4, r1
 8000f9c:	e73a      	b.n	8000e14 <__aeabi_fsub+0x14c>
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	1af3      	subs	r3, r6, r3
 8000fa4:	e6f5      	b.n	8000d92 <__aeabi_fsub+0xca>
 8000fa6:	0033      	movs	r3, r6
 8000fa8:	e734      	b.n	8000e14 <__aeabi_fsub+0x14c>
 8000faa:	199b      	adds	r3, r3, r6
 8000fac:	2200      	movs	r2, #0
 8000fae:	0159      	lsls	r1, r3, #5
 8000fb0:	d5c1      	bpl.n	8000f36 <__aeabi_fsub+0x26e>
 8000fb2:	4a15      	ldr	r2, [pc, #84]	@ (8001008 <__aeabi_fsub+0x340>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	08db      	lsrs	r3, r3, #3
 8000fb8:	2201      	movs	r2, #1
 8000fba:	e72d      	b.n	8000e18 <__aeabi_fsub+0x150>
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x2fa>
 8000fc0:	e77e      	b.n	8000ec0 <__aeabi_fsub+0x1f8>
 8000fc2:	0013      	movs	r3, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	08db      	lsrs	r3, r3, #3
 8000fc8:	e726      	b.n	8000e18 <__aeabi_fsub+0x150>
 8000fca:	2380      	movs	r3, #128	@ 0x80
 8000fcc:	2400      	movs	r4, #0
 8000fce:	20ff      	movs	r0, #255	@ 0xff
 8000fd0:	03db      	lsls	r3, r3, #15
 8000fd2:	e6f1      	b.n	8000db8 <__aeabi_fsub+0xf0>
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_fsub+0x312>
 8000fd8:	e756      	b.n	8000e88 <__aeabi_fsub+0x1c0>
 8000fda:	1b47      	subs	r7, r0, r5
 8000fdc:	003a      	movs	r2, r7
 8000fde:	2d00      	cmp	r5, #0
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_fsub+0x31c>
 8000fe2:	e730      	b.n	8000e46 <__aeabi_fsub+0x17e>
 8000fe4:	2280      	movs	r2, #128	@ 0x80
 8000fe6:	04d2      	lsls	r2, r2, #19
 8000fe8:	000c      	movs	r4, r1
 8000fea:	4313      	orrs	r3, r2
 8000fec:	e77f      	b.n	8000eee <__aeabi_fsub+0x226>
 8000fee:	2a00      	cmp	r2, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x32c>
 8000ff2:	e701      	b.n	8000df8 <__aeabi_fsub+0x130>
 8000ff4:	1b41      	subs	r1, r0, r5
 8000ff6:	2d00      	cmp	r5, #0
 8000ff8:	d101      	bne.n	8000ffe <__aeabi_fsub+0x336>
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	e788      	b.n	8000f10 <__aeabi_fsub+0x248>
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	04d2      	lsls	r2, r2, #19
 8001002:	4313      	orrs	r3, r2
 8001004:	e78b      	b.n	8000f1e <__aeabi_fsub+0x256>
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	fbffffff 	.word	0xfbffffff
 800100c:	7dffffff 	.word	0x7dffffff

08001010 <__aeabi_f2iz>:
 8001010:	0241      	lsls	r1, r0, #9
 8001012:	0042      	lsls	r2, r0, #1
 8001014:	0fc3      	lsrs	r3, r0, #31
 8001016:	0a49      	lsrs	r1, r1, #9
 8001018:	2000      	movs	r0, #0
 800101a:	0e12      	lsrs	r2, r2, #24
 800101c:	2a7e      	cmp	r2, #126	@ 0x7e
 800101e:	dd03      	ble.n	8001028 <__aeabi_f2iz+0x18>
 8001020:	2a9d      	cmp	r2, #157	@ 0x9d
 8001022:	dd02      	ble.n	800102a <__aeabi_f2iz+0x1a>
 8001024:	4a09      	ldr	r2, [pc, #36]	@ (800104c <__aeabi_f2iz+0x3c>)
 8001026:	1898      	adds	r0, r3, r2
 8001028:	4770      	bx	lr
 800102a:	2080      	movs	r0, #128	@ 0x80
 800102c:	0400      	lsls	r0, r0, #16
 800102e:	4301      	orrs	r1, r0
 8001030:	2a95      	cmp	r2, #149	@ 0x95
 8001032:	dc07      	bgt.n	8001044 <__aeabi_f2iz+0x34>
 8001034:	2096      	movs	r0, #150	@ 0x96
 8001036:	1a82      	subs	r2, r0, r2
 8001038:	40d1      	lsrs	r1, r2
 800103a:	4248      	negs	r0, r1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f3      	bne.n	8001028 <__aeabi_f2iz+0x18>
 8001040:	0008      	movs	r0, r1
 8001042:	e7f1      	b.n	8001028 <__aeabi_f2iz+0x18>
 8001044:	3a96      	subs	r2, #150	@ 0x96
 8001046:	4091      	lsls	r1, r2
 8001048:	e7f7      	b.n	800103a <__aeabi_f2iz+0x2a>
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	7fffffff 	.word	0x7fffffff

08001050 <__aeabi_i2f>:
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	2800      	cmp	r0, #0
 8001054:	d013      	beq.n	800107e <__aeabi_i2f+0x2e>
 8001056:	17c3      	asrs	r3, r0, #31
 8001058:	18c5      	adds	r5, r0, r3
 800105a:	405d      	eors	r5, r3
 800105c:	0fc4      	lsrs	r4, r0, #31
 800105e:	0028      	movs	r0, r5
 8001060:	f000 f8be 	bl	80011e0 <__clzsi2>
 8001064:	239e      	movs	r3, #158	@ 0x9e
 8001066:	0001      	movs	r1, r0
 8001068:	1a1b      	subs	r3, r3, r0
 800106a:	2b96      	cmp	r3, #150	@ 0x96
 800106c:	dc0f      	bgt.n	800108e <__aeabi_i2f+0x3e>
 800106e:	2808      	cmp	r0, #8
 8001070:	d034      	beq.n	80010dc <__aeabi_i2f+0x8c>
 8001072:	3908      	subs	r1, #8
 8001074:	408d      	lsls	r5, r1
 8001076:	026d      	lsls	r5, r5, #9
 8001078:	0a6d      	lsrs	r5, r5, #9
 800107a:	b2d8      	uxtb	r0, r3
 800107c:	e002      	b.n	8001084 <__aeabi_i2f+0x34>
 800107e:	2400      	movs	r4, #0
 8001080:	2000      	movs	r0, #0
 8001082:	2500      	movs	r5, #0
 8001084:	05c0      	lsls	r0, r0, #23
 8001086:	4328      	orrs	r0, r5
 8001088:	07e4      	lsls	r4, r4, #31
 800108a:	4320      	orrs	r0, r4
 800108c:	bd70      	pop	{r4, r5, r6, pc}
 800108e:	2b99      	cmp	r3, #153	@ 0x99
 8001090:	dc16      	bgt.n	80010c0 <__aeabi_i2f+0x70>
 8001092:	1f42      	subs	r2, r0, #5
 8001094:	2805      	cmp	r0, #5
 8001096:	d000      	beq.n	800109a <__aeabi_i2f+0x4a>
 8001098:	4095      	lsls	r5, r2
 800109a:	002a      	movs	r2, r5
 800109c:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <__aeabi_i2f+0x94>)
 800109e:	4002      	ands	r2, r0
 80010a0:	076e      	lsls	r6, r5, #29
 80010a2:	d009      	beq.n	80010b8 <__aeabi_i2f+0x68>
 80010a4:	260f      	movs	r6, #15
 80010a6:	4035      	ands	r5, r6
 80010a8:	2d04      	cmp	r5, #4
 80010aa:	d005      	beq.n	80010b8 <__aeabi_i2f+0x68>
 80010ac:	3204      	adds	r2, #4
 80010ae:	0155      	lsls	r5, r2, #5
 80010b0:	d502      	bpl.n	80010b8 <__aeabi_i2f+0x68>
 80010b2:	239f      	movs	r3, #159	@ 0x9f
 80010b4:	4002      	ands	r2, r0
 80010b6:	1a5b      	subs	r3, r3, r1
 80010b8:	0192      	lsls	r2, r2, #6
 80010ba:	0a55      	lsrs	r5, r2, #9
 80010bc:	b2d8      	uxtb	r0, r3
 80010be:	e7e1      	b.n	8001084 <__aeabi_i2f+0x34>
 80010c0:	2205      	movs	r2, #5
 80010c2:	1a12      	subs	r2, r2, r0
 80010c4:	0028      	movs	r0, r5
 80010c6:	40d0      	lsrs	r0, r2
 80010c8:	0002      	movs	r2, r0
 80010ca:	0008      	movs	r0, r1
 80010cc:	301b      	adds	r0, #27
 80010ce:	4085      	lsls	r5, r0
 80010d0:	0028      	movs	r0, r5
 80010d2:	1e45      	subs	r5, r0, #1
 80010d4:	41a8      	sbcs	r0, r5
 80010d6:	4302      	orrs	r2, r0
 80010d8:	0015      	movs	r5, r2
 80010da:	e7de      	b.n	800109a <__aeabi_i2f+0x4a>
 80010dc:	026d      	lsls	r5, r5, #9
 80010de:	2096      	movs	r0, #150	@ 0x96
 80010e0:	0a6d      	lsrs	r5, r5, #9
 80010e2:	e7cf      	b.n	8001084 <__aeabi_i2f+0x34>
 80010e4:	fbffffff 	.word	0xfbffffff

080010e8 <__aeabi_ui2f>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	1e04      	subs	r4, r0, #0
 80010ec:	d00e      	beq.n	800110c <__aeabi_ui2f+0x24>
 80010ee:	f000 f877 	bl	80011e0 <__clzsi2>
 80010f2:	239e      	movs	r3, #158	@ 0x9e
 80010f4:	0001      	movs	r1, r0
 80010f6:	1a1b      	subs	r3, r3, r0
 80010f8:	2b96      	cmp	r3, #150	@ 0x96
 80010fa:	dc0c      	bgt.n	8001116 <__aeabi_ui2f+0x2e>
 80010fc:	2808      	cmp	r0, #8
 80010fe:	d02f      	beq.n	8001160 <__aeabi_ui2f+0x78>
 8001100:	3908      	subs	r1, #8
 8001102:	408c      	lsls	r4, r1
 8001104:	0264      	lsls	r4, r4, #9
 8001106:	0a64      	lsrs	r4, r4, #9
 8001108:	b2d8      	uxtb	r0, r3
 800110a:	e001      	b.n	8001110 <__aeabi_ui2f+0x28>
 800110c:	2000      	movs	r0, #0
 800110e:	2400      	movs	r4, #0
 8001110:	05c0      	lsls	r0, r0, #23
 8001112:	4320      	orrs	r0, r4
 8001114:	bd70      	pop	{r4, r5, r6, pc}
 8001116:	2b99      	cmp	r3, #153	@ 0x99
 8001118:	dc16      	bgt.n	8001148 <__aeabi_ui2f+0x60>
 800111a:	1f42      	subs	r2, r0, #5
 800111c:	2805      	cmp	r0, #5
 800111e:	d000      	beq.n	8001122 <__aeabi_ui2f+0x3a>
 8001120:	4094      	lsls	r4, r2
 8001122:	0022      	movs	r2, r4
 8001124:	4810      	ldr	r0, [pc, #64]	@ (8001168 <__aeabi_ui2f+0x80>)
 8001126:	4002      	ands	r2, r0
 8001128:	0765      	lsls	r5, r4, #29
 800112a:	d009      	beq.n	8001140 <__aeabi_ui2f+0x58>
 800112c:	250f      	movs	r5, #15
 800112e:	402c      	ands	r4, r5
 8001130:	2c04      	cmp	r4, #4
 8001132:	d005      	beq.n	8001140 <__aeabi_ui2f+0x58>
 8001134:	3204      	adds	r2, #4
 8001136:	0154      	lsls	r4, r2, #5
 8001138:	d502      	bpl.n	8001140 <__aeabi_ui2f+0x58>
 800113a:	239f      	movs	r3, #159	@ 0x9f
 800113c:	4002      	ands	r2, r0
 800113e:	1a5b      	subs	r3, r3, r1
 8001140:	0192      	lsls	r2, r2, #6
 8001142:	0a54      	lsrs	r4, r2, #9
 8001144:	b2d8      	uxtb	r0, r3
 8001146:	e7e3      	b.n	8001110 <__aeabi_ui2f+0x28>
 8001148:	0002      	movs	r2, r0
 800114a:	0020      	movs	r0, r4
 800114c:	321b      	adds	r2, #27
 800114e:	4090      	lsls	r0, r2
 8001150:	0002      	movs	r2, r0
 8001152:	1e50      	subs	r0, r2, #1
 8001154:	4182      	sbcs	r2, r0
 8001156:	2005      	movs	r0, #5
 8001158:	1a40      	subs	r0, r0, r1
 800115a:	40c4      	lsrs	r4, r0
 800115c:	4314      	orrs	r4, r2
 800115e:	e7e0      	b.n	8001122 <__aeabi_ui2f+0x3a>
 8001160:	0264      	lsls	r4, r4, #9
 8001162:	2096      	movs	r0, #150	@ 0x96
 8001164:	0a64      	lsrs	r4, r4, #9
 8001166:	e7d3      	b.n	8001110 <__aeabi_ui2f+0x28>
 8001168:	fbffffff 	.word	0xfbffffff

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	0008      	movs	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001176:	f000 f8d5 	bl	8001324 <__lesf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	d401      	bmi.n	8001182 <__aeabi_cfcmpeq+0xe>
 800117e:	2100      	movs	r1, #0
 8001180:	42c8      	cmn	r0, r1
 8001182:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	b510      	push	{r4, lr}
 8001186:	f000 f855 	bl	8001234 <__eqsf2>
 800118a:	4240      	negs	r0, r0
 800118c:	3001      	adds	r0, #1
 800118e:	bd10      	pop	{r4, pc}

08001190 <__aeabi_fcmplt>:
 8001190:	b510      	push	{r4, lr}
 8001192:	f000 f8c7 	bl	8001324 <__lesf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	db01      	blt.n	800119e <__aeabi_fcmplt+0xe>
 800119a:	2000      	movs	r0, #0
 800119c:	bd10      	pop	{r4, pc}
 800119e:	2001      	movs	r0, #1
 80011a0:	bd10      	pop	{r4, pc}
 80011a2:	46c0      	nop			@ (mov r8, r8)

080011a4 <__aeabi_fcmple>:
 80011a4:	b510      	push	{r4, lr}
 80011a6:	f000 f8bd 	bl	8001324 <__lesf2>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	dd01      	ble.n	80011b2 <__aeabi_fcmple+0xe>
 80011ae:	2000      	movs	r0, #0
 80011b0:	bd10      	pop	{r4, pc}
 80011b2:	2001      	movs	r0, #1
 80011b4:	bd10      	pop	{r4, pc}
 80011b6:	46c0      	nop			@ (mov r8, r8)

080011b8 <__aeabi_fcmpgt>:
 80011b8:	b510      	push	{r4, lr}
 80011ba:	f000 f863 	bl	8001284 <__gesf2>
 80011be:	2800      	cmp	r0, #0
 80011c0:	dc01      	bgt.n	80011c6 <__aeabi_fcmpgt+0xe>
 80011c2:	2000      	movs	r0, #0
 80011c4:	bd10      	pop	{r4, pc}
 80011c6:	2001      	movs	r0, #1
 80011c8:	bd10      	pop	{r4, pc}
 80011ca:	46c0      	nop			@ (mov r8, r8)

080011cc <__aeabi_fcmpge>:
 80011cc:	b510      	push	{r4, lr}
 80011ce:	f000 f859 	bl	8001284 <__gesf2>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	da01      	bge.n	80011da <__aeabi_fcmpge+0xe>
 80011d6:	2000      	movs	r0, #0
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	2001      	movs	r0, #1
 80011dc:	bd10      	pop	{r4, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)

080011e0 <__clzsi2>:
 80011e0:	211c      	movs	r1, #28
 80011e2:	2301      	movs	r3, #1
 80011e4:	041b      	lsls	r3, r3, #16
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d301      	bcc.n	80011ee <__clzsi2+0xe>
 80011ea:	0c00      	lsrs	r0, r0, #16
 80011ec:	3910      	subs	r1, #16
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	4298      	cmp	r0, r3
 80011f2:	d301      	bcc.n	80011f8 <__clzsi2+0x18>
 80011f4:	0a00      	lsrs	r0, r0, #8
 80011f6:	3908      	subs	r1, #8
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d301      	bcc.n	8001202 <__clzsi2+0x22>
 80011fe:	0900      	lsrs	r0, r0, #4
 8001200:	3904      	subs	r1, #4
 8001202:	a202      	add	r2, pc, #8	@ (adr r2, 800120c <__clzsi2+0x2c>)
 8001204:	5c10      	ldrb	r0, [r2, r0]
 8001206:	1840      	adds	r0, r0, r1
 8001208:	4770      	bx	lr
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	02020304 	.word	0x02020304
 8001210:	01010101 	.word	0x01010101
	...

0800121c <__clzdi2>:
 800121c:	b510      	push	{r4, lr}
 800121e:	2900      	cmp	r1, #0
 8001220:	d103      	bne.n	800122a <__clzdi2+0xe>
 8001222:	f7ff ffdd 	bl	80011e0 <__clzsi2>
 8001226:	3020      	adds	r0, #32
 8001228:	e002      	b.n	8001230 <__clzdi2+0x14>
 800122a:	0008      	movs	r0, r1
 800122c:	f7ff ffd8 	bl	80011e0 <__clzsi2>
 8001230:	bd10      	pop	{r4, pc}
 8001232:	46c0      	nop			@ (mov r8, r8)

08001234 <__eqsf2>:
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	0042      	lsls	r2, r0, #1
 8001238:	024e      	lsls	r6, r1, #9
 800123a:	004c      	lsls	r4, r1, #1
 800123c:	0245      	lsls	r5, r0, #9
 800123e:	0a6d      	lsrs	r5, r5, #9
 8001240:	0e12      	lsrs	r2, r2, #24
 8001242:	0fc3      	lsrs	r3, r0, #31
 8001244:	0a76      	lsrs	r6, r6, #9
 8001246:	0e24      	lsrs	r4, r4, #24
 8001248:	0fc9      	lsrs	r1, r1, #31
 800124a:	2aff      	cmp	r2, #255	@ 0xff
 800124c:	d010      	beq.n	8001270 <__eqsf2+0x3c>
 800124e:	2cff      	cmp	r4, #255	@ 0xff
 8001250:	d00c      	beq.n	800126c <__eqsf2+0x38>
 8001252:	2001      	movs	r0, #1
 8001254:	42a2      	cmp	r2, r4
 8001256:	d10a      	bne.n	800126e <__eqsf2+0x3a>
 8001258:	42b5      	cmp	r5, r6
 800125a:	d108      	bne.n	800126e <__eqsf2+0x3a>
 800125c:	428b      	cmp	r3, r1
 800125e:	d00f      	beq.n	8001280 <__eqsf2+0x4c>
 8001260:	2a00      	cmp	r2, #0
 8001262:	d104      	bne.n	800126e <__eqsf2+0x3a>
 8001264:	0028      	movs	r0, r5
 8001266:	1e43      	subs	r3, r0, #1
 8001268:	4198      	sbcs	r0, r3
 800126a:	e000      	b.n	800126e <__eqsf2+0x3a>
 800126c:	2001      	movs	r0, #1
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	2001      	movs	r0, #1
 8001272:	2cff      	cmp	r4, #255	@ 0xff
 8001274:	d1fb      	bne.n	800126e <__eqsf2+0x3a>
 8001276:	4335      	orrs	r5, r6
 8001278:	d1f9      	bne.n	800126e <__eqsf2+0x3a>
 800127a:	404b      	eors	r3, r1
 800127c:	0018      	movs	r0, r3
 800127e:	e7f6      	b.n	800126e <__eqsf2+0x3a>
 8001280:	2000      	movs	r0, #0
 8001282:	e7f4      	b.n	800126e <__eqsf2+0x3a>

08001284 <__gesf2>:
 8001284:	b530      	push	{r4, r5, lr}
 8001286:	0042      	lsls	r2, r0, #1
 8001288:	0244      	lsls	r4, r0, #9
 800128a:	024d      	lsls	r5, r1, #9
 800128c:	0fc3      	lsrs	r3, r0, #31
 800128e:	0048      	lsls	r0, r1, #1
 8001290:	0a64      	lsrs	r4, r4, #9
 8001292:	0e12      	lsrs	r2, r2, #24
 8001294:	0a6d      	lsrs	r5, r5, #9
 8001296:	0e00      	lsrs	r0, r0, #24
 8001298:	0fc9      	lsrs	r1, r1, #31
 800129a:	2aff      	cmp	r2, #255	@ 0xff
 800129c:	d019      	beq.n	80012d2 <__gesf2+0x4e>
 800129e:	28ff      	cmp	r0, #255	@ 0xff
 80012a0:	d00b      	beq.n	80012ba <__gesf2+0x36>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d11e      	bne.n	80012e4 <__gesf2+0x60>
 80012a6:	2800      	cmp	r0, #0
 80012a8:	d10b      	bne.n	80012c2 <__gesf2+0x3e>
 80012aa:	2d00      	cmp	r5, #0
 80012ac:	d027      	beq.n	80012fe <__gesf2+0x7a>
 80012ae:	2c00      	cmp	r4, #0
 80012b0:	d134      	bne.n	800131c <__gesf2+0x98>
 80012b2:	2900      	cmp	r1, #0
 80012b4:	d02f      	beq.n	8001316 <__gesf2+0x92>
 80012b6:	0008      	movs	r0, r1
 80012b8:	bd30      	pop	{r4, r5, pc}
 80012ba:	2d00      	cmp	r5, #0
 80012bc:	d128      	bne.n	8001310 <__gesf2+0x8c>
 80012be:	2a00      	cmp	r2, #0
 80012c0:	d101      	bne.n	80012c6 <__gesf2+0x42>
 80012c2:	2c00      	cmp	r4, #0
 80012c4:	d0f5      	beq.n	80012b2 <__gesf2+0x2e>
 80012c6:	428b      	cmp	r3, r1
 80012c8:	d107      	bne.n	80012da <__gesf2+0x56>
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d023      	beq.n	8001316 <__gesf2+0x92>
 80012ce:	0018      	movs	r0, r3
 80012d0:	e7f2      	b.n	80012b8 <__gesf2+0x34>
 80012d2:	2c00      	cmp	r4, #0
 80012d4:	d11c      	bne.n	8001310 <__gesf2+0x8c>
 80012d6:	28ff      	cmp	r0, #255	@ 0xff
 80012d8:	d014      	beq.n	8001304 <__gesf2+0x80>
 80012da:	1e58      	subs	r0, r3, #1
 80012dc:	2302      	movs	r3, #2
 80012de:	4018      	ands	r0, r3
 80012e0:	3801      	subs	r0, #1
 80012e2:	e7e9      	b.n	80012b8 <__gesf2+0x34>
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d0f8      	beq.n	80012da <__gesf2+0x56>
 80012e8:	428b      	cmp	r3, r1
 80012ea:	d1f6      	bne.n	80012da <__gesf2+0x56>
 80012ec:	4282      	cmp	r2, r0
 80012ee:	dcf4      	bgt.n	80012da <__gesf2+0x56>
 80012f0:	dbeb      	blt.n	80012ca <__gesf2+0x46>
 80012f2:	42ac      	cmp	r4, r5
 80012f4:	d8f1      	bhi.n	80012da <__gesf2+0x56>
 80012f6:	2000      	movs	r0, #0
 80012f8:	42ac      	cmp	r4, r5
 80012fa:	d2dd      	bcs.n	80012b8 <__gesf2+0x34>
 80012fc:	e7e5      	b.n	80012ca <__gesf2+0x46>
 80012fe:	2c00      	cmp	r4, #0
 8001300:	d0da      	beq.n	80012b8 <__gesf2+0x34>
 8001302:	e7ea      	b.n	80012da <__gesf2+0x56>
 8001304:	2d00      	cmp	r5, #0
 8001306:	d103      	bne.n	8001310 <__gesf2+0x8c>
 8001308:	428b      	cmp	r3, r1
 800130a:	d1e6      	bne.n	80012da <__gesf2+0x56>
 800130c:	2000      	movs	r0, #0
 800130e:	e7d3      	b.n	80012b8 <__gesf2+0x34>
 8001310:	2002      	movs	r0, #2
 8001312:	4240      	negs	r0, r0
 8001314:	e7d0      	b.n	80012b8 <__gesf2+0x34>
 8001316:	2001      	movs	r0, #1
 8001318:	4240      	negs	r0, r0
 800131a:	e7cd      	b.n	80012b8 <__gesf2+0x34>
 800131c:	428b      	cmp	r3, r1
 800131e:	d0e8      	beq.n	80012f2 <__gesf2+0x6e>
 8001320:	e7db      	b.n	80012da <__gesf2+0x56>
 8001322:	46c0      	nop			@ (mov r8, r8)

08001324 <__lesf2>:
 8001324:	b530      	push	{r4, r5, lr}
 8001326:	0042      	lsls	r2, r0, #1
 8001328:	0244      	lsls	r4, r0, #9
 800132a:	024d      	lsls	r5, r1, #9
 800132c:	0fc3      	lsrs	r3, r0, #31
 800132e:	0048      	lsls	r0, r1, #1
 8001330:	0a64      	lsrs	r4, r4, #9
 8001332:	0e12      	lsrs	r2, r2, #24
 8001334:	0a6d      	lsrs	r5, r5, #9
 8001336:	0e00      	lsrs	r0, r0, #24
 8001338:	0fc9      	lsrs	r1, r1, #31
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d01a      	beq.n	8001374 <__lesf2+0x50>
 800133e:	28ff      	cmp	r0, #255	@ 0xff
 8001340:	d00e      	beq.n	8001360 <__lesf2+0x3c>
 8001342:	2a00      	cmp	r2, #0
 8001344:	d11e      	bne.n	8001384 <__lesf2+0x60>
 8001346:	2800      	cmp	r0, #0
 8001348:	d10e      	bne.n	8001368 <__lesf2+0x44>
 800134a:	2d00      	cmp	r5, #0
 800134c:	d02a      	beq.n	80013a4 <__lesf2+0x80>
 800134e:	2c00      	cmp	r4, #0
 8001350:	d00c      	beq.n	800136c <__lesf2+0x48>
 8001352:	428b      	cmp	r3, r1
 8001354:	d01d      	beq.n	8001392 <__lesf2+0x6e>
 8001356:	1e58      	subs	r0, r3, #1
 8001358:	2302      	movs	r3, #2
 800135a:	4018      	ands	r0, r3
 800135c:	3801      	subs	r0, #1
 800135e:	e010      	b.n	8001382 <__lesf2+0x5e>
 8001360:	2d00      	cmp	r5, #0
 8001362:	d10d      	bne.n	8001380 <__lesf2+0x5c>
 8001364:	2a00      	cmp	r2, #0
 8001366:	d120      	bne.n	80013aa <__lesf2+0x86>
 8001368:	2c00      	cmp	r4, #0
 800136a:	d11e      	bne.n	80013aa <__lesf2+0x86>
 800136c:	2900      	cmp	r1, #0
 800136e:	d023      	beq.n	80013b8 <__lesf2+0x94>
 8001370:	0008      	movs	r0, r1
 8001372:	e006      	b.n	8001382 <__lesf2+0x5e>
 8001374:	2c00      	cmp	r4, #0
 8001376:	d103      	bne.n	8001380 <__lesf2+0x5c>
 8001378:	28ff      	cmp	r0, #255	@ 0xff
 800137a:	d1ec      	bne.n	8001356 <__lesf2+0x32>
 800137c:	2d00      	cmp	r5, #0
 800137e:	d017      	beq.n	80013b0 <__lesf2+0x8c>
 8001380:	2002      	movs	r0, #2
 8001382:	bd30      	pop	{r4, r5, pc}
 8001384:	2800      	cmp	r0, #0
 8001386:	d0e6      	beq.n	8001356 <__lesf2+0x32>
 8001388:	428b      	cmp	r3, r1
 800138a:	d1e4      	bne.n	8001356 <__lesf2+0x32>
 800138c:	4282      	cmp	r2, r0
 800138e:	dce2      	bgt.n	8001356 <__lesf2+0x32>
 8001390:	db04      	blt.n	800139c <__lesf2+0x78>
 8001392:	42ac      	cmp	r4, r5
 8001394:	d8df      	bhi.n	8001356 <__lesf2+0x32>
 8001396:	2000      	movs	r0, #0
 8001398:	42ac      	cmp	r4, r5
 800139a:	d2f2      	bcs.n	8001382 <__lesf2+0x5e>
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <__lesf2+0x94>
 80013a0:	0018      	movs	r0, r3
 80013a2:	e7ee      	b.n	8001382 <__lesf2+0x5e>
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d0ec      	beq.n	8001382 <__lesf2+0x5e>
 80013a8:	e7d5      	b.n	8001356 <__lesf2+0x32>
 80013aa:	428b      	cmp	r3, r1
 80013ac:	d1d3      	bne.n	8001356 <__lesf2+0x32>
 80013ae:	e7f5      	b.n	800139c <__lesf2+0x78>
 80013b0:	2000      	movs	r0, #0
 80013b2:	428b      	cmp	r3, r1
 80013b4:	d0e5      	beq.n	8001382 <__lesf2+0x5e>
 80013b6:	e7ce      	b.n	8001356 <__lesf2+0x32>
 80013b8:	2001      	movs	r0, #1
 80013ba:	4240      	negs	r0, r0
 80013bc:	e7e1      	b.n	8001382 <__lesf2+0x5e>
 80013be:	46c0      	nop			@ (mov r8, r8)

080013c0 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80013d0:	d901      	bls.n	80013d6 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80013d2:	237f      	movs	r3, #127	@ 0x7f
 80013d4:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80013d6:	2017      	movs	r0, #23
 80013d8:	183b      	adds	r3, r7, r0
 80013da:	490d      	ldr	r1, [pc, #52]	@ (8001410 <accessLUT10log10+0x50>)
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	188a      	adds	r2, r1, r2
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80013e4:	0001      	movs	r1, r0
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2206      	movs	r2, #6
 80013ec:	4113      	asrs	r3, r2
 80013ee:	001a      	movs	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2106      	movs	r1, #6
 80013fe:	408b      	lsls	r3, r1
 8001400:	1ad2      	subs	r2, r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b006      	add	sp, #24
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	08007554 	.word	0x08007554

08001414 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b090      	sub	sp, #64	@ 0x40
 8001418:	af00      	add	r7, sp, #0
 800141a:	6138      	str	r0, [r7, #16]
 800141c:	6179      	str	r1, [r7, #20]
 800141e:	60fa      	str	r2, [r7, #12]
 8001420:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8001422:	2308      	movs	r3, #8
 8001424:	001a      	movs	r2, r3
 8001426:	3a20      	subs	r2, #32
 8001428:	2a00      	cmp	r2, #0
 800142a:	db03      	blt.n	8001434 <efficient10log10+0x20>
 800142c:	2101      	movs	r1, #1
 800142e:	4091      	lsls	r1, r2
 8001430:	000d      	movs	r5, r1
 8001432:	e008      	b.n	8001446 <efficient10log10+0x32>
 8001434:	2220      	movs	r2, #32
 8001436:	1ad2      	subs	r2, r2, r3
 8001438:	2101      	movs	r1, #1
 800143a:	40d1      	lsrs	r1, r2
 800143c:	000a      	movs	r2, r1
 800143e:	2100      	movs	r1, #0
 8001440:	4099      	lsls	r1, r3
 8001442:	000d      	movs	r5, r1
 8001444:	4315      	orrs	r5, r2
 8001446:	2201      	movs	r2, #1
 8001448:	409a      	lsls	r2, r3
 800144a:	0014      	movs	r4, r2
 800144c:	2201      	movs	r2, #1
 800144e:	4252      	negs	r2, r2
 8001450:	17d3      	asrs	r3, r2, #31
 8001452:	1912      	adds	r2, r2, r4
 8001454:	416b      	adcs	r3, r5
 8001456:	633a      	str	r2, [r7, #48]	@ 0x30
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800145a:	2336      	movs	r3, #54	@ 0x36
 800145c:	2208      	movs	r2, #8
 800145e:	189b      	adds	r3, r3, r2
 8001460:	19db      	adds	r3, r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8001466:	e017      	b.n	8001498 <efficient10log10+0x84>
    {
        P = P >> 1;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	07db      	lsls	r3, r3, #31
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	0852      	lsrs	r2, r2, #1
 8001470:	603a      	str	r2, [r7, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	431a      	orrs	r2, r3
 8001476:	603a      	str	r2, [r7, #0]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	687c      	ldr	r4, [r7, #4]
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	617c      	str	r4, [r7, #20]
        bShift++;
 8001486:	2136      	movs	r1, #54	@ 0x36
 8001488:	2008      	movs	r0, #8
 800148a:	180b      	adds	r3, r1, r0
 800148c:	19db      	adds	r3, r3, r7
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	180b      	adds	r3, r1, r0
 8001492:	19db      	adds	r3, r3, r7
 8001494:	3201      	adds	r2, #1
 8001496:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800149c:	429a      	cmp	r2, r3
 800149e:	d8e3      	bhi.n	8001468 <efficient10log10+0x54>
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d103      	bne.n	80014b0 <efficient10log10+0x9c>
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8db      	bhi.n	8001468 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	2308      	movs	r3, #8
 80014b4:	3b01      	subs	r3, #1
 80014b6:	2101      	movs	r1, #1
 80014b8:	4099      	lsls	r1, r3
 80014ba:	000b      	movs	r3, r1
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80014c8:	231c      	movs	r3, #28
 80014ca:	2408      	movs	r4, #8
 80014cc:	191b      	adds	r3, r3, r4
 80014ce:	19da      	adds	r2, r3, r7
 80014d0:	2320      	movs	r3, #32
 80014d2:	191b      	adds	r3, r3, r4
 80014d4:	19d9      	adds	r1, r3, r7
 80014d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff ff71 	bl	80013c0 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80014de:	2215      	movs	r2, #21
 80014e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e2:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80014e4:	2036      	movs	r0, #54	@ 0x36
 80014e6:	1902      	adds	r2, r0, r4
 80014e8:	19d2      	adds	r2, r2, r7
 80014ea:	8812      	ldrh	r2, [r2, #0]
 80014ec:	2103      	movs	r1, #3
 80014ee:	434a      	muls	r2, r1
 80014f0:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80014f2:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 80014f4:	0021      	movs	r1, r4
 80014f6:	1843      	adds	r3, r0, r1
 80014f8:	19db      	adds	r3, r3, r7
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4353      	muls	r3, r2
 8001500:	2203      	movs	r2, #3
 8001502:	4113      	asrs	r3, r2
 8001504:	001a      	movs	r2, r3
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800150a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800150c:	2314      	movs	r3, #20
 800150e:	185b      	adds	r3, r3, r1
 8001510:	19da      	adds	r2, r3, r7
 8001512:	2318      	movs	r3, #24
 8001514:	185b      	adds	r3, r3, r1
 8001516:	19db      	adds	r3, r3, r7
 8001518:	0011      	movs	r1, r2
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f80a 	bl	8001534 <correctIntFracNumber>
    integerPart[0] = intPart;
 8001520:	6a3a      	ldr	r2, [r7, #32]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b010      	add	sp, #64	@ 0x40
 8001532:	bdb0      	pop	{r4, r5, r7, pc}

08001534 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800153e:	e00a      	b.n	8001556 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3b0a      	subs	r3, #10
 8001550:	001a      	movs	r2, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b09      	cmp	r3, #9
 800155c:	dcf0      	bgt.n	8001540 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800155e:	e00a      	b.n	8001576 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	330a      	adds	r3, #10
 8001570:	001a      	movs	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3309      	adds	r3, #9
 800157c:	dbf0      	blt.n	8001560 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da0f      	bge.n	80015a6 <correctIntFracNumber+0x72>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd0b      	ble.n	80015a6 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3b0a      	subs	r3, #10
 800159e:	001a      	movs	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 80015a4:	e012      	b.n	80015cc <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dd0e      	ble.n	80015cc <correctIntFracNumber+0x98>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da0a      	bge.n	80015cc <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	1e5a      	subs	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	330a      	adds	r3, #10
 80015c6:	001a      	movs	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	46c0      	nop			@ (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <errorHandler>:

////////////////////////////////////////

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
    print("Error in %s at line %u in file: %s\n", func, line, file);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <errorHandler+0x1c>)
 80015e8:	f000 faa8 	bl	8001b3c <print>
    while (true)
 80015ec:	46c0      	nop			@ (mov r8, r8)
 80015ee:	e7fd      	b.n	80015ec <errorHandler+0x18>
 80015f0:	08007408 	.word	0x08007408

080015f4 <printString>:
    }
}

// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	000a      	movs	r2, r1
 80015fe:	1cbb      	adds	r3, r7, #2
 8001600:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8001602:	4c06      	ldr	r4, [pc, #24]	@ (800161c <printString+0x28>)
 8001604:	1cbb      	adds	r3, r7, #2
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <printString+0x2c>)
 800160c:	0023      	movs	r3, r4
 800160e:	f003 fcef 	bl	8004ff0 <HAL_UART_Transmit>
}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b003      	add	sp, #12
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	0000ffff 	.word	0x0000ffff
 8001620:	20000150 	.word	0x20000150

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162a:	f001 fbdf 	bl	8002dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162e:	f000 f87f 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001632:	f000 f9b7 	bl	80019a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001636:	f000 f961 	bl	80018fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  print("\r\nBuild on: %s at %s\r\n", __DATE__, __TIME__);
 800163a:	4a34      	ldr	r2, [pc, #208]	@ (800170c <main+0xe8>)
 800163c:	4934      	ldr	r1, [pc, #208]	@ (8001710 <main+0xec>)
 800163e:	4b35      	ldr	r3, [pc, #212]	@ (8001714 <main+0xf0>)
 8001640:	0018      	movs	r0, r3
 8001642:	f000 fa7b 	bl	8001b3c <print>
  if (!soundInit(MX_DMA_Init, MX_I2S2_Init, MX_TIM6_Init, DMA1_Channel4_5_6_7_IRQn))
 8001646:	4a34      	ldr	r2, [pc, #208]	@ (8001718 <main+0xf4>)
 8001648:	4934      	ldr	r1, [pc, #208]	@ (800171c <main+0xf8>)
 800164a:	4835      	ldr	r0, [pc, #212]	@ (8001720 <main+0xfc>)
 800164c:	230b      	movs	r3, #11
 800164e:	f000 fbab 	bl	8001da8 <soundInit>
 8001652:	0003      	movs	r3, r0
 8001654:	001a      	movs	r2, r3
 8001656:	2301      	movs	r3, #1
 8001658:	4053      	eors	r3, r2
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <main+0x48>
  {
    errorHandler(__func__, __LINE__, __FILE__);
 8001660:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <main+0x100>)
 8001662:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <main+0x104>)
 8001664:	2167      	movs	r1, #103	@ 0x67
 8001666:	0018      	movs	r0, r3
 8001668:	f7ff ffb4 	bl	80015d4 <errorHandler>
  }

  if (!enableMicrophone(true))
 800166c:	2001      	movs	r0, #1
 800166e:	f000 fc17 	bl	8001ea0 <enableMicrophone>
 8001672:	0003      	movs	r3, r0
 8001674:	001a      	movs	r2, r3
 8001676:	2301      	movs	r3, #1
 8001678:	4053      	eors	r3, r2
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <main+0x68>
  {
    errorHandler(__func__, __LINE__, __FILE__);
 8001680:	4a28      	ldr	r2, [pc, #160]	@ (8001724 <main+0x100>)
 8001682:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <main+0x104>)
 8001684:	216c      	movs	r1, #108	@ 0x6c
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff ffa4 	bl	80015d4 <errorHandler>
  }

  SoundData_t soundData = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	0018      	movs	r0, r3
 8001690:	2312      	movs	r3, #18
 8001692:	001a      	movs	r2, r3
 8001694:	2100      	movs	r1, #0
 8001696:	f005 fa09 	bl	8006aac <memset>
  if (!startSPLcalculation())
 800169a:	f000 fc69 	bl	8001f70 <startSPLcalculation>
 800169e:	0003      	movs	r3, r0
 80016a0:	001a      	movs	r2, r3
 80016a2:	2301      	movs	r3, #1
 80016a4:	4053      	eors	r3, r2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <main+0x94>
  {
    errorHandler(__func__, __LINE__, __FILE__);
 80016ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001724 <main+0x100>)
 80016ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <main+0x104>)
 80016b0:	2172      	movs	r1, #114	@ 0x72
 80016b2:	0018      	movs	r0, r3
 80016b4:	f7ff ff8e 	bl	80015d4 <errorHandler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (getSoundData(&soundData, true, true))
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2201      	movs	r2, #1
 80016bc:	2101      	movs	r1, #1
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 fa9a 	bl	8001bf8 <getSoundData>
 80016c4:	1e03      	subs	r3, r0, #0
 80016c6:	d0f7      	beq.n	80016b8 <main+0x94>
	              {
	                  clearMaximumAmplitude();
 80016c8:	f000 fbaa 	bl	8001e20 <clearMaximumAmplitude>
	                  print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r", soundData.SPL_dBA_int,
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	0019      	movs	r1, r3
	                        soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	785b      	ldrb	r3, [r3, #1]
	                  print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r", soundData.SPL_dBA_int,
 80016d6:	001a      	movs	r2, r3
	                        soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	89db      	ldrh	r3, [r3, #14]
	                  print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r", soundData.SPL_dBA_int,
 80016dc:	001c      	movs	r4, r3
	                        soundData.peak_amp_mPa_fr_2dp);
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	7c1b      	ldrb	r3, [r3, #16]
	                  print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r", soundData.SPL_dBA_int,
 80016e2:	4812      	ldr	r0, [pc, #72]	@ (800172c <main+0x108>)
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	0023      	movs	r3, r4
 80016e8:	f000 fa28 	bl	8001b3c <print>
	                  if (!startSPLcalculation())
 80016ec:	f000 fc40 	bl	8001f70 <startSPLcalculation>
 80016f0:	0003      	movs	r3, r0
 80016f2:	001a      	movs	r2, r3
 80016f4:	2301      	movs	r3, #1
 80016f6:	4053      	eors	r3, r2
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0dc      	beq.n	80016b8 <main+0x94>
	                  {
	                      errorHandler(__func__, __LINE__, __FILE__);
 80016fe:	4a09      	ldr	r2, [pc, #36]	@ (8001724 <main+0x100>)
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <main+0x104>)
 8001702:	2185      	movs	r1, #133	@ 0x85
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff ff65 	bl	80015d4 <errorHandler>
	  if (getSoundData(&soundData, true, true))
 800170a:	e7d5      	b.n	80016b8 <main+0x94>
 800170c:	0800742c 	.word	0x0800742c
 8001710:	08007438 	.word	0x08007438
 8001714:	08007444 	.word	0x08007444
 8001718:	08001875 	.word	0x08001875
 800171c:	08001815 	.word	0x08001815
 8001720:	08001969 	.word	0x08001969
 8001724:	0800745c 	.word	0x0800745c
 8001728:	080075d4 	.word	0x080075d4
 800172c:	08007470 	.word	0x08007470

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b09d      	sub	sp, #116	@ 0x74
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	2438      	movs	r4, #56	@ 0x38
 8001738:	193b      	adds	r3, r7, r4
 800173a:	0018      	movs	r0, r3
 800173c:	2338      	movs	r3, #56	@ 0x38
 800173e:	001a      	movs	r2, r3
 8001740:	2100      	movs	r1, #0
 8001742:	f005 f9b3 	bl	8006aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001746:	2324      	movs	r3, #36	@ 0x24
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	0018      	movs	r0, r3
 800174c:	2314      	movs	r3, #20
 800174e:	001a      	movs	r2, r3
 8001750:	2100      	movs	r1, #0
 8001752:	f005 f9ab 	bl	8006aac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001756:	003b      	movs	r3, r7
 8001758:	0018      	movs	r0, r3
 800175a:	2324      	movs	r3, #36	@ 0x24
 800175c:	001a      	movs	r2, r3
 800175e:	2100      	movs	r1, #0
 8001760:	f005 f9a4 	bl	8006aac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001764:	4b29      	ldr	r3, [pc, #164]	@ (800180c <SystemClock_Config+0xdc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a29      	ldr	r2, [pc, #164]	@ (8001810 <SystemClock_Config+0xe0>)
 800176a:	401a      	ands	r2, r3
 800176c:	4b27      	ldr	r3, [pc, #156]	@ (800180c <SystemClock_Config+0xdc>)
 800176e:	2180      	movs	r1, #128	@ 0x80
 8001770:	0109      	lsls	r1, r1, #4
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001776:	0021      	movs	r1, r4
 8001778:	187b      	adds	r3, r7, r1
 800177a:	2202      	movs	r2, #2
 800177c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800177e:	187b      	adds	r3, r7, r1
 8001780:	2201      	movs	r2, #1
 8001782:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001784:	187b      	adds	r3, r7, r1
 8001786:	2210      	movs	r2, #16
 8001788:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2202      	movs	r2, #2
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2200      	movs	r2, #0
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2200      	movs	r2, #0
 800179a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	0412      	lsls	r2, r2, #16
 80017a2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	0018      	movs	r0, r3
 80017a8:	f002 fb16 	bl	8003dd8 <HAL_RCC_OscConfig>
 80017ac:	1e03      	subs	r3, r0, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017b0:	f000 f9be 	bl	8001b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b4:	2124      	movs	r1, #36	@ 0x24
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	220f      	movs	r2, #15
 80017ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2203      	movs	r2, #3
 80017c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	2100      	movs	r1, #0
 80017d8:	0018      	movs	r0, r3
 80017da:	f002 fed1 	bl	8004580 <HAL_RCC_ClockConfig>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80017e2:	f000 f9a5 	bl	8001b30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017e6:	003b      	movs	r3, r7
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017ec:	003b      	movs	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f2:	003b      	movs	r3, r7
 80017f4:	0018      	movs	r0, r3
 80017f6:	f003 f8e7 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80017fe:	f000 f997 	bl	8001b30 <Error_Handler>
  }
}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b01d      	add	sp, #116	@ 0x74
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	40007000 	.word	0x40007000
 8001810:	ffffe7ff 	.word	0xffffe7ff

08001814 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
bool MX_I2S2_Init(I2S_HandleTypeDef ** pHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2S2_Init 0 */

  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */
  pHandle[0] = &hi2s2;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a13      	ldr	r2, [pc, #76]	@ (800186c <MX_I2S2_Init+0x58>)
 8001820:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001822:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_I2S2_Init+0x58>)
 8001824:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <MX_I2S2_Init+0x5c>)
 8001826:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001828:	4b10      	ldr	r3, [pc, #64]	@ (800186c <MX_I2S2_Init+0x58>)
 800182a:	22c0      	movs	r2, #192	@ 0xc0
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001830:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_I2S2_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001836:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <MX_I2S2_Init+0x58>)
 8001838:	2203      	movs	r2, #3
 800183a:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <MX_I2S2_Init+0x58>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <MX_I2S2_Init+0x58>)
 8001844:	22fa      	movs	r2, #250	@ 0xfa
 8001846:	0192      	lsls	r2, r2, #6
 8001848:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <MX_I2S2_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_I2S2_Init+0x58>)
 8001852:	0018      	movs	r0, r3
 8001854:	f001 ffae 	bl	80037b4 <HAL_I2S_Init>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d001      	beq.n	8001860 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800185c:	f000 f968 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */
  return true;
 8001860:	2301      	movs	r3, #1
  /* USER CODE END I2S2_Init 2 */

}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	2000008c 	.word	0x2000008c
 8001870:	40003800 	.word	0x40003800

08001874 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
bool MX_TIM6_Init(TIM_HandleTypeDef ** pHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM6_Init 0 */
  pHandle[0] = &htim6;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <MX_TIM6_Init+0x7c>)
 8001880:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001882:	2308      	movs	r3, #8
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	0018      	movs	r0, r3
 8001888:	2308      	movs	r3, #8
 800188a:	001a      	movs	r2, r3
 800188c:	2100      	movs	r1, #0
 800188e:	f005 f90d 	bl	8006aac <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <MX_TIM6_Init+0x7c>)
 8001894:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <MX_TIM6_Init+0x80>)
 8001896:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 732;
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <MX_TIM6_Init+0x7c>)
 800189a:	22b7      	movs	r2, #183	@ 0xb7
 800189c:	0092      	lsls	r2, r2, #2
 800189e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <MX_TIM6_Init+0x7c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MX_TIM6_Init+0x7c>)
 80018a8:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <MX_TIM6_Init+0x84>)
 80018aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <MX_TIM6_Init+0x7c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_TIM6_Init+0x7c>)
 80018b4:	0018      	movs	r0, r3
 80018b6:	f003 f9e3 	bl	8004c80 <HAL_TIM_Base_Init>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 80018be:	f000 f937 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2108      	movs	r1, #8
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018d0:	187a      	adds	r2, r7, r1
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <MX_TIM6_Init+0x7c>)
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f003 fad8 	bl	8004e8c <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM6_Init+0x70>
  {
    Error_Handler();
 80018e0:	f000 f926 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  return true;
 80018e4:	2301      	movs	r3, #1
  /* USER CODE END TIM6_Init 2 */

}
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	20000110 	.word	0x20000110
 80018f4:	40001000 	.word	0x40001000
 80018f8:	0000ffff 	.word	0x0000ffff

080018fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
bool MX_USART1_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001900:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 8001902:	4a18      	ldr	r2, [pc, #96]	@ (8001964 <MX_USART1_UART_Init+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 8001908:	22e1      	movs	r2, #225	@ 0xe1
 800190a:	0252      	lsls	r2, r2, #9
 800190c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 800193a:	2208      	movs	r2, #8
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 8001940:	2280      	movs	r2, #128	@ 0x80
 8001942:	0212      	lsls	r2, r2, #8
 8001944:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_USART1_UART_Init+0x64>)
 8001948:	0018      	movs	r0, r3
 800194a:	f003 fafd 	bl	8004f48 <HAL_UART_Init>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d001      	beq.n	8001956 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001952:	f000 f8ed 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  return true;
 8001956:	2301      	movs	r3, #1
  /* USER CODE END USART1_Init 2 */

}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	20000150 	.word	0x20000150
 8001964:	40013800 	.word	0x40013800

08001968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(DMA_HandleTypeDef ** pHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <MX_DMA_Init+0x38>)
 8001972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001974:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <MX_DMA_Init+0x38>)
 8001976:	2101      	movs	r1, #1
 8001978:	430a      	orrs	r2, r1
 800197a:	631a      	str	r2, [r3, #48]	@ 0x30
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <MX_DMA_Init+0x38>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	2201      	movs	r2, #1
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	200b      	movs	r0, #11
 800198e:	f001 fb49 	bl	8003024 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001992:	200b      	movs	r0, #11
 8001994:	f001 fb5b 	bl	800304e <HAL_NVIC_EnableIRQ>

}
 8001998:	46c0      	nop			@ (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b004      	add	sp, #16
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000

080019a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b08b      	sub	sp, #44	@ 0x2c
 80019a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	2414      	movs	r4, #20
 80019ac:	193b      	adds	r3, r7, r4
 80019ae:	0018      	movs	r0, r3
 80019b0:	2314      	movs	r3, #20
 80019b2:	001a      	movs	r2, r3
 80019b4:	2100      	movs	r1, #0
 80019b6:	f005 f879 	bl	8006aac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	4b59      	ldr	r3, [pc, #356]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 80019bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019be:	4b58      	ldr	r3, [pc, #352]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 80019c0:	2104      	movs	r1, #4
 80019c2:	430a      	orrs	r2, r1
 80019c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019c6:	4b56      	ldr	r3, [pc, #344]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ca:	2204      	movs	r2, #4
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b53      	ldr	r3, [pc, #332]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 80019d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d6:	4b52      	ldr	r3, [pc, #328]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 80019d8:	2102      	movs	r1, #2
 80019da:	430a      	orrs	r2, r1
 80019dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019de:	4b50      	ldr	r3, [pc, #320]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	2202      	movs	r2, #2
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 80019ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 80019f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a02:	4b47      	ldr	r3, [pc, #284]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 8001a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a06:	4b46      	ldr	r3, [pc, #280]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 8001a08:	2108      	movs	r1, #8
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a0e:	4b44      	ldr	r3, [pc, #272]	@ (8001b20 <MX_GPIO_Init+0x17c>)
 8001a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a12:	2208      	movs	r2, #8
 8001a14:	4013      	ands	r3, r2
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_En_GPIO_Port, Wireless_PSU_En_Pin, GPIO_PIN_SET);
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	4841      	ldr	r0, [pc, #260]	@ (8001b24 <MX_GPIO_Init+0x180>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	0019      	movs	r1, r3
 8001a24:	f001 fea8 	bl	8003778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8001a28:	2380      	movs	r3, #128	@ 0x80
 8001a2a:	015b      	lsls	r3, r3, #5
 8001a2c:	483d      	ldr	r0, [pc, #244]	@ (8001b24 <MX_GPIO_Init+0x180>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	0019      	movs	r1, r3
 8001a32:	f001 fea1 	bl	8003778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8001a36:	23c0      	movs	r3, #192	@ 0xc0
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	483b      	ldr	r0, [pc, #236]	@ (8001b28 <MX_GPIO_Init+0x184>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	0019      	movs	r1, r3
 8001a40:	f001 fe9a 	bl	8003778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	2230      	movs	r2, #48	@ 0x30
 8001a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a56:	193b      	adds	r3, r7, r4
 8001a58:	4a32      	ldr	r2, [pc, #200]	@ (8001b24 <MX_GPIO_Init+0x180>)
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	0010      	movs	r0, r2
 8001a5e:	f001 fd0d 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : Charger_status_Pin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8001a62:	0021      	movs	r1, r4
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2280      	movs	r2, #128	@ 0x80
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	000c      	movs	r4, r1
 8001a6e:	193b      	adds	r3, r7, r4
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	193b      	adds	r3, r7, r4
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	193b      	adds	r3, r7, r4
 8001a7c:	4a29      	ldr	r2, [pc, #164]	@ (8001b24 <MX_GPIO_Init+0x180>)
 8001a7e:	0019      	movs	r1, r3
 8001a80:	0010      	movs	r0, r2
 8001a82:	f001 fcfb 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : Wireless_PSU_PG_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = Wireless_PSU_PG_Pin|BOOT0_Pin;
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	2281      	movs	r2, #129	@ 0x81
 8001a8a:	0212      	lsls	r2, r2, #8
 8001a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	193a      	adds	r2, r7, r4
 8001a9c:	23a0      	movs	r3, #160	@ 0xa0
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	0011      	movs	r1, r2
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f001 fcea 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : Wireless_PSU_En_Pin Boost_Enable_Pin */
  GPIO_InitStruct.Pin = Wireless_PSU_En_Pin|Boost_Enable_Pin;
 8001aa8:	0021      	movs	r1, r4
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	22c0      	movs	r2, #192	@ 0xc0
 8001aae:	0152      	lsls	r2, r2, #5
 8001ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	000c      	movs	r4, r1
 8001ab4:	193b      	adds	r3, r7, r4
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	193b      	adds	r3, r7, r4
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	193b      	adds	r3, r7, r4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	193b      	adds	r3, r7, r4
 8001ac8:	4a16      	ldr	r2, [pc, #88]	@ (8001b24 <MX_GPIO_Init+0x180>)
 8001aca:	0019      	movs	r1, r3
 8001acc:	0010      	movs	r0, r2
 8001ace:	f001 fcd5 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <MX_GPIO_Init+0x188>)
 8001ae8:	0019      	movs	r1, r3
 8001aea:	0010      	movs	r0, r2
 8001aec:	f001 fcc6 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_C_G_Pin MCU_LED_C_B_Pin */
  GPIO_InitStruct.Pin = MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8001af0:	0021      	movs	r1, r4
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	22c0      	movs	r2, #192	@ 0xc0
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	2201      	movs	r2, #1
 8001afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <MX_GPIO_Init+0x184>)
 8001b10:	0019      	movs	r1, r3
 8001b12:	0010      	movs	r0, r2
 8001b14:	f001 fcb2 	bl	800347c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b18:	46c0      	nop			@ (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b00b      	add	sp, #44	@ 0x2c
 8001b1e:	bd90      	pop	{r4, r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	50000800 	.word	0x50000800
 8001b28:	50000400 	.word	0x50000400
 8001b2c:	50000c00 	.word	0x50000c00

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b38:	46c0      	nop			@ (mov r8, r8)
 8001b3a:	e7fd      	b.n	8001b38 <Error_Handler+0x8>

08001b3c <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8001b3c:	b40f      	push	{r0, r1, r2, r3}
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8001b44:	2314      	movs	r3, #20
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	2180      	movs	r1, #128	@ 0x80
 8001b50:	0089      	lsls	r1, r1, #2
 8001b52:	480a      	ldr	r0, [pc, #40]	@ (8001b7c <print+0x40>)
 8001b54:	f004 ff9e 	bl	8006a94 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <print+0x40>)
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7fe fafc 	bl	8000158 <strlen>
 8001b60:	0003      	movs	r3, r0
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <print+0x40>)
 8001b66:	0011      	movs	r1, r2
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7ff fd43 	bl	80015f4 <printString>
}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b002      	add	sp, #8
 8001b74:	bc80      	pop	{r7}
 8001b76:	bc08      	pop	{r3}
 8001b78:	b004      	add	sp, #16
 8001b7a:	4718      	bx	r3
 8001b7c:	200001d8 	.word	0x200001d8

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	0002      	movs	r2, r0
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b92:	d809      	bhi.n	8001ba8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	001a      	movs	r2, r3
 8001b9a:	231f      	movs	r3, #31
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <__NVIC_EnableIRQ+0x30>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4091      	lsls	r1, r2
 8001ba4:	000a      	movs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
  }
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	0002      	movs	r2, r0
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bc6:	d810      	bhi.n	8001bea <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	001a      	movs	r2, r3
 8001bce:	231f      	movs	r3, #31
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <__NVIC_DisableIRQ+0x40>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	0013      	movs	r3, r2
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bde:	f3bf 8f4f 	dsb	sy
}
 8001be2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001be4:	f3bf 8f6f 	isb	sy
}
 8001be8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	0008      	movs	r0, r1
 8001c02:	0011      	movs	r1, r2
 8001c04:	1cfb      	adds	r3, r7, #3
 8001c06:	1c02      	adds	r2, r0, #0
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	1cbb      	adds	r3, r7, #2
 8001c0c:	1c0a      	adds	r2, r1, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
	if ((!micEnabled) || (!SPLcalcComplete))
 8001c10:	4b5a      	ldr	r3, [pc, #360]	@ (8001d7c <getSoundData+0x184>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4053      	eors	r3, r2
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <getSoundData+0x36>
 8001c1e:	4b58      	ldr	r3, [pc, #352]	@ (8001d80 <getSoundData+0x188>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2201      	movs	r2, #1
 8001c26:	4053      	eors	r3, r2
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <getSoundData+0x3a>
    {
        return false;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e0a0      	b.n	8001d74 <getSoundData+0x17c>
    }
    if (DMAinterruptEnabled)
 8001c32:	4b54      	ldr	r3, [pc, #336]	@ (8001d84 <getSoundData+0x18c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <getSoundData+0x50>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8001c3c:	4b52      	ldr	r3, [pc, #328]	@ (8001d88 <getSoundData+0x190>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7ff ffb6 	bl	8001bb4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c48:	f3bf 8f4f 	dsb	sy
}
 8001c4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001c4e:	f3bf 8f6f 	isb	sy
}
 8001c52:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8001c54:	1cfb      	adds	r3, r7, #3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d04c      	beq.n	8001cf6 <getSoundData+0xfe>
    {
        if (spl_sum_count == 0)
 8001c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d8c <getSoundData+0x194>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d11b      	bne.n	8001c9c <getSoundData+0xa4>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e00e      	b.n	8001c94 <getSoundData+0x9c>
            {
                data->SPL_bands_dB_int[i] = 0;
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	18d3      	adds	r3, r2, r3
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	18d3      	adds	r3, r2, r3
 8001c88:	3308      	adds	r3, #8
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d9ed      	bls.n	8001c76 <getSoundData+0x7e>
 8001c9a:	e02c      	b.n	8001cf6 <getSoundData+0xfe>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	1c59      	adds	r1, r3, #1
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8001d90 <getSoundData+0x198>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8001d94 <getSoundData+0x19c>)
 8001ca8:	681c      	ldr	r4, [r3, #0]
 8001caa:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <getSoundData+0x194>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	0023      	movs	r3, r4
 8001cb2:	f000 fde5 	bl	8002880 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	e019      	b.n	8001cf0 <getSoundData+0xf8>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	18d3      	adds	r3, r2, r3
 8001cc2:	1c98      	adds	r0, r3, #2
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	3308      	adds	r3, #8
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8001ccc:	4b32      	ldr	r3, [pc, #200]	@ (8001d98 <getSoundData+0x1a0>)
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8001cd4:	4b31      	ldr	r3, [pc, #196]	@ (8001d9c <getSoundData+0x1a4>)
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d8c <getSoundData+0x194>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	0022      	movs	r2, r4
 8001ce6:	f000 fdcb 	bl	8002880 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	3301      	adds	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d9e2      	bls.n	8001cbc <getSoundData+0xc4>
            }
        }
    }

    if (getMaxAmpData)
 8001cf6:	1cbb      	adds	r3, r7, #2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d028      	beq.n	8001d50 <getSoundData+0x158>
    {
        uint16_t intPart = 0;
 8001cfe:	240e      	movs	r4, #14
 8001d00:	193b      	adds	r3, r7, r4
 8001d02:	2200      	movs	r2, #0
 8001d04:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8001d06:	250d      	movs	r5, #13
 8001d08:	197b      	adds	r3, r7, r5
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8001d0e:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <getSoundData+0x1a8>)
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	4924      	ldr	r1, [pc, #144]	@ (8001da4 <getSoundData+0x1ac>)
 8001d14:	197b      	adds	r3, r7, r5
 8001d16:	193a      	adds	r2, r7, r4
 8001d18:	f000 fe56 	bl	80029c8 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8001d1c:	193b      	adds	r3, r7, r4
 8001d1e:	881a      	ldrh	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	21ff      	movs	r1, #255	@ 0xff
 8001d24:	4011      	ands	r1, r2
 8001d26:	000c      	movs	r4, r1
 8001d28:	7b99      	ldrb	r1, [r3, #14]
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	4001      	ands	r1, r0
 8001d2e:	1c08      	adds	r0, r1, #0
 8001d30:	1c21      	adds	r1, r4, #0
 8001d32:	4301      	orrs	r1, r0
 8001d34:	7399      	strb	r1, [r3, #14]
 8001d36:	0a12      	lsrs	r2, r2, #8
 8001d38:	b290      	uxth	r0, r2
 8001d3a:	7bda      	ldrb	r2, [r3, #15]
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	400a      	ands	r2, r1
 8001d40:	1c11      	adds	r1, r2, #0
 8001d42:	1c02      	adds	r2, r0, #0
 8001d44:	430a      	orrs	r2, r1
 8001d46:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8001d48:	197b      	adds	r3, r7, r5
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8001d50:	f000 f886 	bl	8001e60 <micSettlingComplete>
 8001d54:	0003      	movs	r3, r0
 8001d56:	001a      	movs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <getSoundData+0x18c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <getSoundData+0x17a>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <getSoundData+0x190>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff ff07 	bl	8001b80 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b006      	add	sp, #24
 8001d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7c:	200003d8 	.word	0x200003d8
 8001d80:	200003db 	.word	0x200003db
 8001d84:	200003da 	.word	0x200003da
 8001d88:	20000e28 	.word	0x20000e28
 8001d8c:	20000e64 	.word	0x20000e64
 8001d90:	20000e2c 	.word	0x20000e2c
 8001d94:	20000e30 	.word	0x20000e30
 8001d98:	20000e34 	.word	0x20000e34
 8001d9c:	20000e4c 	.word	0x20000e4c
 8001da0:	200003e0 	.word	0x200003e0
 8001da4:	3b5c7333 	.word	0x3b5c7333

08001da8 <soundInit>:
// Initialize hardware for reading out the microphone: DMA, Timer, I2S.
// Obtain the handles to the peripherals and return bool success.
bool soundInit(void (*DMAInit)(DMA_HandleTypeDef **),
               bool (*I2SInit)(I2S_HandleTypeDef **),
               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	001a      	movs	r2, r3
 8001db6:	1cfb      	adds	r3, r7, #3
 8001db8:	701a      	strb	r2, [r3, #0]
    (*DMAInit)(&hdma_spi2_rx);
 8001dba:	4a15      	ldr	r2, [pc, #84]	@ (8001e10 <soundInit+0x68>)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	0010      	movs	r0, r2
 8001dc0:	4798      	blx	r3
    DMA_Channel_IRQn = DMAChIRQn;
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <soundInit+0x6c>)
 8001dc4:	1cfa      	adds	r2, r7, #3
 8001dc6:	7812      	ldrb	r2, [r2, #0]
 8001dc8:	701a      	strb	r2, [r3, #0]
    bool ok = (*I2SInit)(&hi2s2);
 8001dca:	2517      	movs	r5, #23
 8001dcc:	197c      	adds	r4, r7, r5
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <soundInit+0x70>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	4798      	blx	r3
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	7023      	strb	r3, [r4, #0]
    ok = ok && (*tmrInit)(&htim6);
 8001dda:	197b      	adds	r3, r7, r5
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <soundInit+0x4a>
 8001de2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e1c <soundInit+0x74>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	0010      	movs	r0, r2
 8001de8:	4798      	blx	r3
 8001dea:	1e03      	subs	r3, r0, #0
 8001dec:	d001      	beq.n	8001df2 <soundInit+0x4a>
 8001dee:	2201      	movs	r2, #1
 8001df0:	e000      	b.n	8001df4 <soundInit+0x4c>
 8001df2:	2200      	movs	r2, #0
 8001df4:	2017      	movs	r0, #23
 8001df6:	183b      	adds	r3, r7, r0
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	400a      	ands	r2, r1
 8001e00:	701a      	strb	r2, [r3, #0]
    return ok;
 8001e02:	183b      	adds	r3, r7, r0
 8001e04:	781b      	ldrb	r3, [r3, #0]
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b006      	add	sp, #24
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	20000e24 	.word	0x20000e24
 8001e14:	20000e28 	.word	0x20000e28
 8001e18:	20000e20 	.word	0x20000e20
 8001e1c:	20000e1c 	.word	0x20000e1c

08001e20 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8001e24:	4b02      	ldr	r3, [pc, #8]	@ (8001e30 <clearMaximumAmplitude+0x10>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200003e0 	.word	0x200003e0

08001e34 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCounter(htim6, 0);
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <startMicSettlingPeriod+0x28>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <startMicSettlingPeriod+0x28>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f002 ff5a 	bl	8004d00 <HAL_TIM_Base_Start>
 8001e4c:	1e03      	subs	r3, r0, #0
 8001e4e:	d001      	beq.n	8001e54 <startMicSettlingPeriod+0x20>
    {
        return false;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e000      	b.n	8001e56 <startMicSettlingPeriod+0x22>
    }
    return true;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000e1c 	.word	0x20000e1c

08001e60 <micSettlingComplete>:

// See whether the warmup/settling time has finished
static bool micSettlingComplete(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <micSettlingComplete+0x3c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	401a      	ands	r2, r3
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	3a01      	subs	r2, #1
 8001e76:	4251      	negs	r1, r2
 8001e78:	414a      	adcs	r2, r1
 8001e7a:	701a      	strb	r2, [r3, #0]
    if (complete)
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <micSettlingComplete+0x2e>
    {
        HAL_TIM_Base_Stop(htim6);
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <micSettlingComplete+0x3c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f002 ff83 	bl	8004d94 <HAL_TIM_Base_Stop>
    }
    return complete;
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	20000e1c 	.word	0x20000e1c

08001ea0 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	1dfb      	adds	r3, r7, #7
 8001eaa:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8001eac:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <enableMicrophone+0xb0>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	1dfa      	adds	r2, r7, #7
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d101      	bne.n	8001ebc <enableMicrophone+0x1c>
    {
        return true;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e045      	b.n	8001f48 <enableMicrophone+0xa8>
    }
    if (bEnable)
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d025      	beq.n	8001f10 <enableMicrophone+0x70>
    {
        startMicSettlingPeriod();
 8001ec4:	f7ff ffb6 	bl	8001e34 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8001ec8:	4b22      	ldr	r3, [pc, #136]	@ (8001f54 <enableMicrophone+0xb4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2280      	movs	r2, #128	@ 0x80
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4921      	ldr	r1, [pc, #132]	@ (8001f58 <enableMicrophone+0xb8>)
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f001 fd60 	bl	8003998 <HAL_I2S_Receive_DMA>
 8001ed8:	1e03      	subs	r3, r0, #0
 8001eda:	d001      	beq.n	8001ee0 <enableMicrophone+0x40>
        {
            return false;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e033      	b.n	8001f48 <enableMicrophone+0xa8>
        }
        clearMaximumAmplitude();
 8001ee0:	f7ff ff9e 	bl	8001e20 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <enableMicrophone+0xbc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8001eea:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <enableMicrophone+0xc0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7ff fe45 	bl	8001b80 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <enableMicrophone+0xc4>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <enableMicrophone+0xb0>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <enableMicrophone+0xc8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8001f08:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <enableMicrophone+0xcc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	e01a      	b.n	8001f46 <enableMicrophone+0xa6>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <enableMicrophone+0xc0>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7ff fe4c 	bl	8001bb4 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <enableMicrophone+0xc4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <enableMicrophone+0xc8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8001f28:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <enableMicrophone+0xcc>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <enableMicrophone+0xb4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0018      	movs	r0, r3
 8001f34:	f001 fdf2 	bl	8003b1c <HAL_I2S_DMAStop>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d001      	beq.n	8001f40 <enableMicrophone+0xa0>
        {
            return false;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e003      	b.n	8001f48 <enableMicrophone+0xa8>
        }
        micEnabled = false;
 8001f40:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <enableMicrophone+0xb0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200003d8 	.word	0x200003d8
 8001f54:	20000e20 	.word	0x20000e20
 8001f58:	2000041c 	.word	0x2000041c
 8001f5c:	200003dc 	.word	0x200003dc
 8001f60:	20000e28 	.word	0x20000e28
 8001f64:	200003da 	.word	0x200003da
 8001f68:	200003d9 	.word	0x200003d9
 8001f6c:	200003db 	.word	0x200003db

08001f70 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <startSPLcalculation+0x38>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4053      	eors	r3, r2
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <startSPLcalculation+0x16>
    {
        return false;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e00c      	b.n	8001fa0 <startSPLcalculation+0x30>
    }
    if (SPLcalcEnabled)
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <startSPLcalculation+0x3c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <startSPLcalculation+0x24>
    {
        return true;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e005      	b.n	8001fa0 <startSPLcalculation+0x30>
    }
    resetSPLstate();
 8001f94:	f000 fb50 	bl	8002638 <resetSPLstate>
    SPLcalcEnabled = true;
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <startSPLcalculation+0x3c>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
    return true;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	200003d8 	.word	0x200003d8
 8001fac:	200003d9 	.word	0x200003d9

08001fb0 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 f811 	bl	8001fe0 <processHalfDMAbuffer>
}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f000 f804 	bl	8001fe0 <processHalfDMAbuffer>
}
 8001fd8:	46c0      	nop			@ (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	005a      	lsls	r2, r3, #1
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <processHalfDMAbuffer+0x64>)
 8001fee:	18d3      	adds	r3, r2, r3
 8001ff0:	4a15      	ldr	r2, [pc, #84]	@ (8002048 <processHalfDMAbuffer+0x68>)
 8001ff2:	2180      	movs	r1, #128	@ 0x80
 8001ff4:	0089      	lsls	r1, r1, #2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 fd2f 	bl	8002a5a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <processHalfDMAbuffer+0x6c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	425a      	negs	r2, r3
 8002002:	4153      	adcs	r3, r2
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b11      	ldr	r3, [pc, #68]	@ (800204c <processHalfDMAbuffer+0x6c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2109      	movs	r1, #9
 800200c:	4299      	cmp	r1, r3
 800200e:	419b      	sbcs	r3, r3
 8002010:	425b      	negs	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	480c      	ldr	r0, [pc, #48]	@ (8002048 <processHalfDMAbuffer+0x68>)
 8002016:	2180      	movs	r1, #128	@ 0x80
 8002018:	f000 fb40 	bl	800269c <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <processHalfDMAbuffer+0x6c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b09      	cmp	r3, #9
 8002022:	d804      	bhi.n	800202e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <processHalfDMAbuffer+0x6c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <processHalfDMAbuffer+0x6c>)
 800202c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <processHalfDMAbuffer+0x70>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8002038:	f000 f820 	bl	800207c <calculateSPLQ31>
    }
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}
 8002044:	2000041c 	.word	0x2000041c
 8002048:	20000c1c 	.word	0x20000c1c
 800204c:	200003dc 	.word	0x200003dc
 8002050:	200003d9 	.word	0x200003d9

08002054 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800205c:	4a05      	ldr	r2, [pc, #20]	@ (8002074 <HAL_I2S_ErrorCallback+0x20>)
 800205e:	2394      	movs	r3, #148	@ 0x94
 8002060:	0059      	lsls	r1, r3, #1
 8002062:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_I2S_ErrorCallback+0x24>)
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff fab5 	bl	80015d4 <errorHandler>
}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	0800749c 	.word	0x0800749c
 8002078:	080076ac 	.word	0x080076ac

0800207c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b0b3      	sub	sp, #204	@ 0xcc
 8002080:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8002082:	4ae2      	ldr	r2, [pc, #904]	@ (800240c <calculateSPLQ31+0x390>)
 8002084:	2338      	movs	r3, #56	@ 0x38
 8002086:	2030      	movs	r0, #48	@ 0x30
 8002088:	181b      	adds	r3, r3, r0
 800208a:	19d9      	adds	r1, r3, r7
 800208c:	2334      	movs	r3, #52	@ 0x34
 800208e:	181b      	adds	r3, r3, r0
 8002090:	19d8      	adds	r0, r3, r7
 8002092:	2380      	movs	r3, #128	@ 0x80
 8002094:	f000 fc36 	bl	8002904 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8002098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800209a:	2b00      	cmp	r3, #0
 800209c:	da00      	bge.n	80020a0 <calculateSPLQ31+0x24>
 800209e:	3301      	adds	r3, #1
 80020a0:	105b      	asrs	r3, r3, #1
 80020a2:	001a      	movs	r2, r3
 80020a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	da00      	bge.n	80020ac <calculateSPLQ31+0x30>
 80020aa:	3301      	adds	r3, #1
 80020ac:	105b      	asrs	r3, r3, #1
 80020ae:	18d3      	adds	r3, r2, r3
 80020b0:	2188      	movs	r1, #136	@ 0x88
 80020b2:	187a      	adds	r2, r7, r1
 80020b4:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 80020b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	3304      	adds	r3, #4
 80020c0:	2284      	movs	r2, #132	@ 0x84
 80020c2:	18b9      	adds	r1, r7, r2
 80020c4:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 80020c6:	18bb      	adds	r3, r7, r2
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4ad1      	ldr	r2, [pc, #836]	@ (8002410 <calculateSPLQ31+0x394>)
 80020cc:	0019      	movs	r1, r3
 80020ce:	0010      	movs	r0, r2
 80020d0:	f000 fc58 	bl	8002984 <getPo2factor>
 80020d4:	0003      	movs	r3, r0
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	18ba      	adds	r2, r7, r2
 80020da:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	2284      	movs	r2, #132	@ 0x84
 80020e0:	2130      	movs	r1, #48	@ 0x30
 80020e2:	1852      	adds	r2, r2, r1
 80020e4:	19d2      	adds	r2, r2, r7
 80020e6:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	2280      	movs	r2, #128	@ 0x80
 80020ec:	1852      	adds	r2, r2, r1
 80020ee:	19d2      	adds	r2, r2, r7
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e032      	b.n	800215a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 80020f4:	4ac5      	ldr	r2, [pc, #788]	@ (800240c <calculateSPLQ31+0x390>)
 80020f6:	2680      	movs	r6, #128	@ 0x80
 80020f8:	2330      	movs	r3, #48	@ 0x30
 80020fa:	18f1      	adds	r1, r6, r3
 80020fc:	19cb      	adds	r3, r1, r7
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	589a      	ldr	r2, [r3, r2]
 8002104:	2188      	movs	r1, #136	@ 0x88
 8002106:	1879      	adds	r1, r7, r1
 8002108:	680b      	ldr	r3, [r1, #0]
 800210a:	1ad2      	subs	r2, r2, r3
 800210c:	2180      	movs	r1, #128	@ 0x80
 800210e:	1879      	adds	r1, r7, r1
 8002110:	680b      	ldr	r3, [r1, #0]
 8002112:	409a      	lsls	r2, r3
 8002114:	0011      	movs	r1, r2
 8002116:	4abf      	ldr	r2, [pc, #764]	@ (8002414 <calculateSPLQ31+0x398>)
 8002118:	2084      	movs	r0, #132	@ 0x84
 800211a:	2330      	movs	r3, #48	@ 0x30
 800211c:	18c3      	adds	r3, r0, r3
 800211e:	19db      	adds	r3, r3, r7
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8002126:	2230      	movs	r2, #48	@ 0x30
 8002128:	1883      	adds	r3, r0, r2
 800212a:	19db      	adds	r3, r3, r7
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	49b8      	ldr	r1, [pc, #736]	@ (8002414 <calculateSPLQ31+0x398>)
 8002132:	009a      	lsls	r2, r3, #2
 8002134:	2300      	movs	r3, #0
 8002136:	5053      	str	r3, [r2, r1]
        count += 2;
 8002138:	2230      	movs	r2, #48	@ 0x30
 800213a:	1883      	adds	r3, r0, r2
 800213c:	19db      	adds	r3, r3, r7
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3302      	adds	r3, #2
 8002142:	0011      	movs	r1, r2
 8002144:	1882      	adds	r2, r0, r2
 8002146:	19d2      	adds	r2, r2, r7
 8002148:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800214a:	000a      	movs	r2, r1
 800214c:	18b3      	adds	r3, r6, r2
 800214e:	19db      	adds	r3, r3, r7
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	18b2      	adds	r2, r6, r2
 8002156:	19d2      	adds	r2, r2, r7
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	2630      	movs	r6, #48	@ 0x30
 800215e:	199b      	adds	r3, r3, r6
 8002160:	19db      	adds	r3, r3, r7
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b7f      	cmp	r3, #127	@ 0x7f
 8002166:	d9c5      	bls.n	80020f4 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8002168:	4bab      	ldr	r3, [pc, #684]	@ (8002418 <calculateSPLQ31+0x39c>)
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	49a9      	ldr	r1, [pc, #676]	@ (8002414 <calculateSPLQ31+0x398>)
 800216e:	2301      	movs	r3, #1
 8002170:	2200      	movs	r2, #0
 8002172:	f003 fe29 	bl	8005dc8 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8002176:	4aa9      	ldr	r2, [pc, #676]	@ (800241c <calculateSPLQ31+0x3a0>)
 8002178:	2338      	movs	r3, #56	@ 0x38
 800217a:	199b      	adds	r3, r3, r6
 800217c:	19d9      	adds	r1, r3, r7
 800217e:	2334      	movs	r3, #52	@ 0x34
 8002180:	199b      	adds	r3, r3, r6
 8002182:	19d8      	adds	r0, r3, r7
 8002184:	237e      	movs	r3, #126	@ 0x7e
 8002186:	f000 fbbd 	bl	8002904 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800218a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	061b      	lsls	r3, r3, #24
 8002190:	429a      	cmp	r2, r3
 8002192:	d101      	bne.n	8002198 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8002194:	4b9e      	ldr	r3, [pc, #632]	@ (8002410 <calculateSPLQ31+0x394>)
 8002196:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8002198:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	429a      	cmp	r2, r3
 80021a0:	d101      	bne.n	80021a6 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 80021a2:	4b9b      	ldr	r3, [pc, #620]	@ (8002410 <calculateSPLQ31+0x394>)
 80021a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 80021a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021a8:	17da      	asrs	r2, r3, #31
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	4053      	eors	r3, r2
 80021ae:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 80021b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021b2:	17da      	asrs	r2, r3, #31
 80021b4:	189b      	adds	r3, r3, r2
 80021b6:	4053      	eors	r3, r2
 80021b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 80021ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80021bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021be:	429a      	cmp	r2, r3
 80021c0:	dd01      	ble.n	80021c6 <calculateSPLQ31+0x14a>
    {
        max = min;
 80021c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 80021c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021c8:	3304      	adds	r3, #4
 80021ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 80021cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021ce:	4a90      	ldr	r2, [pc, #576]	@ (8002410 <calculateSPLQ31+0x394>)
 80021d0:	0019      	movs	r1, r3
 80021d2:	0010      	movs	r0, r2
 80021d4:	f000 fbd6 	bl	8002984 <getPo2factor>
 80021d8:	0003      	movs	r3, r0
 80021da:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 80021dc:	2302      	movs	r3, #2
 80021de:	22ac      	movs	r2, #172	@ 0xac
 80021e0:	18ba      	adds	r2, r7, r2
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e012      	b.n	800220c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 80021e6:	4a8b      	ldr	r2, [pc, #556]	@ (8002414 <calculateSPLQ31+0x398>)
 80021e8:	20ac      	movs	r0, #172	@ 0xac
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	589a      	ldr	r2, [r3, r2]
 80021f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021f4:	409a      	lsls	r2, r3
 80021f6:	0011      	movs	r1, r2
 80021f8:	4a86      	ldr	r2, [pc, #536]	@ (8002414 <calculateSPLQ31+0x398>)
 80021fa:	183b      	adds	r3, r7, r0
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8002202:	183b      	adds	r3, r7, r0
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	183a      	adds	r2, r7, r0
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	23ac      	movs	r3, #172	@ 0xac
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b7f      	cmp	r3, #127	@ 0x7f
 8002214:	d9e7      	bls.n	80021e6 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8002216:	4b7d      	ldr	r3, [pc, #500]	@ (800240c <calculateSPLQ31+0x390>)
 8002218:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800221a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800221c:	4b7d      	ldr	r3, [pc, #500]	@ (8002414 <calculateSPLQ31+0x398>)
 800221e:	2240      	movs	r2, #64	@ 0x40
 8002220:	0018      	movs	r0, r3
 8002222:	f004 fb7b 	bl	800691c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8002226:	2330      	movs	r3, #48	@ 0x30
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	0018      	movs	r0, r3
 800222c:	2330      	movs	r3, #48	@ 0x30
 800222e:	001a      	movs	r2, r3
 8002230:	2100      	movs	r1, #0
 8002232:	f004 fc3b 	bl	8006aac <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8002236:	2200      	movs	r2, #0
 8002238:	2300      	movs	r3, #0
 800223a:	21a0      	movs	r1, #160	@ 0xa0
 800223c:	1879      	adds	r1, r7, r1
 800223e:	600a      	str	r2, [r1, #0]
 8002240:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8002242:	2301      	movs	r3, #1
 8002244:	229c      	movs	r2, #156	@ 0x9c
 8002246:	18ba      	adds	r2, r7, r2
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e05b      	b.n	8002304 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800224c:	269c      	movs	r6, #156	@ 0x9c
 800224e:	19bb      	adds	r3, r7, r6
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	009a      	lsls	r2, r3, #2
 8002254:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002256:	189b      	adds	r3, r3, r2
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	17db      	asrs	r3, r3, #31
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	4b6f      	ldr	r3, [pc, #444]	@ (8002420 <calculateSPLQ31+0x3a4>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	19bb      	adds	r3, r7, r6
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	18d3      	adds	r3, r2, r3
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6938      	ldr	r0, [r7, #16]
 800227a:	6979      	ldr	r1, [r7, #20]
 800227c:	f7fe f82a 	bl	80002d4 <__aeabi_lmul>
 8002280:	0002      	movs	r2, r0
 8002282:	000b      	movs	r3, r1
 8002284:	0010      	movs	r0, r2
 8002286:	0019      	movs	r1, r3
 8002288:	23a0      	movs	r3, #160	@ 0xa0
 800228a:	18fa      	adds	r2, r7, r3
 800228c:	6853      	ldr	r3, [r2, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	1812      	adds	r2, r2, r0
 8002292:	414b      	adcs	r3, r1
 8002294:	21a0      	movs	r1, #160	@ 0xa0
 8002296:	1879      	adds	r1, r7, r1
 8002298:	600a      	str	r2, [r1, #0]
 800229a:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800229c:	4b61      	ldr	r3, [pc, #388]	@ (8002424 <calculateSPLQ31+0x3a8>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	19bb      	adds	r3, r7, r6
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	18d3      	adds	r3, r2, r3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d025      	beq.n	80022f8 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 80022ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002424 <calculateSPLQ31+0x3a8>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	19bb      	adds	r3, r7, r6
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2230      	movs	r2, #48	@ 0x30
 80022ba:	18ba      	adds	r2, r7, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	18d3      	adds	r3, r2, r3
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	19bb      	adds	r3, r7, r6
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	009a      	lsls	r2, r3, #2
 80022ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022cc:	189b      	adds	r3, r3, r2
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	17db      	asrs	r3, r3, #31
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <calculateSPLQ31+0x3a8>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	19be      	adds	r6, r7, r6
 80022dc:	6833      	ldr	r3, [r6, #0]
 80022de:	18d3      	adds	r3, r2, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	001e      	movs	r6, r3
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	1880      	adds	r0, r0, r2
 80022ea:	4159      	adcs	r1, r3
 80022ec:	2330      	movs	r3, #48	@ 0x30
 80022ee:	18fa      	adds	r2, r7, r3
 80022f0:	00f3      	lsls	r3, r6, #3
 80022f2:	18d3      	adds	r3, r2, r3
 80022f4:	6018      	str	r0, [r3, #0]
 80022f6:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 80022f8:	229c      	movs	r2, #156	@ 0x9c
 80022fa:	18bb      	adds	r3, r7, r2
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	18ba      	adds	r2, r7, r2
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	239c      	movs	r3, #156	@ 0x9c
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b3f      	cmp	r3, #63	@ 0x3f
 800230c:	d99e      	bls.n	800224c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	001a      	movs	r2, r3
 8002318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	18d3      	adds	r3, r2, r3
 800231e:	3b22      	subs	r3, #34	@ 0x22
 8002320:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8002322:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002324:	17da      	asrs	r2, r3, #31
 8002326:	189b      	adds	r3, r3, r2
 8002328:	4053      	eors	r3, r2
 800232a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800232c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800232e:	2b00      	cmp	r3, #0
 8002330:	da62      	bge.n	80023f8 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8002332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002334:	3b20      	subs	r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	db05      	blt.n	8002346 <calculateSPLQ31+0x2ca>
 800233a:	22a0      	movs	r2, #160	@ 0xa0
 800233c:	18ba      	adds	r2, r7, r2
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	409a      	lsls	r2, r3
 8002342:	627a      	str	r2, [r7, #36]	@ 0x24
 8002344:	e010      	b.n	8002368 <calculateSPLQ31+0x2ec>
 8002346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002348:	2220      	movs	r2, #32
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	22a0      	movs	r2, #160	@ 0xa0
 800234e:	18ba      	adds	r2, r7, r2
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	40da      	lsrs	r2, r3
 8002354:	0013      	movs	r3, r2
 8002356:	22a4      	movs	r2, #164	@ 0xa4
 8002358:	18ba      	adds	r2, r7, r2
 800235a:	6811      	ldr	r1, [r2, #0]
 800235c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800235e:	4091      	lsls	r1, r2
 8002360:	6279      	str	r1, [r7, #36]	@ 0x24
 8002362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002364:	431a      	orrs	r2, r3
 8002366:	627a      	str	r2, [r7, #36]	@ 0x24
 8002368:	21a0      	movs	r1, #160	@ 0xa0
 800236a:	187b      	adds	r3, r7, r1
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002370:	409a      	lsls	r2, r3
 8002372:	623a      	str	r2, [r7, #32]
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002378:	187a      	adds	r2, r7, r1
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	2298      	movs	r2, #152	@ 0x98
 8002382:	18ba      	adds	r2, r7, r2
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e031      	b.n	80023ec <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8002388:	2330      	movs	r3, #48	@ 0x30
 800238a:	18fa      	adds	r2, r7, r3
 800238c:	2398      	movs	r3, #152	@ 0x98
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800239c:	3920      	subs	r1, #32
 800239e:	2900      	cmp	r1, #0
 80023a0:	db03      	blt.n	80023aa <calculateSPLQ31+0x32e>
 80023a2:	0010      	movs	r0, r2
 80023a4:	4088      	lsls	r0, r1
 80023a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80023a8:	e00c      	b.n	80023c4 <calculateSPLQ31+0x348>
 80023aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80023ac:	2020      	movs	r0, #32
 80023ae:	1a41      	subs	r1, r0, r1
 80023b0:	0010      	movs	r0, r2
 80023b2:	40c8      	lsrs	r0, r1
 80023b4:	0001      	movs	r1, r0
 80023b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80023b8:	001c      	movs	r4, r3
 80023ba:	4084      	lsls	r4, r0
 80023bc:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80023be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023c0:	4308      	orrs	r0, r1
 80023c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80023c4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80023c6:	0013      	movs	r3, r2
 80023c8:	408b      	lsls	r3, r1
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023cc:	2330      	movs	r3, #48	@ 0x30
 80023ce:	18fa      	adds	r2, r7, r3
 80023d0:	2098      	movs	r0, #152	@ 0x98
 80023d2:	183b      	adds	r3, r7, r0
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	18d3      	adds	r3, r2, r3
 80023da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023de:	6019      	str	r1, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	183a      	adds	r2, r7, r0
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	2398      	movs	r3, #152	@ 0x98
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d9c8      	bls.n	8002388 <calculateSPLQ31+0x30c>
 80023f6:	e06b      	b.n	80024d0 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 80023f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023fa:	3b20      	subs	r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db13      	blt.n	8002428 <calculateSPLQ31+0x3ac>
 8002400:	22a4      	movs	r2, #164	@ 0xa4
 8002402:	18ba      	adds	r2, r7, r2
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	40da      	lsrs	r2, r3
 8002408:	61ba      	str	r2, [r7, #24]
 800240a:	e01e      	b.n	800244a <calculateSPLQ31+0x3ce>
 800240c:	20000c1c 	.word	0x20000c1c
 8002410:	7fffffff 	.word	0x7fffffff
 8002414:	20000e68 	.word	0x20000e68
 8002418:	20000000 	.word	0x20000000
 800241c:	20000e70 	.word	0x20000e70
 8002420:	20000004 	.word	0x20000004
 8002424:	20000010 	.word	0x20000010
 8002428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800242a:	2220      	movs	r2, #32
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	22a4      	movs	r2, #164	@ 0xa4
 8002430:	18ba      	adds	r2, r7, r2
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	409a      	lsls	r2, r3
 8002436:	0013      	movs	r3, r2
 8002438:	22a0      	movs	r2, #160	@ 0xa0
 800243a:	18ba      	adds	r2, r7, r2
 800243c:	6811      	ldr	r1, [r2, #0]
 800243e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002440:	40d1      	lsrs	r1, r2
 8002442:	61b9      	str	r1, [r7, #24]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	431a      	orrs	r2, r3
 8002448:	61ba      	str	r2, [r7, #24]
 800244a:	23a4      	movs	r3, #164	@ 0xa4
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002452:	40da      	lsrs	r2, r3
 8002454:	61fa      	str	r2, [r7, #28]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	21a0      	movs	r1, #160	@ 0xa0
 800245c:	1879      	adds	r1, r7, r1
 800245e:	600a      	str	r2, [r1, #0]
 8002460:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8002462:	2300      	movs	r3, #0
 8002464:	2294      	movs	r2, #148	@ 0x94
 8002466:	18ba      	adds	r2, r7, r2
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e02c      	b.n	80024c6 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800246c:	2330      	movs	r3, #48	@ 0x30
 800246e:	18fa      	adds	r2, r7, r3
 8002470:	2394      	movs	r3, #148	@ 0x94
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	18d3      	adds	r3, r2, r3
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002480:	3920      	subs	r1, #32
 8002482:	2900      	cmp	r1, #0
 8002484:	db03      	blt.n	800248e <calculateSPLQ31+0x412>
 8002486:	0018      	movs	r0, r3
 8002488:	40c8      	lsrs	r0, r1
 800248a:	0004      	movs	r4, r0
 800248c:	e00a      	b.n	80024a4 <calculateSPLQ31+0x428>
 800248e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002490:	2020      	movs	r0, #32
 8002492:	1a41      	subs	r1, r0, r1
 8002494:	0018      	movs	r0, r3
 8002496:	4088      	lsls	r0, r1
 8002498:	0001      	movs	r1, r0
 800249a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800249c:	0016      	movs	r6, r2
 800249e:	40c6      	lsrs	r6, r0
 80024a0:	0034      	movs	r4, r6
 80024a2:	430c      	orrs	r4, r1
 80024a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80024a6:	40cb      	lsrs	r3, r1
 80024a8:	001d      	movs	r5, r3
 80024aa:	2330      	movs	r3, #48	@ 0x30
 80024ac:	18fa      	adds	r2, r7, r3
 80024ae:	2194      	movs	r1, #148	@ 0x94
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	18d3      	adds	r3, r2, r3
 80024b8:	601c      	str	r4, [r3, #0]
 80024ba:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	187a      	adds	r2, r7, r1
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	2394      	movs	r3, #148	@ 0x94
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d9cd      	bls.n	800246c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 80024d0:	230f      	movs	r3, #15
 80024d2:	425d      	negs	r5, r3
 80024d4:	2305      	movs	r3, #5
 80024d6:	425e      	negs	r6, r3
 80024d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002604 <calculateSPLQ31+0x588>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b4a      	ldr	r3, [pc, #296]	@ (8002608 <calculateSPLQ31+0x58c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	21a0      	movs	r1, #160	@ 0xa0
 80024e6:	1879      	adds	r1, r7, r1
 80024e8:	6808      	ldr	r0, [r1, #0]
 80024ea:	6849      	ldr	r1, [r1, #4]
 80024ec:	4c47      	ldr	r4, [pc, #284]	@ (800260c <calculateSPLQ31+0x590>)
 80024ee:	9403      	str	r4, [sp, #12]
 80024f0:	4c47      	ldr	r4, [pc, #284]	@ (8002610 <calculateSPLQ31+0x594>)
 80024f2:	9402      	str	r4, [sp, #8]
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	9200      	str	r2, [sp, #0]
 80024f8:	0033      	movs	r3, r6
 80024fa:	002a      	movs	r2, r5
 80024fc:	f000 fa86 	bl	8002a0c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8002500:	2300      	movs	r3, #0
 8002502:	2290      	movs	r2, #144	@ 0x90
 8002504:	18ba      	adds	r2, r7, r2
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	e026      	b.n	8002558 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800250a:	2330      	movs	r3, #48	@ 0x30
 800250c:	18fa      	adds	r2, r7, r3
 800250e:	2490      	movs	r4, #144	@ 0x90
 8002510:	193b      	adds	r3, r7, r4
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	18d3      	adds	r3, r2, r3
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	230f      	movs	r3, #15
 800251e:	425d      	negs	r5, r3
 8002520:	2305      	movs	r3, #5
 8002522:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8002524:	193b      	adds	r3, r7, r4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	009a      	lsls	r2, r3, #2
 800252a:	4b3a      	ldr	r3, [pc, #232]	@ (8002614 <calculateSPLQ31+0x598>)
 800252c:	18d3      	adds	r3, r2, r3
 800252e:	193a      	adds	r2, r7, r4
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	0094      	lsls	r4, r2, #2
 8002534:	4a38      	ldr	r2, [pc, #224]	@ (8002618 <calculateSPLQ31+0x59c>)
 8002536:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8002538:	9203      	str	r2, [sp, #12]
 800253a:	9302      	str	r3, [sp, #8]
 800253c:	2300      	movs	r3, #0
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	0033      	movs	r3, r6
 8002546:	002a      	movs	r2, r5
 8002548:	f000 fa60 	bl	8002a0c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800254c:	2490      	movs	r4, #144	@ 0x90
 800254e:	193b      	adds	r3, r7, r4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	193a      	adds	r2, r7, r4
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	2390      	movs	r3, #144	@ 0x90
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b05      	cmp	r3, #5
 8002560:	d9d3      	bls.n	800250a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8002562:	4b2b      	ldr	r3, [pc, #172]	@ (8002610 <calculateSPLQ31+0x594>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b2d      	ldr	r3, [pc, #180]	@ (800261c <calculateSPLQ31+0x5a0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	18d2      	adds	r2, r2, r3
 800256c:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <calculateSPLQ31+0x5a0>)
 800256e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8002570:	4b26      	ldr	r3, [pc, #152]	@ (800260c <calculateSPLQ31+0x590>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b2a      	ldr	r3, [pc, #168]	@ (8002620 <calculateSPLQ31+0x5a4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	18d2      	adds	r2, r2, r3
 800257a:	4b29      	ldr	r3, [pc, #164]	@ (8002620 <calculateSPLQ31+0x5a4>)
 800257c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800257e:	2300      	movs	r3, #0
 8002580:	228c      	movs	r2, #140	@ 0x8c
 8002582:	18ba      	adds	r2, r7, r2
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e025      	b.n	80025d4 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 8002588:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <calculateSPLQ31+0x598>)
 800258a:	208c      	movs	r0, #140	@ 0x8c
 800258c:	183a      	adds	r2, r7, r0
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	58d2      	ldr	r2, [r2, r3]
 8002594:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <calculateSPLQ31+0x5a8>)
 8002596:	1839      	adds	r1, r7, r0
 8002598:	6809      	ldr	r1, [r1, #0]
 800259a:	0089      	lsls	r1, r1, #2
 800259c:	58cb      	ldr	r3, [r1, r3]
 800259e:	18d1      	adds	r1, r2, r3
 80025a0:	4b20      	ldr	r3, [pc, #128]	@ (8002624 <calculateSPLQ31+0x5a8>)
 80025a2:	183a      	adds	r2, r7, r0
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <calculateSPLQ31+0x59c>)
 80025ac:	183a      	adds	r2, r7, r0
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	58d2      	ldr	r2, [r2, r3]
 80025b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <calculateSPLQ31+0x5ac>)
 80025b6:	1839      	adds	r1, r7, r0
 80025b8:	6809      	ldr	r1, [r1, #0]
 80025ba:	0089      	lsls	r1, r1, #2
 80025bc:	58cb      	ldr	r3, [r1, r3]
 80025be:	18d1      	adds	r1, r2, r3
 80025c0:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <calculateSPLQ31+0x5ac>)
 80025c2:	183a      	adds	r2, r7, r0
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80025ca:	183b      	adds	r3, r7, r0
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	183a      	adds	r2, r7, r0
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	238c      	movs	r3, #140	@ 0x8c
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d9d4      	bls.n	8002588 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 80025de:	4b13      	ldr	r3, [pc, #76]	@ (800262c <calculateSPLQ31+0x5b0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <calculateSPLQ31+0x5b0>)
 80025e6:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 80025e8:	4b10      	ldr	r3, [pc, #64]	@ (800262c <calculateSPLQ31+0x5b0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d905      	bls.n	80025fc <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <calculateSPLQ31+0x5b4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <calculateSPLQ31+0x5b8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
    }
}
 80025fc:	46c0      	nop			@ (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b02f      	add	sp, #188	@ 0xbc
 8002602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002604:	20000008 	.word	0x20000008
 8002608:	2000000c 	.word	0x2000000c
 800260c:	200003e8 	.word	0x200003e8
 8002610:	200003e4 	.word	0x200003e4
 8002614:	200003ec 	.word	0x200003ec
 8002618:	20000404 	.word	0x20000404
 800261c:	20000e2c 	.word	0x20000e2c
 8002620:	20000e30 	.word	0x20000e30
 8002624:	20000e34 	.word	0x20000e34
 8002628:	20000e4c 	.word	0x20000e4c
 800262c:	20000e64 	.word	0x20000e64
 8002630:	200003db 	.word	0x200003db
 8002634:	200003d9 	.word	0x200003d9

08002638 <resetSPLstate>:

static void resetSPLstate(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <resetSPLstate+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8002644:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <resetSPLstate+0x50>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <resetSPLstate+0x54>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	e00c      	b.n	8002670 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <resetSPLstate+0x58>)
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	2100      	movs	r1, #0
 800265e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8002660:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <resetSPLstate+0x5c>)
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	2100      	movs	r1, #0
 8002668:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3301      	adds	r3, #1
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d9ef      	bls.n	8002656 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 8002676:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <resetSPLstate+0x60>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
}
 800267c:	46c0      	nop			@ (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000e2c 	.word	0x20000e2c
 8002688:	20000e30 	.word	0x20000e30
 800268c:	20000e64 	.word	0x20000e64
 8002690:	20000e34 	.word	0x20000e34
 8002694:	20000e4c 	.word	0x20000e4c
 8002698:	200003db 	.word	0x200003db

0800269c <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b090      	sub	sp, #64	@ 0x40
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	0019      	movs	r1, r3
 80026a8:	1dfb      	adds	r3, r7, #7
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	1dbb      	adds	r3, r7, #6
 80026ae:	1c0a      	adds	r2, r1, #0
 80026b0:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80026b2:	1dfb      	adds	r3, r7, #7
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 80026ba:	4b3b      	ldr	r3, [pc, #236]	@ (80027a8 <getFilteredMaxAmplitudeQ31+0x10c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
        lastData = 0;
 80026c0:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <getFilteredMaxAmplitudeQ31+0x110>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 80026ce:	2305      	movs	r3, #5
 80026d0:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80026d6:	e040      	b.n	800275a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 80026d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	18d3      	adds	r3, r2, r3
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e4:	409a      	lsls	r2, r3
 80026e6:	0013      	movs	r3, r2
 80026e8:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 80026ea:	4b30      	ldr	r3, [pc, #192]	@ (80027ac <getFilteredMaxAmplitudeQ31+0x110>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	425a      	negs	r2, r3
 80026f0:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <getFilteredMaxAmplitudeQ31+0x110>)
 80026f2:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 80026f4:	2418      	movs	r4, #24
 80026f6:	193a      	adds	r2, r7, r4
 80026f8:	492c      	ldr	r1, [pc, #176]	@ (80027ac <getFilteredMaxAmplitudeQ31+0x110>)
 80026fa:	231c      	movs	r3, #28
 80026fc:	18f8      	adds	r0, r7, r3
 80026fe:	2301      	movs	r3, #1
 8002700:	f004 f964 	bl	80069cc <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8002704:	2514      	movs	r5, #20
 8002706:	197a      	adds	r2, r7, r5
 8002708:	1939      	adds	r1, r7, r4
 800270a:	4829      	ldr	r0, [pc, #164]	@ (80027b0 <getFilteredMaxAmplitudeQ31+0x114>)
 800270c:	2301      	movs	r3, #1
 800270e:	f004 f92b 	bl	8006968 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8002712:	2410      	movs	r4, #16
 8002714:	193a      	adds	r2, r7, r4
 8002716:	4924      	ldr	r1, [pc, #144]	@ (80027a8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8002718:	4826      	ldr	r0, [pc, #152]	@ (80027b4 <getFilteredMaxAmplitudeQ31+0x118>)
 800271a:	2301      	movs	r3, #1
 800271c:	f004 f924 	bl	8006968 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8002720:	4a21      	ldr	r2, [pc, #132]	@ (80027a8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8002722:	1939      	adds	r1, r7, r4
 8002724:	1978      	adds	r0, r7, r5
 8002726:	2301      	movs	r3, #1
 8002728:	f004 f950 	bl	80069cc <arm_add_q31>

        lastData = fx;
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <getFilteredMaxAmplitudeQ31+0x110>)
 8002730:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8002732:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002738:	429a      	cmp	r2, r3
 800273a:	da03      	bge.n	8002744 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002742:	e007      	b.n	8002754 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8002744:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800274a:	429a      	cmp	r2, r3
 800274c:	dd02      	ble.n	8002754 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800274e:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8002754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002756:	3301      	adds	r3, #1
 8002758:	637b      	str	r3, [r7, #52]	@ 0x34
 800275a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	d3ba      	bcc.n	80026d8 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8002762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002764:	17da      	asrs	r2, r3, #31
 8002766:	189b      	adds	r3, r3, r2
 8002768:	4053      	eors	r3, r2
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800276c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800276e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8002770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002774:	4293      	cmp	r3, r2
 8002776:	d200      	bcs.n	800277a <getFilteredMaxAmplitudeQ31+0xde>
 8002778:	0013      	movs	r3, r2
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800277c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002780:	40da      	lsrs	r2, r3
 8002782:	0013      	movs	r3, r2
 8002784:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 8002786:	1dbb      	adds	r3, r7, #6
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <getFilteredMaxAmplitudeQ31+0x102>
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <getFilteredMaxAmplitudeQ31+0x11c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a3a      	ldr	r2, [r7, #32]
 8002794:	429a      	cmp	r2, r3
 8002796:	d902      	bls.n	800279e <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 8002798:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800279a:	6a3a      	ldr	r2, [r7, #32]
 800279c:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800279e:	6a3b      	ldr	r3, [r7, #32]
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b010      	add	sp, #64	@ 0x40
 80027a6:	bdb0      	pop	{r4, r5, r7, pc}
 80027a8:	20001268 	.word	0x20001268
 80027ac:	2000126c 	.word	0x2000126c
 80027b0:	080076a4 	.word	0x080076a4
 80027b4:	080076a8 	.word	0x080076a8
 80027b8:	200003e0 	.word	0x200003e0

080027bc <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 80027c8:	4913      	ldr	r1, [pc, #76]	@ (8002818 <floatToIntAndFrac2dp+0x5c>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7fe f93e 	bl	8000a4c <__aeabi_fmul>
 80027d0:	1c03      	adds	r3, r0, #0
 80027d2:	1c18      	adds	r0, r3, #0
 80027d4:	f004 fde8 	bl	80073a8 <roundf>
 80027d8:	1c03      	adds	r3, r0, #0
 80027da:	1c18      	adds	r0, r3, #0
 80027dc:	f7fd fda8 	bl	8000330 <__aeabi_f2uiz>
 80027e0:	0003      	movs	r3, r0
 80027e2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2164      	movs	r1, #100	@ 0x64
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fd fcc7 	bl	800017c <__udivsi3>
 80027ee:	0003      	movs	r3, r0
 80027f0:	001a      	movs	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2164      	movs	r1, #100	@ 0x64
 8002802:	434b      	muls	r3, r1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	b2da      	uxtb	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	701a      	strb	r2, [r3, #0]
}
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b006      	add	sp, #24
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	42c80000 	.word	0x42c80000

0800281c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8002828:	4914      	ldr	r1, [pc, #80]	@ (800287c <floatToIntAndFrac1dp+0x60>)
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7fe f90e 	bl	8000a4c <__aeabi_fmul>
 8002830:	1c03      	adds	r3, r0, #0
 8002832:	1c18      	adds	r0, r3, #0
 8002834:	f004 fdb8 	bl	80073a8 <roundf>
 8002838:	1c03      	adds	r3, r0, #0
 800283a:	1c18      	adds	r0, r3, #0
 800283c:	f7fd fd78 	bl	8000330 <__aeabi_f2uiz>
 8002840:	0003      	movs	r3, r0
 8002842:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	210a      	movs	r1, #10
 8002848:	0018      	movs	r0, r3
 800284a:	f7fd fc97 	bl	800017c <__udivsi3>
 800284e:	0003      	movs	r3, r0
 8002850:	001a      	movs	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	1c19      	adds	r1, r3, #0
 8002862:	0089      	lsls	r1, r1, #2
 8002864:	18cb      	adds	r3, r1, r3
 8002866:	18db      	adds	r3, r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	b2da      	uxtb	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	701a      	strb	r2, [r3, #0]
}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b006      	add	sp, #24
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	41200000 	.word	0x41200000

08002880 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fbde 	bl	8001050 <__aeabi_i2f>
 8002894:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	f7fe fbda 	bl	8001050 <__aeabi_i2f>
 800289c:	1c03      	adds	r3, r0, #0
 800289e:	4918      	ldr	r1, [pc, #96]	@ (8002900 <sumToIntAverage+0x80>)
 80028a0:	1c18      	adds	r0, r3, #0
 80028a2:	f7fd ffb3 	bl	800080c <__aeabi_fdiv>
 80028a6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80028a8:	1c19      	adds	r1, r3, #0
 80028aa:	1c20      	adds	r0, r4, #0
 80028ac:	f7fd fe24 	bl	80004f8 <__aeabi_fadd>
 80028b0:	1c03      	adds	r3, r0, #0
 80028b2:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80028b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028b6:	f7fe fc17 	bl	80010e8 <__aeabi_ui2f>
 80028ba:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80028bc:	1c19      	adds	r1, r3, #0
 80028be:	1c20      	adds	r0, r4, #0
 80028c0:	f7fd ffa4 	bl	800080c <__aeabi_fdiv>
 80028c4:	1c03      	adds	r3, r0, #0
 80028c6:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	2310      	movs	r3, #16
 80028d0:	18f9      	adds	r1, r7, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1c18      	adds	r0, r3, #0
 80028d6:	f7ff ffa1 	bl	800281c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2bff      	cmp	r3, #255	@ 0xff
 80028de:	d906      	bls.n	80028ee <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	22ff      	movs	r2, #255	@ 0xff
 80028e4:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2209      	movs	r2, #9
 80028ea:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 80028ec:	e003      	b.n	80028f6 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	701a      	strb	r2, [r3, #0]
}
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b007      	add	sp, #28
 80028fc:	bd90      	pop	{r4, r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	41200000 	.word	0x41200000

08002904 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	0612      	lsls	r2, r2, #24
 8002918:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a18      	ldr	r2, [pc, #96]	@ (8002980 <findMinMax+0x7c>)
 800291e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	e022      	b.n	800296c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	18d3      	adds	r3, r2, r3
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	da06      	bge.n	8002946 <findMinMax+0x42>
        {
            min[0] = array[i];
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	18d3      	adds	r3, r2, r3
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	18d3      	adds	r3, r2, r3
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	dd06      	ble.n	8002966 <findMinMax+0x62>
        {
            max[0] = array[i];
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	18d3      	adds	r3, r2, r3
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d3d8      	bcc.n	8002926 <findMinMax+0x22>
        }
    }
}
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	b006      	add	sp, #24
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	7fffffff 	.word	0x7fffffff

08002984 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <getPo2factor+0x1c>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <getPo2factor+0x2c>
    {
        return 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e00d      	b.n	80029c0 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	607b      	str	r3, [r7, #4]
        bitShift++;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3301      	adds	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d2f5      	bcs.n	80029a4 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b004      	add	sp, #16
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7fe fb86 	bl	80010e8 <__aeabi_ui2f>
 80029dc:	1c03      	adds	r3, r0, #0
 80029de:	1c19      	adds	r1, r3, #0
 80029e0:	68b8      	ldr	r0, [r7, #8]
 80029e2:	f7fe f833 	bl	8000a4c <__aeabi_fmul>
 80029e6:	1c03      	adds	r3, r0, #0
 80029e8:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	2310      	movs	r3, #16
 80029f2:	18f9      	adds	r1, r7, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	1c18      	adds	r0, r3, #0
 80029f8:	f7ff fee0 	bl	80027bc <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	801a      	strh	r2, [r3, #0]
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b006      	add	sp, #24
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60b8      	str	r0, [r7, #8]
 8002a14:	60f9      	str	r1, [r7, #12]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	68b8      	ldr	r0, [r7, #8]
 8002a20:	68f9      	ldr	r1, [r7, #12]
 8002a22:	f7fe fcf7 	bl	8001414 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	18d2      	adds	r2, r2, r3
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	18d2      	adds	r2, r2, r3
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	18d2      	adds	r2, r2, r3
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	18d2      	adds	r2, r2, r3
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8002a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7fe fd71 	bl	8001534 <correctIntFracNumber>
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b004      	add	sp, #16
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	e019      	b.n	8002aa4 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	18d3      	adds	r3, r2, r3
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	3201      	adds	r2, #1
 8002a80:	0052      	lsls	r2, r2, #1
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	188a      	adds	r2, r1, r2
 8002a86:	8812      	ldrh	r2, [r2, #0]
 8002a88:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8002a94:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8002a96:	601a      	str	r2, [r3, #0]
        outCount++;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3e1      	bcc.n	8002a70 <decodeI2SdataLch+0x16>
    }
}
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b006      	add	sp, #24
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abc:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <HAL_MspInit+0x24>)
 8002abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_MspInit+0x24>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <HAL_MspInit+0x24>)
 8002aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <HAL_MspInit+0x24>)
 8002ace:	2180      	movs	r1, #128	@ 0x80
 8002ad0:	0549      	lsls	r1, r1, #21
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000

08002ae0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b089      	sub	sp, #36	@ 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	240c      	movs	r4, #12
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	0018      	movs	r0, r3
 8002aee:	2314      	movs	r3, #20
 8002af0:	001a      	movs	r2, r3
 8002af2:	2100      	movs	r1, #0
 8002af4:	f003 ffda 	bl	8006aac <memset>
  if(hi2s->Instance==SPI2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb4 <HAL_I2S_MspInit+0xd4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d154      	bne.n	8002bac <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b02:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <HAL_I2S_MspInit+0xd8>)
 8002b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b06:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb8 <HAL_I2S_MspInit+0xd8>)
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	01c9      	lsls	r1, r1, #7
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <HAL_I2S_MspInit+0xd8>)
 8002b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b14:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <HAL_I2S_MspInit+0xd8>)
 8002b16:	2102      	movs	r1, #2
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b1c:	4b26      	ldr	r3, [pc, #152]	@ (8002bb8 <HAL_I2S_MspInit+0xd8>)
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	22b0      	movs	r2, #176	@ 0xb0
 8002b2c:	0212      	lsls	r2, r2, #8
 8002b2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	0021      	movs	r1, r4
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2202      	movs	r2, #2
 8002b36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2200      	movs	r2, #0
 8002b42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <HAL_I2S_MspInit+0xdc>)
 8002b4e:	0019      	movs	r1, r3
 8002b50:	0010      	movs	r0, r2
 8002b52:	f000 fc93 	bl	800347c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8002b56:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b58:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <HAL_I2S_MspInit+0xe4>)
 8002b5a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b5e:	2202      	movs	r2, #2
 8002b60:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b62:	4b17      	ldr	r3, [pc, #92]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b68:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b6e:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b70:	2280      	movs	r2, #128	@ 0x80
 8002b72:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	0052      	lsls	r2, r2, #1
 8002b7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b7c:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b7e:	2280      	movs	r2, #128	@ 0x80
 8002b80:	00d2      	lsls	r2, r2, #3
 8002b82:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002b84:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b86:	2220      	movs	r2, #32
 8002b88:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 fa78 	bl	8003088 <HAL_DMA_Init>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8002b9c:	f7fe ffc8 	bl	8001b30 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a07      	ldr	r2, [pc, #28]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002ba4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ba6:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_I2S_MspInit+0xe0>)
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b009      	add	sp, #36	@ 0x24
 8002bb2:	bd90      	pop	{r4, r7, pc}
 8002bb4:	40003800 	.word	0x40003800
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	50000400 	.word	0x50000400
 8002bc0:	200000c8 	.word	0x200000c8
 8002bc4:	40020044 	.word	0x40020044

08002bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a06      	ldr	r2, [pc, #24]	@ (8002bf0 <HAL_TIM_Base_MspInit+0x28>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d105      	bne.n	8002be6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c>)
 8002bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c>)
 8002be0:	2110      	movs	r1, #16
 8002be2:	430a      	orrs	r2, r1
 8002be4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b002      	add	sp, #8
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			@ (mov r8, r8)
 8002bf0:	40001000 	.word	0x40001000
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	240c      	movs	r4, #12
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	0018      	movs	r0, r3
 8002c06:	2314      	movs	r3, #20
 8002c08:	001a      	movs	r2, r3
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	f003 ff4e 	bl	8006aac <memset>
  if(huart->Instance==USART1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <HAL_UART_MspInit+0x80>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d12a      	bne.n	8002c70 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c1a:	4b18      	ldr	r3, [pc, #96]	@ (8002c7c <HAL_UART_MspInit+0x84>)
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c1e:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <HAL_UART_MspInit+0x84>)
 8002c20:	2180      	movs	r1, #128	@ 0x80
 8002c22:	01c9      	lsls	r1, r1, #7
 8002c24:	430a      	orrs	r2, r1
 8002c26:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c28:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <HAL_UART_MspInit+0x84>)
 8002c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <HAL_UART_MspInit+0x84>)
 8002c2e:	2101      	movs	r1, #1
 8002c30:	430a      	orrs	r2, r1
 8002c32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <HAL_UART_MspInit+0x84>)
 8002c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c40:	193b      	adds	r3, r7, r4
 8002c42:	22c0      	movs	r2, #192	@ 0xc0
 8002c44:	00d2      	lsls	r2, r2, #3
 8002c46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	0021      	movs	r1, r4
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2204      	movs	r2, #4
 8002c60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	187a      	adds	r2, r7, r1
 8002c64:	23a0      	movs	r3, #160	@ 0xa0
 8002c66:	05db      	lsls	r3, r3, #23
 8002c68:	0011      	movs	r1, r2
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 fc06 	bl	800347c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b009      	add	sp, #36	@ 0x24
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	40013800 	.word	0x40013800
 8002c7c:	40021000 	.word	0x40021000

08002c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	errorHandler(__func__, __LINE__, __FILE__);
 8002c84:	4a03      	ldr	r2, [pc, #12]	@ (8002c94 <NMI_Handler+0x14>)
 8002c86:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <NMI_Handler+0x18>)
 8002c88:	2149      	movs	r1, #73	@ 0x49
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7fe fca2 	bl	80015d4 <errorHandler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	e7fd      	b.n	8002c90 <NMI_Handler+0x10>
 8002c94:	080074bc 	.word	0x080074bc
 8002c98:	080076c4 	.word	0x080076c4

08002c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	errorHandler(__func__, __LINE__, __FILE__);
 8002ca0:	4a03      	ldr	r2, [pc, #12]	@ (8002cb0 <HardFault_Handler+0x14>)
 8002ca2:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <HardFault_Handler+0x18>)
 8002ca4:	2158      	movs	r1, #88	@ 0x58
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7fe fc94 	bl	80015d4 <errorHandler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	e7fd      	b.n	8002cac <HardFault_Handler+0x10>
 8002cb0:	080074bc 	.word	0x080074bc
 8002cb4:	080076d0 	.word	0x080076d0

08002cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVC_IRQn 0 */
	errorHandler(__func__, __LINE__, __FILE__);
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <SVC_Handler+0x18>)
 8002cbe:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <SVC_Handler+0x1c>)
 8002cc0:	2167      	movs	r1, #103	@ 0x67
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7fe fc86 	bl	80015d4 <errorHandler>
  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002cc8:	46c0      	nop			@ (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			@ (mov r8, r8)
 8002cd0:	080074bc 	.word	0x080074bc
 8002cd4:	080076e4 	.word	0x080076e4

08002cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	errorHandler(__func__, __LINE__, __FILE__);
 8002cdc:	4a04      	ldr	r2, [pc, #16]	@ (8002cf0 <PendSV_Handler+0x18>)
 8002cde:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <PendSV_Handler+0x1c>)
 8002ce0:	2174      	movs	r1, #116	@ 0x74
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f7fe fc76 	bl	80015d4 <errorHandler>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce8:	46c0      	nop			@ (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	080074bc 	.word	0x080074bc
 8002cf4:	080076f0 	.word	0x080076f0

08002cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfc:	f000 f8ca 	bl	8002e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002d0c:	4b03      	ldr	r3, [pc, #12]	@ (8002d1c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 fad8 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002d14:	46c0      	nop			@ (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	200000c8 	.word	0x200000c8

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	@ (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	18d3      	adds	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f003 feb4 	bl	8006abc <__errno>
 8002d54:	0003      	movs	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	425b      	negs	r3, r3
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	18d2      	adds	r2, r2, r3
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <_sbrk+0x64>)
 8002d70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b006      	add	sp, #24
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20005000 	.word	0x20005000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	20001270 	.word	0x20001270
 8002d88:	200013c0 	.word	0x200013c0

08002d8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002d98:	480d      	ldr	r0, [pc, #52]	@ (8002dd0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002d9a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d9c:	f7ff fff6 	bl	8002d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da0:	480c      	ldr	r0, [pc, #48]	@ (8002dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002da2:	490d      	ldr	r1, [pc, #52]	@ (8002dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <LoopForever+0xe>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da8:	e002      	b.n	8002db0 <LoopCopyDataInit>

08002daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dae:	3304      	adds	r3, #4

08002db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db4:	d3f9      	bcc.n	8002daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db6:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db8:	4c0a      	ldr	r4, [pc, #40]	@ (8002de4 <LoopForever+0x16>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dbc:	e001      	b.n	8002dc2 <LoopFillZerobss>

08002dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc0:	3204      	adds	r2, #4

08002dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc4:	d3fb      	bcc.n	8002dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dc6:	f003 fe7f 	bl	8006ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dca:	f7fe fc2b 	bl	8001624 <main>

08002dce <LoopForever>:

LoopForever:
    b LoopForever
 8002dce:	e7fe      	b.n	8002dce <LoopForever>
   ldr   r0, =_estack
 8002dd0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ddc:	08007ba0 	.word	0x08007ba0
  ldr r2, =_sbss
 8002de0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002de4:	200013c0 	.word	0x200013c0

08002de8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC1_COMP_IRQHandler>
	...

08002dec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002df2:	1dfb      	adds	r3, r7, #7
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_Init+0x3c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_Init+0x3c>)
 8002dfe:	2140      	movs	r1, #64	@ 0x40
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e04:	2003      	movs	r0, #3
 8002e06:	f000 f811 	bl	8002e2c <HAL_InitTick>
 8002e0a:	1e03      	subs	r3, r0, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e001      	b.n	8002e1a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e16:	f7ff fe4f 	bl	8002ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e1a:	1dfb      	adds	r3, r7, #7
 8002e1c:	781b      	ldrb	r3, [r3, #0]
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	40022000 	.word	0x40022000

08002e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <HAL_InitTick+0x5c>)
 8002e36:	681c      	ldr	r4, [r3, #0]
 8002e38:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <HAL_InitTick+0x60>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	23fa      	movs	r3, #250	@ 0xfa
 8002e40:	0098      	lsls	r0, r3, #2
 8002e42:	f7fd f99b 	bl	800017c <__udivsi3>
 8002e46:	0003      	movs	r3, r0
 8002e48:	0019      	movs	r1, r3
 8002e4a:	0020      	movs	r0, r4
 8002e4c:	f7fd f996 	bl	800017c <__udivsi3>
 8002e50:	0003      	movs	r3, r0
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 f90b 	bl	800306e <HAL_SYSTICK_Config>
 8002e58:	1e03      	subs	r3, r0, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e00f      	b.n	8002e80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d80b      	bhi.n	8002e7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	2301      	movs	r3, #1
 8002e6a:	425b      	negs	r3, r3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f000 f8d8 	bl	8003024 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_InitTick+0x64>)
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b003      	add	sp, #12
 8002e86:	bd90      	pop	{r4, r7, pc}
 8002e88:	20000014 	.word	0x20000014
 8002e8c:	2000001c 	.word	0x2000001c
 8002e90:	20000018 	.word	0x20000018

08002e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_IncTick+0x1c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_IncTick+0x20>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	18d2      	adds	r2, r2, r3
 8002ea4:	4b03      	ldr	r3, [pc, #12]	@ (8002eb4 <HAL_IncTick+0x20>)
 8002ea6:	601a      	str	r2, [r3, #0]
}
 8002ea8:	46c0      	nop			@ (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	2000001c 	.word	0x2000001c
 8002eb4:	20001274 	.word	0x20001274

08002eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	@ (8002ec8 <HAL_GetTick+0x10>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	20001274 	.word	0x20001274

08002ecc <__NVIC_EnableIRQ>:
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	1dfb      	adds	r3, r7, #7
 8002ed6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ede:	d809      	bhi.n	8002ef4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	231f      	movs	r3, #31
 8002ee8:	401a      	ands	r2, r3
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <__NVIC_EnableIRQ+0x30>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	4091      	lsls	r1, r2
 8002ef0:	000a      	movs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	0002      	movs	r2, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f0e:	1dfb      	adds	r3, r7, #7
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f14:	d828      	bhi.n	8002f68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f16:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd4 <__NVIC_SetPriority+0xd4>)
 8002f18:	1dfb      	adds	r3, r7, #7
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	33c0      	adds	r3, #192	@ 0xc0
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	589b      	ldr	r3, [r3, r2]
 8002f26:	1dfa      	adds	r2, r7, #7
 8002f28:	7812      	ldrb	r2, [r2, #0]
 8002f2a:	0011      	movs	r1, r2
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	400a      	ands	r2, r1
 8002f30:	00d2      	lsls	r2, r2, #3
 8002f32:	21ff      	movs	r1, #255	@ 0xff
 8002f34:	4091      	lsls	r1, r2
 8002f36:	000a      	movs	r2, r1
 8002f38:	43d2      	mvns	r2, r2
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	019b      	lsls	r3, r3, #6
 8002f42:	22ff      	movs	r2, #255	@ 0xff
 8002f44:	401a      	ands	r2, r3
 8002f46:	1dfb      	adds	r3, r7, #7
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	4003      	ands	r3, r0
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f54:	481f      	ldr	r0, [pc, #124]	@ (8002fd4 <__NVIC_SetPriority+0xd4>)
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b25b      	sxtb	r3, r3
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	33c0      	adds	r3, #192	@ 0xc0
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f66:	e031      	b.n	8002fcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f68:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd8 <__NVIC_SetPriority+0xd8>)
 8002f6a:	1dfb      	adds	r3, r7, #7
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	230f      	movs	r3, #15
 8002f72:	400b      	ands	r3, r1
 8002f74:	3b08      	subs	r3, #8
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3306      	adds	r3, #6
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	18d3      	adds	r3, r2, r3
 8002f7e:	3304      	adds	r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1dfa      	adds	r2, r7, #7
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	0011      	movs	r1, r2
 8002f88:	2203      	movs	r2, #3
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	00d2      	lsls	r2, r2, #3
 8002f8e:	21ff      	movs	r1, #255	@ 0xff
 8002f90:	4091      	lsls	r1, r2
 8002f92:	000a      	movs	r2, r1
 8002f94:	43d2      	mvns	r2, r2
 8002f96:	401a      	ands	r2, r3
 8002f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	22ff      	movs	r2, #255	@ 0xff
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	2303      	movs	r3, #3
 8002faa:	4003      	ands	r3, r0
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb0:	4809      	ldr	r0, [pc, #36]	@ (8002fd8 <__NVIC_SetPriority+0xd8>)
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	001c      	movs	r4, r3
 8002fb8:	230f      	movs	r3, #15
 8002fba:	4023      	ands	r3, r4
 8002fbc:	3b08      	subs	r3, #8
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	3306      	adds	r3, #6
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	18c3      	adds	r3, r0, r3
 8002fc8:	3304      	adds	r3, #4
 8002fca:	601a      	str	r2, [r3, #0]
}
 8002fcc:	46c0      	nop			@ (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b003      	add	sp, #12
 8002fd2:	bd90      	pop	{r4, r7, pc}
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1e5a      	subs	r2, r3, #1
 8002fe8:	2380      	movs	r3, #128	@ 0x80
 8002fea:	045b      	lsls	r3, r3, #17
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d301      	bcc.n	8002ff4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e010      	b.n	8003016 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <SysTick_Config+0x44>)
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	425b      	negs	r3, r3
 8003000:	2103      	movs	r1, #3
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff ff7c 	bl	8002f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003008:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <SysTick_Config+0x44>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300e:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <SysTick_Config+0x44>)
 8003010:	2207      	movs	r2, #7
 8003012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b002      	add	sp, #8
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	e000e010 	.word	0xe000e010

08003024 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	210f      	movs	r1, #15
 8003030:	187b      	adds	r3, r7, r1
 8003032:	1c02      	adds	r2, r0, #0
 8003034:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	187b      	adds	r3, r7, r1
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b25b      	sxtb	r3, r3
 800303e:	0011      	movs	r1, r2
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff ff5d 	bl	8002f00 <__NVIC_SetPriority>
}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	0002      	movs	r2, r0
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305a:	1dfb      	adds	r3, r7, #7
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b25b      	sxtb	r3, r3
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff ff33 	bl	8002ecc <__NVIC_EnableIRQ>
}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff ffaf 	bl	8002fdc <SysTick_Config>
 800307e:	0003      	movs	r3, r0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e061      	b.n	800315e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a32      	ldr	r2, [pc, #200]	@ (8003168 <HAL_DMA_Init+0xe0>)
 80030a0:	4694      	mov	ip, r2
 80030a2:	4463      	add	r3, ip
 80030a4:	2114      	movs	r1, #20
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7fd f868 	bl	800017c <__udivsi3>
 80030ac:	0003      	movs	r3, r0
 80030ae:	009a      	lsls	r2, r3, #2
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a2d      	ldr	r2, [pc, #180]	@ (800316c <HAL_DMA_Init+0xe4>)
 80030b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2225      	movs	r2, #37	@ 0x25
 80030be:	2102      	movs	r1, #2
 80030c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a28      	ldr	r2, [pc, #160]	@ (8003170 <HAL_DMA_Init+0xe8>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	2380      	movs	r3, #128	@ 0x80
 800310e:	01db      	lsls	r3, r3, #7
 8003110:	429a      	cmp	r2, r3
 8003112:	d018      	beq.n	8003146 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003114:	4b17      	ldr	r3, [pc, #92]	@ (8003174 <HAL_DMA_Init+0xec>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311c:	211c      	movs	r1, #28
 800311e:	400b      	ands	r3, r1
 8003120:	210f      	movs	r1, #15
 8003122:	4099      	lsls	r1, r3
 8003124:	000b      	movs	r3, r1
 8003126:	43d9      	mvns	r1, r3
 8003128:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <HAL_DMA_Init+0xec>)
 800312a:	400a      	ands	r2, r1
 800312c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800312e:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_DMA_Init+0xec>)
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313a:	201c      	movs	r0, #28
 800313c:	4003      	ands	r3, r0
 800313e:	409a      	lsls	r2, r3
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <HAL_DMA_Init+0xec>)
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2225      	movs	r2, #37	@ 0x25
 8003150:	2101      	movs	r1, #1
 8003152:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	@ 0x24
 8003158:	2100      	movs	r1, #0
 800315a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	bffdfff8 	.word	0xbffdfff8
 800316c:	40020000 	.word	0x40020000
 8003170:	ffff800f 	.word	0xffff800f
 8003174:	400200a8 	.word	0x400200a8

08003178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003186:	2317      	movs	r3, #23
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2224      	movs	r2, #36	@ 0x24
 8003192:	5c9b      	ldrb	r3, [r3, r2]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_DMA_Start_IT+0x24>
 8003198:	2302      	movs	r3, #2
 800319a:	e04f      	b.n	800323c <HAL_DMA_Start_IT+0xc4>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2224      	movs	r2, #36	@ 0x24
 80031a0:	2101      	movs	r1, #1
 80031a2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2225      	movs	r2, #37	@ 0x25
 80031a8:	5c9b      	ldrb	r3, [r3, r2]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d13a      	bne.n	8003226 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2225      	movs	r2, #37	@ 0x25
 80031b4:	2102      	movs	r1, #2
 80031b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2101      	movs	r1, #1
 80031ca:	438a      	bics	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f923 	bl	8003420 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	210e      	movs	r1, #14
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e00f      	b.n	8003214 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2104      	movs	r1, #4
 8003200:	438a      	bics	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	210a      	movs	r1, #10
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2101      	movs	r1, #1
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e007      	b.n	8003236 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2224      	movs	r2, #36	@ 0x24
 800322a:	2100      	movs	r1, #0
 800322c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800322e:	2317      	movs	r3, #23
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003236:	2317      	movs	r3, #23
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b006      	add	sp, #24
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324c:	230f      	movs	r3, #15
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2225      	movs	r2, #37	@ 0x25
 8003258:	5c9b      	ldrb	r3, [r3, r2]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d008      	beq.n	8003272 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2204      	movs	r2, #4
 8003264:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2224      	movs	r2, #36	@ 0x24
 800326a:	2100      	movs	r1, #0
 800326c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e024      	b.n	80032bc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	210e      	movs	r1, #14
 800327e:	438a      	bics	r2, r1
 8003280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2101      	movs	r1, #1
 800328e:	438a      	bics	r2, r1
 8003290:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	221c      	movs	r2, #28
 8003298:	401a      	ands	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	2101      	movs	r1, #1
 80032a0:	4091      	lsls	r1, r2
 80032a2:	000a      	movs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2225      	movs	r2, #37	@ 0x25
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2224      	movs	r2, #36	@ 0x24
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]

    return status;
 80032b6:	230f      	movs	r3, #15
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b004      	add	sp, #16
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e0:	221c      	movs	r2, #28
 80032e2:	4013      	ands	r3, r2
 80032e4:	2204      	movs	r2, #4
 80032e6:	409a      	lsls	r2, r3
 80032e8:	0013      	movs	r3, r2
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	d026      	beq.n	800333e <HAL_DMA_IRQHandler+0x7a>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2204      	movs	r2, #4
 80032f4:	4013      	ands	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2220      	movs	r2, #32
 8003300:	4013      	ands	r3, r2
 8003302:	d107      	bne.n	8003314 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2104      	movs	r1, #4
 8003310:	438a      	bics	r2, r1
 8003312:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003318:	221c      	movs	r2, #28
 800331a:	401a      	ands	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	2104      	movs	r1, #4
 8003322:	4091      	lsls	r1, r2
 8003324:	000a      	movs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332c:	2b00      	cmp	r3, #0
 800332e:	d100      	bne.n	8003332 <HAL_DMA_IRQHandler+0x6e>
 8003330:	e071      	b.n	8003416 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	0010      	movs	r0, r2
 800333a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800333c:	e06b      	b.n	8003416 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	221c      	movs	r2, #28
 8003344:	4013      	ands	r3, r2
 8003346:	2202      	movs	r2, #2
 8003348:	409a      	lsls	r2, r3
 800334a:	0013      	movs	r3, r2
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4013      	ands	r3, r2
 8003350:	d02d      	beq.n	80033ae <HAL_DMA_IRQHandler+0xea>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2202      	movs	r2, #2
 8003356:	4013      	ands	r3, r2
 8003358:	d029      	beq.n	80033ae <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2220      	movs	r2, #32
 8003362:	4013      	ands	r3, r2
 8003364:	d10b      	bne.n	800337e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	210a      	movs	r1, #10
 8003372:	438a      	bics	r2, r1
 8003374:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2225      	movs	r2, #37	@ 0x25
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	221c      	movs	r2, #28
 8003384:	401a      	ands	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	2102      	movs	r1, #2
 800338c:	4091      	lsls	r1, r2
 800338e:	000a      	movs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2224      	movs	r2, #36	@ 0x24
 8003396:	2100      	movs	r1, #0
 8003398:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d039      	beq.n	8003416 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	0010      	movs	r0, r2
 80033aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033ac:	e033      	b.n	8003416 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	221c      	movs	r2, #28
 80033b4:	4013      	ands	r3, r2
 80033b6:	2208      	movs	r2, #8
 80033b8:	409a      	lsls	r2, r3
 80033ba:	0013      	movs	r3, r2
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4013      	ands	r3, r2
 80033c0:	d02a      	beq.n	8003418 <HAL_DMA_IRQHandler+0x154>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2208      	movs	r2, #8
 80033c6:	4013      	ands	r3, r2
 80033c8:	d026      	beq.n	8003418 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	210e      	movs	r1, #14
 80033d6:	438a      	bics	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033de:	221c      	movs	r2, #28
 80033e0:	401a      	ands	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	2101      	movs	r1, #1
 80033e8:	4091      	lsls	r1, r2
 80033ea:	000a      	movs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2225      	movs	r2, #37	@ 0x25
 80033f8:	2101      	movs	r1, #1
 80033fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	@ 0x24
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	0010      	movs	r0, r2
 8003414:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	46c0      	nop			@ (mov r8, r8)
}
 800341a:	46bd      	mov	sp, r7
 800341c:	b004      	add	sp, #16
 800341e:	bd80      	pop	{r7, pc}

08003420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	221c      	movs	r2, #28
 8003434:	401a      	ands	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	2101      	movs	r1, #1
 800343c:	4091      	lsls	r1, r2
 800343e:	000a      	movs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b10      	cmp	r3, #16
 8003450:	d108      	bne.n	8003464 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003462:	e007      	b.n	8003474 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]
}
 8003474:	46c0      	nop			@ (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003492:	e155      	b.n	8003740 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4091      	lsls	r1, r2
 800349e:	000a      	movs	r2, r1
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d100      	bne.n	80034ac <HAL_GPIO_Init+0x30>
 80034aa:	e146      	b.n	800373a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2203      	movs	r2, #3
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d005      	beq.n	80034c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2203      	movs	r2, #3
 80034be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d130      	bne.n	8003526 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	409a      	lsls	r2, r3
 80034d2:	0013      	movs	r3, r2
 80034d4:	43da      	mvns	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	409a      	lsls	r2, r3
 80034e6:	0013      	movs	r3, r2
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034fa:	2201      	movs	r2, #1
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
 8003500:	0013      	movs	r3, r2
 8003502:	43da      	mvns	r2, r3
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	2201      	movs	r2, #1
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
 8003518:	0013      	movs	r3, r2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2203      	movs	r2, #3
 800352c:	4013      	ands	r3, r2
 800352e:	2b03      	cmp	r3, #3
 8003530:	d017      	beq.n	8003562 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	409a      	lsls	r2, r3
 8003540:	0013      	movs	r3, r2
 8003542:	43da      	mvns	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	409a      	lsls	r2, r3
 8003554:	0013      	movs	r3, r2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2203      	movs	r2, #3
 8003568:	4013      	ands	r3, r2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d123      	bne.n	80035b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	08da      	lsrs	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3208      	adds	r2, #8
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	58d3      	ldr	r3, [r2, r3]
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2207      	movs	r2, #7
 8003580:	4013      	ands	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	409a      	lsls	r2, r3
 8003588:	0013      	movs	r3, r2
 800358a:	43da      	mvns	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2107      	movs	r1, #7
 800359a:	400b      	ands	r3, r1
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	409a      	lsls	r2, r3
 80035a0:	0013      	movs	r3, r2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	08da      	lsrs	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3208      	adds	r2, #8
 80035b0:	0092      	lsls	r2, r2, #2
 80035b2:	6939      	ldr	r1, [r7, #16]
 80035b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	409a      	lsls	r2, r3
 80035c4:	0013      	movs	r3, r2
 80035c6:	43da      	mvns	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2203      	movs	r2, #3
 80035d4:	401a      	ands	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	0013      	movs	r3, r2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	23c0      	movs	r3, #192	@ 0xc0
 80035f0:	029b      	lsls	r3, r3, #10
 80035f2:	4013      	ands	r3, r2
 80035f4:	d100      	bne.n	80035f8 <HAL_GPIO_Init+0x17c>
 80035f6:	e0a0      	b.n	800373a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f8:	4b57      	ldr	r3, [pc, #348]	@ (8003758 <HAL_GPIO_Init+0x2dc>)
 80035fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035fc:	4b56      	ldr	r3, [pc, #344]	@ (8003758 <HAL_GPIO_Init+0x2dc>)
 80035fe:	2101      	movs	r1, #1
 8003600:	430a      	orrs	r2, r1
 8003602:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003604:	4a55      	ldr	r2, [pc, #340]	@ (800375c <HAL_GPIO_Init+0x2e0>)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	3302      	adds	r3, #2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	589b      	ldr	r3, [r3, r2]
 8003610:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2203      	movs	r2, #3
 8003616:	4013      	ands	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	220f      	movs	r2, #15
 800361c:	409a      	lsls	r2, r3
 800361e:	0013      	movs	r3, r2
 8003620:	43da      	mvns	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	23a0      	movs	r3, #160	@ 0xa0
 800362c:	05db      	lsls	r3, r3, #23
 800362e:	429a      	cmp	r2, r3
 8003630:	d01f      	beq.n	8003672 <HAL_GPIO_Init+0x1f6>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a4a      	ldr	r2, [pc, #296]	@ (8003760 <HAL_GPIO_Init+0x2e4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d019      	beq.n	800366e <HAL_GPIO_Init+0x1f2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a49      	ldr	r2, [pc, #292]	@ (8003764 <HAL_GPIO_Init+0x2e8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_GPIO_Init+0x1ee>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a48      	ldr	r2, [pc, #288]	@ (8003768 <HAL_GPIO_Init+0x2ec>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00d      	beq.n	8003666 <HAL_GPIO_Init+0x1ea>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a47      	ldr	r2, [pc, #284]	@ (800376c <HAL_GPIO_Init+0x2f0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <HAL_GPIO_Init+0x1e6>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a46      	ldr	r2, [pc, #280]	@ (8003770 <HAL_GPIO_Init+0x2f4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d101      	bne.n	800365e <HAL_GPIO_Init+0x1e2>
 800365a:	2305      	movs	r3, #5
 800365c:	e00a      	b.n	8003674 <HAL_GPIO_Init+0x1f8>
 800365e:	2306      	movs	r3, #6
 8003660:	e008      	b.n	8003674 <HAL_GPIO_Init+0x1f8>
 8003662:	2304      	movs	r3, #4
 8003664:	e006      	b.n	8003674 <HAL_GPIO_Init+0x1f8>
 8003666:	2303      	movs	r3, #3
 8003668:	e004      	b.n	8003674 <HAL_GPIO_Init+0x1f8>
 800366a:	2302      	movs	r3, #2
 800366c:	e002      	b.n	8003674 <HAL_GPIO_Init+0x1f8>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_GPIO_Init+0x1f8>
 8003672:	2300      	movs	r3, #0
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	2103      	movs	r1, #3
 8003678:	400a      	ands	r2, r1
 800367a:	0092      	lsls	r2, r2, #2
 800367c:	4093      	lsls	r3, r2
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003684:	4935      	ldr	r1, [pc, #212]	@ (800375c <HAL_GPIO_Init+0x2e0>)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003692:	4b38      	ldr	r3, [pc, #224]	@ (8003774 <HAL_GPIO_Init+0x2f8>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	43da      	mvns	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	2380      	movs	r3, #128	@ 0x80
 80036a8:	035b      	lsls	r3, r3, #13
 80036aa:	4013      	ands	r3, r2
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003774 <HAL_GPIO_Init+0x2f8>)
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_GPIO_Init+0x2f8>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	039b      	lsls	r3, r3, #14
 80036d4:	4013      	ands	r3, r2
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036e0:	4b24      	ldr	r3, [pc, #144]	@ (8003774 <HAL_GPIO_Init+0x2f8>)
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80036e6:	4b23      	ldr	r3, [pc, #140]	@ (8003774 <HAL_GPIO_Init+0x2f8>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	2380      	movs	r3, #128	@ 0x80
 80036fc:	029b      	lsls	r3, r3, #10
 80036fe:	4013      	ands	r3, r2
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800370a:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <HAL_GPIO_Init+0x2f8>)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003710:	4b18      	ldr	r3, [pc, #96]	@ (8003774 <HAL_GPIO_Init+0x2f8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	43da      	mvns	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	2380      	movs	r3, #128	@ 0x80
 8003726:	025b      	lsls	r3, r3, #9
 8003728:	4013      	ands	r3, r2
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003734:	4b0f      	ldr	r3, [pc, #60]	@ (8003774 <HAL_GPIO_Init+0x2f8>)
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	40da      	lsrs	r2, r3
 8003748:	1e13      	subs	r3, r2, #0
 800374a:	d000      	beq.n	800374e <HAL_GPIO_Init+0x2d2>
 800374c:	e6a2      	b.n	8003494 <HAL_GPIO_Init+0x18>
  }
}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	46c0      	nop			@ (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b006      	add	sp, #24
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	40010000 	.word	0x40010000
 8003760:	50000400 	.word	0x50000400
 8003764:	50000800 	.word	0x50000800
 8003768:	50000c00 	.word	0x50000c00
 800376c:	50001000 	.word	0x50001000
 8003770:	50001c00 	.word	0x50001c00
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	0008      	movs	r0, r1
 8003782:	0011      	movs	r1, r2
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	1c02      	adds	r2, r0, #0
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	1c7b      	adds	r3, r7, #1
 800378c:	1c0a      	adds	r2, r1, #0
 800378e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003790:	1c7b      	adds	r3, r7, #1
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003798:	1cbb      	adds	r3, r7, #2
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80037a0:	e003      	b.n	80037aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80037a2:	1cbb      	adds	r3, r7, #2
 80037a4:	881a      	ldrh	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b002      	add	sp, #8
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0e1      	b.n	800398a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2235      	movs	r2, #53	@ 0x35
 80037ca:	5c9b      	ldrb	r3, [r3, r2]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d107      	bne.n	80037e2 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2234      	movs	r2, #52	@ 0x34
 80037d6:	2100      	movs	r1, #0
 80037d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	0018      	movs	r0, r3
 80037de:	f7ff f97f 	bl	8002ae0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2235      	movs	r2, #53	@ 0x35
 80037e6:	2102      	movs	r1, #2
 80037e8:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4967      	ldr	r1, [pc, #412]	@ (8003994 <HAL_I2S_Init+0x1e0>)
 80037f6:	400a      	ands	r2, r1
 80037f8:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2202      	movs	r2, #2
 8003800:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d073      	beq.n	80038f2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003812:	2310      	movs	r3, #16
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e001      	b.n	800381c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003818:	2320      	movs	r3, #32
 800381a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b20      	cmp	r3, #32
 8003822:	d802      	bhi.n	800382a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800382a:	f000 fff1 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 800382e:	0003      	movs	r3, r0
 8003830:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	2380      	movs	r3, #128	@ 0x80
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	429a      	cmp	r2, r3
 800383c:	d131      	bne.n	80038a2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	0019      	movs	r1, r3
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7fc fc95 	bl	800017c <__udivsi3>
 8003852:	0003      	movs	r3, r0
 8003854:	001a      	movs	r2, r3
 8003856:	0013      	movs	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	189b      	adds	r3, r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	001a      	movs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	0019      	movs	r1, r3
 8003866:	0010      	movs	r0, r2
 8003868:	f7fc fc88 	bl	800017c <__udivsi3>
 800386c:	0003      	movs	r3, r0
 800386e:	3305      	adds	r3, #5
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	e02a      	b.n	80038ca <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	0019      	movs	r1, r3
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7fc fc7e 	bl	800017c <__udivsi3>
 8003880:	0003      	movs	r3, r0
 8003882:	001a      	movs	r2, r3
 8003884:	0013      	movs	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	189b      	adds	r3, r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	001a      	movs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	0019      	movs	r1, r3
 8003894:	0010      	movs	r0, r2
 8003896:	f7fc fc71 	bl	800017c <__udivsi3>
 800389a:	0003      	movs	r3, r0
 800389c:	3305      	adds	r3, #5
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	e013      	b.n	80038ca <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038a2:	6979      	ldr	r1, [r7, #20]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7fc fc69 	bl	800017c <__udivsi3>
 80038aa:	0003      	movs	r3, r0
 80038ac:	001a      	movs	r2, r3
 80038ae:	0013      	movs	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	189b      	adds	r3, r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	001a      	movs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	0019      	movs	r1, r3
 80038be:	0010      	movs	r0, r2
 80038c0:	f7fc fc5c 	bl	800017c <__udivsi3>
 80038c4:	0003      	movs	r3, r0
 80038c6:	3305      	adds	r3, #5
 80038c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	210a      	movs	r1, #10
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7fc fc54 	bl	800017c <__udivsi3>
 80038d4:	0003      	movs	r3, r0
 80038d6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2201      	movs	r2, #1
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	e003      	b.n	80038fa <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80038f2:	2302      	movs	r3, #2
 80038f4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d902      	bls.n	8003906 <HAL_I2S_Init+0x152>
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2bff      	cmp	r3, #255	@ 0xff
 8003904:	d907      	bls.n	8003916 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390a:	2210      	movs	r2, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e039      	b.n	800398a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	431a      	orrs	r2, r3
 800391e:	0011      	movs	r1, r2
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	430a      	orrs	r2, r1
 8003928:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <HAL_I2S_Init+0x1e0>)
 8003932:	401a      	ands	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4319      	orrs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	4319      	orrs	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	430b      	orrs	r3, r1
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2180      	movs	r1, #128	@ 0x80
 8003952:	0109      	lsls	r1, r1, #4
 8003954:	430a      	orrs	r2, r1
 8003956:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b30      	cmp	r3, #48	@ 0x30
 800395e:	d003      	beq.n	8003968 <HAL_I2S_Init+0x1b4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2bb0      	cmp	r3, #176	@ 0xb0
 8003966:	d108      	bne.n	800397a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2180      	movs	r1, #128	@ 0x80
 8003974:	0149      	lsls	r1, r1, #5
 8003976:	430a      	orrs	r2, r1
 8003978:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2235      	movs	r2, #53	@ 0x35
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b008      	add	sp, #32
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	fffff040 	.word	0xfffff040

08003998 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	1dbb      	adds	r3, r7, #6
 80039a4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_I2S_Receive_DMA+0x1c>
 80039ac:	1dbb      	adds	r3, r7, #6
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0a6      	b.n	8003b06 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2234      	movs	r2, #52	@ 0x34
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_I2S_Receive_DMA+0x30>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e09e      	b.n	8003b06 <HAL_I2S_Receive_DMA+0x16e>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2234      	movs	r2, #52	@ 0x34
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2235      	movs	r2, #53	@ 0x35
 80039d4:	5c9b      	ldrb	r3, [r3, r2]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d005      	beq.n	80039e8 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2234      	movs	r2, #52	@ 0x34
 80039e0:	2100      	movs	r1, #0
 80039e2:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
 80039e6:	e08e      	b.n	8003b06 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2235      	movs	r2, #53	@ 0x35
 80039ec:	2104      	movs	r1, #4
 80039ee:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	2207      	movs	r2, #7
 8003a04:	4013      	ands	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d002      	beq.n	8003a14 <HAL_I2S_Receive_DMA+0x7c>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d10c      	bne.n	8003a2e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8003a14:	1dbb      	adds	r3, r7, #6
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	18db      	adds	r3, r3, r3
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8003a20:	1dbb      	adds	r3, r7, #6
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	18db      	adds	r3, r3, r3
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a2c:	e007      	b.n	8003a3e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1dba      	adds	r2, r7, #6
 8003a32:	8812      	ldrh	r2, [r2, #0]
 8003a34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1dba      	adds	r2, r7, #6
 8003a3a:	8812      	ldrh	r2, [r2, #0]
 8003a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	4a33      	ldr	r2, [pc, #204]	@ (8003b10 <HAL_I2S_Receive_DMA+0x178>)
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	4a32      	ldr	r2, [pc, #200]	@ (8003b14 <HAL_I2S_Receive_DMA+0x17c>)
 8003a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	4a31      	ldr	r2, [pc, #196]	@ (8003b18 <HAL_I2S_Receive_DMA+0x180>)
 8003a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	23c0      	movs	r3, #192	@ 0xc0
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	401a      	ands	r2, r3
 8003a62:	23c0      	movs	r3, #192	@ 0xc0
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10a      	bne.n	8003a80 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a96:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003a98:	f7ff fb6e 	bl	8003178 <HAL_DMA_Start_IT>
 8003a9c:	1e03      	subs	r3, r0, #0
 8003a9e:	d00f      	beq.n	8003ac0 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2235      	movs	r2, #53	@ 0x35
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2234      	movs	r2, #52	@ 0x34
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e022      	b.n	8003b06 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	2380      	movs	r3, #128	@ 0x80
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4013      	ands	r3, r2
 8003acc:	d108      	bne.n	8003ae0 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2180      	movs	r1, #128	@ 0x80
 8003ada:	00c9      	lsls	r1, r1, #3
 8003adc:	430a      	orrs	r2, r1
 8003ade:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d107      	bne.n	8003afc <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2101      	movs	r1, #1
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2234      	movs	r2, #52	@ 0x34
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b006      	add	sp, #24
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	08003cf9 	.word	0x08003cf9
 8003b14:	08003cb5 	.word	0x08003cb5
 8003b18:	08003d17 	.word	0x08003d17

08003b1c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b24:	2317      	movs	r3, #23
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d003      	beq.n	8003b40 <HAL_I2S_DMAStop+0x24>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d158      	bne.n	8003bf2 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff fb79 	bl	8003244 <HAL_DMA_Abort>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8003b62:	2317      	movs	r3, #23
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	2364      	movs	r3, #100	@ 0x64
 8003b6e:	2201      	movs	r2, #1
 8003b70:	2102      	movs	r1, #2
 8003b72:	f000 f8f7 	bl	8003d64 <I2S_WaitFlagStateUntilTimeout>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d00d      	beq.n	8003b96 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7e:	2201      	movs	r2, #1
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2235      	movs	r2, #53	@ 0x35
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8003b8e:	2317      	movs	r3, #23
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	2364      	movs	r3, #100	@ 0x64
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2180      	movs	r1, #128	@ 0x80
 8003b9e:	f000 f8e1 	bl	8003d64 <I2S_WaitFlagStateUntilTimeout>
 8003ba2:	1e03      	subs	r3, r0, #0
 8003ba4:	d00d      	beq.n	8003bc2 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003baa:	2201      	movs	r2, #1
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2235      	movs	r2, #53	@ 0x35
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8003bba:	2317      	movs	r3, #23
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4938      	ldr	r1, [pc, #224]	@ (8003cb0 <HAL_I2S_DMAStop+0x194>)
 8003bce:	400a      	ands	r2, r1
 8003bd0:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2102      	movs	r1, #2
 8003bec:	438a      	bics	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	e053      	b.n	8003c9a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	23c0      	movs	r3, #192	@ 0xc0
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d005      	beq.n	8003c0a <HAL_I2S_DMAStop+0xee>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d147      	bne.n	8003c9a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d010      	beq.n	8003c34 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	0018      	movs	r0, r3
 8003c18:	f7ff fb14 	bl	8003244 <HAL_DMA_Abort>
 8003c1c:	1e03      	subs	r3, r0, #0
 8003c1e:	d009      	beq.n	8003c34 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	2208      	movs	r2, #8
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8003c2c:	2317      	movs	r3, #23
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	491c      	ldr	r1, [pc, #112]	@ (8003cb0 <HAL_I2S_DMAStop+0x194>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2101      	movs	r1, #1
 8003c66:	438a      	bics	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	2380      	movs	r3, #128	@ 0x80
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d10e      	bne.n	8003c94 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7a:	2240      	movs	r2, #64	@ 0x40
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2235      	movs	r2, #53	@ 0x35
 8003c86:	2101      	movs	r1, #1
 8003c88:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8003c8a:	2317      	movs	r3, #23
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e002      	b.n	8003c9a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2235      	movs	r2, #53	@ 0x35
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8003ca2:	2317      	movs	r3, #23
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	781b      	ldrb	r3, [r3, #0]
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b006      	add	sp, #24
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	fffffbff 	.word	0xfffffbff

08003cb4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10e      	bne.n	8003ce8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	438a      	bics	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2235      	movs	r2, #53	@ 0x35
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7fe f96b 	bl	8001fc6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b004      	add	sp, #16
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fe f951 	bl	8001fb0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b004      	add	sp, #16
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2103      	movs	r1, #3
 8003d30:	438a      	bics	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2235      	movs	r2, #53	@ 0x35
 8003d44:	2101      	movs	r1, #1
 8003d46:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f7fe f97c 	bl	8002054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003d5c:	46c0      	nop			@ (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	1dfb      	adds	r3, r7, #7
 8003d72:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d74:	f7ff f8a0 	bl	8002eb8 <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003d7c:	e017      	b.n	8003dae <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	d014      	beq.n	8003dae <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003d84:	f7ff f898 	bl	8002eb8 <HAL_GetTick>
 8003d88:	0002      	movs	r2, r0
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d902      	bls.n	8003d9a <I2S_WaitFlagStateUntilTimeout+0x36>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2235      	movs	r2, #53	@ 0x35
 8003d9e:	2101      	movs	r1, #1
 8003da0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2234      	movs	r2, #52	@ 0x34
 8003da6:	2100      	movs	r1, #0
 8003da8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e00f      	b.n	8003dce <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	4013      	ands	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	425a      	negs	r2, r3
 8003dbe:	4153      	adcs	r3, r2
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	1dfb      	adds	r3, r7, #7
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d1d8      	bne.n	8003d7e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b006      	add	sp, #24
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b5b0      	push	{r4, r5, r7, lr}
 8003dda:	b08a      	sub	sp, #40	@ 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f000 fbbf 	bl	800456a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dec:	4bc9      	ldr	r3, [pc, #804]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	220c      	movs	r2, #12
 8003df2:	4013      	ands	r3, r2
 8003df4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df6:	4bc7      	ldr	r3, [pc, #796]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	2380      	movs	r3, #128	@ 0x80
 8003dfc:	025b      	lsls	r3, r3, #9
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2201      	movs	r2, #1
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <HAL_RCC_OscConfig+0x36>
 8003e0c:	e07e      	b.n	8003f0c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d007      	beq.n	8003e24 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d112      	bne.n	8003e40 <HAL_RCC_OscConfig+0x68>
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	2380      	movs	r3, #128	@ 0x80
 8003e1e:	025b      	lsls	r3, r3, #9
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d10d      	bne.n	8003e40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	4bbb      	ldr	r3, [pc, #748]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	@ 0x80
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d100      	bne.n	8003e32 <HAL_RCC_OscConfig+0x5a>
 8003e30:	e06b      	b.n	8003f0a <HAL_RCC_OscConfig+0x132>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d167      	bne.n	8003f0a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f000 fb95 	bl	800456a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	2380      	movs	r3, #128	@ 0x80
 8003e46:	025b      	lsls	r3, r3, #9
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x84>
 8003e4c:	4bb1      	ldr	r3, [pc, #708]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4bb0      	ldr	r3, [pc, #704]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e52:	2180      	movs	r1, #128	@ 0x80
 8003e54:	0249      	lsls	r1, r1, #9
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e027      	b.n	8003eac <HAL_RCC_OscConfig+0xd4>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	23a0      	movs	r3, #160	@ 0xa0
 8003e62:	02db      	lsls	r3, r3, #11
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10e      	bne.n	8003e86 <HAL_RCC_OscConfig+0xae>
 8003e68:	4baa      	ldr	r3, [pc, #680]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4ba9      	ldr	r3, [pc, #676]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e6e:	2180      	movs	r1, #128	@ 0x80
 8003e70:	02c9      	lsls	r1, r1, #11
 8003e72:	430a      	orrs	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	4ba7      	ldr	r3, [pc, #668]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4ba6      	ldr	r3, [pc, #664]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e7c:	2180      	movs	r1, #128	@ 0x80
 8003e7e:	0249      	lsls	r1, r1, #9
 8003e80:	430a      	orrs	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e012      	b.n	8003eac <HAL_RCC_OscConfig+0xd4>
 8003e86:	4ba3      	ldr	r3, [pc, #652]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4ba2      	ldr	r3, [pc, #648]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e8c:	49a2      	ldr	r1, [pc, #648]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	4ba0      	ldr	r3, [pc, #640]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	2380      	movs	r3, #128	@ 0x80
 8003e98:	025b      	lsls	r3, r3, #9
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4b9c      	ldr	r3, [pc, #624]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b9b      	ldr	r3, [pc, #620]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003ea6:	499d      	ldr	r1, [pc, #628]	@ (800411c <HAL_RCC_OscConfig+0x344>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7ff f800 	bl	8002eb8 <HAL_GetTick>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ebc:	e009      	b.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebe:	f7fe fffb 	bl	8002eb8 <HAL_GetTick>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	@ 0x64
 8003eca:	d902      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	f000 fb4c 	bl	800456a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ed2:	4b90      	ldr	r3, [pc, #576]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	2380      	movs	r3, #128	@ 0x80
 8003ed8:	029b      	lsls	r3, r3, #10
 8003eda:	4013      	ands	r3, r2
 8003edc:	d0ef      	beq.n	8003ebe <HAL_RCC_OscConfig+0xe6>
 8003ede:	e015      	b.n	8003f0c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe ffea 	bl	8002eb8 <HAL_GetTick>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eea:	f7fe ffe5 	bl	8002eb8 <HAL_GetTick>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b64      	cmp	r3, #100	@ 0x64
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e336      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003efc:	4b85      	ldr	r3, [pc, #532]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2380      	movs	r3, #128	@ 0x80
 8003f02:	029b      	lsls	r3, r3, #10
 8003f04:	4013      	ands	r3, r2
 8003f06:	d1f0      	bne.n	8003eea <HAL_RCC_OscConfig+0x112>
 8003f08:	e000      	b.n	8003f0c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2202      	movs	r2, #2
 8003f12:	4013      	ands	r3, r2
 8003f14:	d100      	bne.n	8003f18 <HAL_RCC_OscConfig+0x140>
 8003f16:	e099      	b.n	800404c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	2220      	movs	r2, #32
 8003f22:	4013      	ands	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003f26:	4b7b      	ldr	r3, [pc, #492]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003f2c:	2120      	movs	r1, #32
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	2220      	movs	r2, #32
 8003f36:	4393      	bics	r3, r2
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d13e      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x1ec>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d13b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003f4c:	4b71      	ldr	r3, [pc, #452]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2204      	movs	r2, #4
 8003f52:	4013      	ands	r3, r2
 8003f54:	d004      	beq.n	8003f60 <HAL_RCC_OscConfig+0x188>
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e304      	b.n	800456a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b6c      	ldr	r3, [pc, #432]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a6e      	ldr	r2, [pc, #440]	@ (8004120 <HAL_RCC_OscConfig+0x348>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	0019      	movs	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	021a      	lsls	r2, r3, #8
 8003f70:	4b68      	ldr	r3, [pc, #416]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f76:	4b67      	ldr	r3, [pc, #412]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2209      	movs	r2, #9
 8003f7c:	4393      	bics	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	4b64      	ldr	r3, [pc, #400]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f88:	f000 fc42 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8003f8c:	0001      	movs	r1, r0
 8003f8e:	4b61      	ldr	r3, [pc, #388]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	220f      	movs	r2, #15
 8003f96:	4013      	ands	r3, r2
 8003f98:	4a62      	ldr	r2, [pc, #392]	@ (8004124 <HAL_RCC_OscConfig+0x34c>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	000a      	movs	r2, r1
 8003f9e:	40da      	lsrs	r2, r3
 8003fa0:	4b61      	ldr	r3, [pc, #388]	@ (8004128 <HAL_RCC_OscConfig+0x350>)
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003fa4:	4b61      	ldr	r3, [pc, #388]	@ (800412c <HAL_RCC_OscConfig+0x354>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2513      	movs	r5, #19
 8003faa:	197c      	adds	r4, r7, r5
 8003fac:	0018      	movs	r0, r3
 8003fae:	f7fe ff3d 	bl	8002e2c <HAL_InitTick>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003fb6:	197b      	adds	r3, r7, r5
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d046      	beq.n	800404c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003fbe:	197b      	adds	r3, r7, r5
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	e2d2      	b.n	800456a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d027      	beq.n	800401a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003fca:	4b52      	ldr	r3, [pc, #328]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2209      	movs	r2, #9
 8003fd0:	4393      	bics	r3, r2
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	4b4f      	ldr	r3, [pc, #316]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe ff6c 	bl	8002eb8 <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe6:	f7fe ff67 	bl	8002eb8 <HAL_GetTick>
 8003fea:	0002      	movs	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e2b8      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff8:	4b46      	ldr	r3, [pc, #280]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	4013      	ands	r3, r2
 8004000:	d0f1      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004002:	4b44      	ldr	r3, [pc, #272]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a46      	ldr	r2, [pc, #280]	@ (8004120 <HAL_RCC_OscConfig+0x348>)
 8004008:	4013      	ands	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	021a      	lsls	r2, r3, #8
 8004012:	4b40      	ldr	r3, [pc, #256]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	e018      	b.n	800404c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401a:	4b3e      	ldr	r3, [pc, #248]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b3d      	ldr	r3, [pc, #244]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8004020:	2101      	movs	r1, #1
 8004022:	438a      	bics	r2, r1
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fe ff47 	bl	8002eb8 <HAL_GetTick>
 800402a:	0003      	movs	r3, r0
 800402c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004030:	f7fe ff42 	bl	8002eb8 <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e293      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004042:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2204      	movs	r2, #4
 8004048:	4013      	ands	r3, r2
 800404a:	d1f1      	bne.n	8004030 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2210      	movs	r2, #16
 8004052:	4013      	ands	r3, r2
 8004054:	d100      	bne.n	8004058 <HAL_RCC_OscConfig+0x280>
 8004056:	e0a2      	b.n	800419e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d140      	bne.n	80040e0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800405e:	4b2d      	ldr	r3, [pc, #180]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	2380      	movs	r3, #128	@ 0x80
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4013      	ands	r3, r2
 8004068:	d005      	beq.n	8004076 <HAL_RCC_OscConfig+0x29e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e279      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004076:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4a2d      	ldr	r2, [pc, #180]	@ (8004130 <HAL_RCC_OscConfig+0x358>)
 800407c:	4013      	ands	r3, r2
 800407e:	0019      	movs	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004084:	4b23      	ldr	r3, [pc, #140]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800408a:	4b22      	ldr	r3, [pc, #136]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	0a19      	lsrs	r1, r3, #8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	061a      	lsls	r2, r3, #24
 8004098:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	0b5b      	lsrs	r3, r3, #13
 80040a4:	3301      	adds	r3, #1
 80040a6:	2280      	movs	r2, #128	@ 0x80
 80040a8:	0212      	lsls	r2, r2, #8
 80040aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80040ac:	4b19      	ldr	r3, [pc, #100]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	210f      	movs	r1, #15
 80040b4:	400b      	ands	r3, r1
 80040b6:	491b      	ldr	r1, [pc, #108]	@ (8004124 <HAL_RCC_OscConfig+0x34c>)
 80040b8:	5ccb      	ldrb	r3, [r1, r3]
 80040ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <HAL_RCC_OscConfig+0x350>)
 80040be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <HAL_RCC_OscConfig+0x354>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2513      	movs	r5, #19
 80040c6:	197c      	adds	r4, r7, r5
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7fe feaf 	bl	8002e2c <HAL_InitTick>
 80040ce:	0003      	movs	r3, r0
 80040d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80040d2:	197b      	adds	r3, r7, r5
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d061      	beq.n	800419e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80040da:	197b      	adds	r3, r7, r5
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	e244      	b.n	800456a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d040      	beq.n	800416a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <HAL_RCC_OscConfig+0x33c>)
 80040ee:	2180      	movs	r1, #128	@ 0x80
 80040f0:	0049      	lsls	r1, r1, #1
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fe fedf 	bl	8002eb8 <HAL_GetTick>
 80040fa:	0003      	movs	r3, r0
 80040fc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040fe:	e019      	b.n	8004134 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004100:	f7fe feda 	bl	8002eb8 <HAL_GetTick>
 8004104:	0002      	movs	r2, r0
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d912      	bls.n	8004134 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e22b      	b.n	800456a <HAL_RCC_OscConfig+0x792>
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	40021000 	.word	0x40021000
 8004118:	fffeffff 	.word	0xfffeffff
 800411c:	fffbffff 	.word	0xfffbffff
 8004120:	ffffe0ff 	.word	0xffffe0ff
 8004124:	08007700 	.word	0x08007700
 8004128:	20000014 	.word	0x20000014
 800412c:	20000018 	.word	0x20000018
 8004130:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004134:	4bca      	ldr	r3, [pc, #808]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	2380      	movs	r3, #128	@ 0x80
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4013      	ands	r3, r2
 800413e:	d0df      	beq.n	8004100 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004140:	4bc7      	ldr	r3, [pc, #796]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4ac7      	ldr	r2, [pc, #796]	@ (8004464 <HAL_RCC_OscConfig+0x68c>)
 8004146:	4013      	ands	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800414e:	4bc4      	ldr	r3, [pc, #784]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004150:	430a      	orrs	r2, r1
 8004152:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004154:	4bc2      	ldr	r3, [pc, #776]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	0a19      	lsrs	r1, r3, #8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	061a      	lsls	r2, r3, #24
 8004162:	4bbf      	ldr	r3, [pc, #764]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	e019      	b.n	800419e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800416a:	4bbd      	ldr	r3, [pc, #756]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4bbc      	ldr	r3, [pc, #752]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004170:	49bd      	ldr	r1, [pc, #756]	@ (8004468 <HAL_RCC_OscConfig+0x690>)
 8004172:	400a      	ands	r2, r1
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7fe fe9f 	bl	8002eb8 <HAL_GetTick>
 800417a:	0003      	movs	r3, r0
 800417c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004180:	f7fe fe9a 	bl	8002eb8 <HAL_GetTick>
 8004184:	0002      	movs	r2, r0
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e1eb      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004192:	4bb3      	ldr	r3, [pc, #716]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	2380      	movs	r3, #128	@ 0x80
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4013      	ands	r3, r2
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2208      	movs	r2, #8
 80041a4:	4013      	ands	r3, r2
 80041a6:	d036      	beq.n	8004216 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d019      	beq.n	80041e4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b0:	4bab      	ldr	r3, [pc, #684]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80041b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041b4:	4baa      	ldr	r3, [pc, #680]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80041b6:	2101      	movs	r1, #1
 80041b8:	430a      	orrs	r2, r1
 80041ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041bc:	f7fe fe7c 	bl	8002eb8 <HAL_GetTick>
 80041c0:	0003      	movs	r3, r0
 80041c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fe fe77 	bl	8002eb8 <HAL_GetTick>
 80041ca:	0002      	movs	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1c8      	b.n	800456a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80041da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041dc:	2202      	movs	r2, #2
 80041de:	4013      	ands	r3, r2
 80041e0:	d0f1      	beq.n	80041c6 <HAL_RCC_OscConfig+0x3ee>
 80041e2:	e018      	b.n	8004216 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e4:	4b9e      	ldr	r3, [pc, #632]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80041e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041e8:	4b9d      	ldr	r3, [pc, #628]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	438a      	bics	r2, r1
 80041ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f0:	f7fe fe62 	bl	8002eb8 <HAL_GetTick>
 80041f4:	0003      	movs	r3, r0
 80041f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fe fe5d 	bl	8002eb8 <HAL_GetTick>
 80041fe:	0002      	movs	r2, r0
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1ae      	b.n	800456a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800420c:	4b94      	ldr	r3, [pc, #592]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 800420e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004210:	2202      	movs	r2, #2
 8004212:	4013      	ands	r3, r2
 8004214:	d1f1      	bne.n	80041fa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2204      	movs	r2, #4
 800421c:	4013      	ands	r3, r2
 800421e:	d100      	bne.n	8004222 <HAL_RCC_OscConfig+0x44a>
 8004220:	e0ae      	b.n	8004380 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2023      	movs	r0, #35	@ 0x23
 8004224:	183b      	adds	r3, r7, r0
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b8d      	ldr	r3, [pc, #564]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 800422c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800422e:	2380      	movs	r3, #128	@ 0x80
 8004230:	055b      	lsls	r3, r3, #21
 8004232:	4013      	ands	r3, r2
 8004234:	d109      	bne.n	800424a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	4b8a      	ldr	r3, [pc, #552]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800423a:	4b89      	ldr	r3, [pc, #548]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 800423c:	2180      	movs	r1, #128	@ 0x80
 800423e:	0549      	lsls	r1, r1, #21
 8004240:	430a      	orrs	r2, r1
 8004242:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004244:	183b      	adds	r3, r7, r0
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424a:	4b88      	ldr	r3, [pc, #544]	@ (800446c <HAL_RCC_OscConfig+0x694>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	2380      	movs	r3, #128	@ 0x80
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4013      	ands	r3, r2
 8004254:	d11a      	bne.n	800428c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004256:	4b85      	ldr	r3, [pc, #532]	@ (800446c <HAL_RCC_OscConfig+0x694>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b84      	ldr	r3, [pc, #528]	@ (800446c <HAL_RCC_OscConfig+0x694>)
 800425c:	2180      	movs	r1, #128	@ 0x80
 800425e:	0049      	lsls	r1, r1, #1
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004264:	f7fe fe28 	bl	8002eb8 <HAL_GetTick>
 8004268:	0003      	movs	r3, r0
 800426a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fe fe23 	bl	8002eb8 <HAL_GetTick>
 8004272:	0002      	movs	r2, r0
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b64      	cmp	r3, #100	@ 0x64
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e174      	b.n	800456a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	4b7a      	ldr	r3, [pc, #488]	@ (800446c <HAL_RCC_OscConfig+0x694>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2380      	movs	r3, #128	@ 0x80
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4013      	ands	r3, r2
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	429a      	cmp	r2, r3
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4d0>
 8004298:	4b71      	ldr	r3, [pc, #452]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 800429a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800429c:	4b70      	ldr	r3, [pc, #448]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 800429e:	2180      	movs	r1, #128	@ 0x80
 80042a0:	0049      	lsls	r1, r1, #1
 80042a2:	430a      	orrs	r2, r1
 80042a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80042a6:	e031      	b.n	800430c <HAL_RCC_OscConfig+0x534>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10c      	bne.n	80042ca <HAL_RCC_OscConfig+0x4f2>
 80042b0:	4b6b      	ldr	r3, [pc, #428]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042b6:	496c      	ldr	r1, [pc, #432]	@ (8004468 <HAL_RCC_OscConfig+0x690>)
 80042b8:	400a      	ands	r2, r1
 80042ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80042bc:	4b68      	ldr	r3, [pc, #416]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042c0:	4b67      	ldr	r3, [pc, #412]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042c2:	496b      	ldr	r1, [pc, #428]	@ (8004470 <HAL_RCC_OscConfig+0x698>)
 80042c4:	400a      	ands	r2, r1
 80042c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80042c8:	e020      	b.n	800430c <HAL_RCC_OscConfig+0x534>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	23a0      	movs	r3, #160	@ 0xa0
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d10e      	bne.n	80042f4 <HAL_RCC_OscConfig+0x51c>
 80042d6:	4b62      	ldr	r3, [pc, #392]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042da:	4b61      	ldr	r3, [pc, #388]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042dc:	2180      	movs	r1, #128	@ 0x80
 80042de:	00c9      	lsls	r1, r1, #3
 80042e0:	430a      	orrs	r2, r1
 80042e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80042e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042e8:	4b5d      	ldr	r3, [pc, #372]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042ea:	2180      	movs	r1, #128	@ 0x80
 80042ec:	0049      	lsls	r1, r1, #1
 80042ee:	430a      	orrs	r2, r1
 80042f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0x534>
 80042f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042f8:	4b59      	ldr	r3, [pc, #356]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80042fa:	495b      	ldr	r1, [pc, #364]	@ (8004468 <HAL_RCC_OscConfig+0x690>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8004300:	4b57      	ldr	r3, [pc, #348]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004302:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004304:	4b56      	ldr	r3, [pc, #344]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004306:	495a      	ldr	r1, [pc, #360]	@ (8004470 <HAL_RCC_OscConfig+0x698>)
 8004308:	400a      	ands	r2, r1
 800430a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004314:	f7fe fdd0 	bl	8002eb8 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800431c:	e009      	b.n	8004332 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431e:	f7fe fdcb 	bl	8002eb8 <HAL_GetTick>
 8004322:	0002      	movs	r2, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	4a52      	ldr	r2, [pc, #328]	@ (8004474 <HAL_RCC_OscConfig+0x69c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e11b      	b.n	800456a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004332:	4b4b      	ldr	r3, [pc, #300]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004334:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4013      	ands	r3, r2
 800433c:	d0ef      	beq.n	800431e <HAL_RCC_OscConfig+0x546>
 800433e:	e014      	b.n	800436a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004340:	f7fe fdba 	bl	8002eb8 <HAL_GetTick>
 8004344:	0003      	movs	r3, r0
 8004346:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004348:	e009      	b.n	800435e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fe fdb5 	bl	8002eb8 <HAL_GetTick>
 800434e:	0002      	movs	r2, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	4a47      	ldr	r2, [pc, #284]	@ (8004474 <HAL_RCC_OscConfig+0x69c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e105      	b.n	800456a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800435e:	4b40      	ldr	r3, [pc, #256]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4013      	ands	r3, r2
 8004368:	d1ef      	bne.n	800434a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800436a:	2323      	movs	r3, #35	@ 0x23
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	4b3a      	ldr	r3, [pc, #232]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004376:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004378:	4b39      	ldr	r3, [pc, #228]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 800437a:	493f      	ldr	r1, [pc, #252]	@ (8004478 <HAL_RCC_OscConfig+0x6a0>)
 800437c:	400a      	ands	r2, r1
 800437e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2220      	movs	r2, #32
 8004386:	4013      	ands	r3, r2
 8004388:	d049      	beq.n	800441e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d026      	beq.n	80043e0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004392:	4b33      	ldr	r3, [pc, #204]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	4b32      	ldr	r3, [pc, #200]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004398:	2101      	movs	r1, #1
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	4b30      	ldr	r3, [pc, #192]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80043a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80043a4:	2101      	movs	r1, #1
 80043a6:	430a      	orrs	r2, r1
 80043a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80043aa:	4b34      	ldr	r3, [pc, #208]	@ (800447c <HAL_RCC_OscConfig+0x6a4>)
 80043ac:	6a1a      	ldr	r2, [r3, #32]
 80043ae:	4b33      	ldr	r3, [pc, #204]	@ (800447c <HAL_RCC_OscConfig+0x6a4>)
 80043b0:	2180      	movs	r1, #128	@ 0x80
 80043b2:	0189      	lsls	r1, r1, #6
 80043b4:	430a      	orrs	r2, r1
 80043b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe fd7e 	bl	8002eb8 <HAL_GetTick>
 80043bc:	0003      	movs	r3, r0
 80043be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043c2:	f7fe fd79 	bl	8002eb8 <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0ca      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043d4:	4b22      	ldr	r3, [pc, #136]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2202      	movs	r2, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	d0f1      	beq.n	80043c2 <HAL_RCC_OscConfig+0x5ea>
 80043de:	e01e      	b.n	800441e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80043e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 80043e6:	2101      	movs	r1, #1
 80043e8:	438a      	bics	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	4b23      	ldr	r3, [pc, #140]	@ (800447c <HAL_RCC_OscConfig+0x6a4>)
 80043ee:	6a1a      	ldr	r2, [r3, #32]
 80043f0:	4b22      	ldr	r3, [pc, #136]	@ (800447c <HAL_RCC_OscConfig+0x6a4>)
 80043f2:	4923      	ldr	r1, [pc, #140]	@ (8004480 <HAL_RCC_OscConfig+0x6a8>)
 80043f4:	400a      	ands	r2, r1
 80043f6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fe fd5e 	bl	8002eb8 <HAL_GetTick>
 80043fc:	0003      	movs	r3, r0
 80043fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004402:	f7fe fd59 	bl	8002eb8 <HAL_GetTick>
 8004406:	0002      	movs	r2, r0
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0aa      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004414:	4b12      	ldr	r3, [pc, #72]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2202      	movs	r2, #2
 800441a:	4013      	ands	r3, r2
 800441c:	d1f1      	bne.n	8004402 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	d100      	bne.n	8004428 <HAL_RCC_OscConfig+0x650>
 8004426:	e09f      	b.n	8004568 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d100      	bne.n	8004430 <HAL_RCC_OscConfig+0x658>
 800442e:	e078      	b.n	8004522 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	2b02      	cmp	r3, #2
 8004436:	d159      	bne.n	80044ec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b08      	ldr	r3, [pc, #32]	@ (8004460 <HAL_RCC_OscConfig+0x688>)
 800443e:	4911      	ldr	r1, [pc, #68]	@ (8004484 <HAL_RCC_OscConfig+0x6ac>)
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fe fd38 	bl	8002eb8 <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800444c:	e01c      	b.n	8004488 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444e:	f7fe fd33 	bl	8002eb8 <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d915      	bls.n	8004488 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e084      	b.n	800456a <HAL_RCC_OscConfig+0x792>
 8004460:	40021000 	.word	0x40021000
 8004464:	ffff1fff 	.word	0xffff1fff
 8004468:	fffffeff 	.word	0xfffffeff
 800446c:	40007000 	.word	0x40007000
 8004470:	fffffbff 	.word	0xfffffbff
 8004474:	00001388 	.word	0x00001388
 8004478:	efffffff 	.word	0xefffffff
 800447c:	40010000 	.word	0x40010000
 8004480:	ffffdfff 	.word	0xffffdfff
 8004484:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004488:	4b3a      	ldr	r3, [pc, #232]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2380      	movs	r3, #128	@ 0x80
 800448e:	049b      	lsls	r3, r3, #18
 8004490:	4013      	ands	r3, r2
 8004492:	d1dc      	bne.n	800444e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004494:	4b37      	ldr	r3, [pc, #220]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a37      	ldr	r2, [pc, #220]	@ (8004578 <HAL_RCC_OscConfig+0x7a0>)
 800449a:	4013      	ands	r3, r2
 800449c:	0019      	movs	r1, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ac:	431a      	orrs	r2, r3
 80044ae:	4b31      	ldr	r3, [pc, #196]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 80044b0:	430a      	orrs	r2, r1
 80044b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 80044ba:	2180      	movs	r1, #128	@ 0x80
 80044bc:	0449      	lsls	r1, r1, #17
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c2:	f7fe fcf9 	bl	8002eb8 <HAL_GetTick>
 80044c6:	0003      	movs	r3, r0
 80044c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fe fcf4 	bl	8002eb8 <HAL_GetTick>
 80044d0:	0002      	movs	r2, r0
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e045      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044de:	4b25      	ldr	r3, [pc, #148]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	049b      	lsls	r3, r3, #18
 80044e6:	4013      	ands	r3, r2
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x6f4>
 80044ea:	e03d      	b.n	8004568 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ec:	4b21      	ldr	r3, [pc, #132]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b20      	ldr	r3, [pc, #128]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 80044f2:	4922      	ldr	r1, [pc, #136]	@ (800457c <HAL_RCC_OscConfig+0x7a4>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fe fcde 	bl	8002eb8 <HAL_GetTick>
 80044fc:	0003      	movs	r3, r0
 80044fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004502:	f7fe fcd9 	bl	8002eb8 <HAL_GetTick>
 8004506:	0002      	movs	r2, r0
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e02a      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004514:	4b17      	ldr	r3, [pc, #92]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	049b      	lsls	r3, r3, #18
 800451c:	4013      	ands	r3, r2
 800451e:	d1f0      	bne.n	8004502 <HAL_RCC_OscConfig+0x72a>
 8004520:	e022      	b.n	8004568 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e01d      	b.n	800456a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800452e:	4b11      	ldr	r3, [pc, #68]	@ (8004574 <HAL_RCC_OscConfig+0x79c>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	2380      	movs	r3, #128	@ 0x80
 8004538:	025b      	lsls	r3, r3, #9
 800453a:	401a      	ands	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	429a      	cmp	r2, r3
 8004542:	d10f      	bne.n	8004564 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	23f0      	movs	r3, #240	@ 0xf0
 8004548:	039b      	lsls	r3, r3, #14
 800454a:	401a      	ands	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d107      	bne.n	8004564 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	23c0      	movs	r3, #192	@ 0xc0
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	401a      	ands	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	0018      	movs	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	b00a      	add	sp, #40	@ 0x28
 8004570:	bdb0      	pop	{r4, r5, r7, pc}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	40021000 	.word	0x40021000
 8004578:	ff02ffff 	.word	0xff02ffff
 800457c:	feffffff 	.word	0xfeffffff

08004580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b5b0      	push	{r4, r5, r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e128      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b96      	ldr	r3, [pc, #600]	@ (80047f0 <HAL_RCC_ClockConfig+0x270>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2201      	movs	r2, #1
 800459a:	4013      	ands	r3, r2
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d91e      	bls.n	80045e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b93      	ldr	r3, [pc, #588]	@ (80047f0 <HAL_RCC_ClockConfig+0x270>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2201      	movs	r2, #1
 80045a8:	4393      	bics	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	4b90      	ldr	r3, [pc, #576]	@ (80047f0 <HAL_RCC_ClockConfig+0x270>)
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045b4:	f7fe fc80 	bl	8002eb8 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045bc:	e009      	b.n	80045d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045be:	f7fe fc7b 	bl	8002eb8 <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	4a8a      	ldr	r2, [pc, #552]	@ (80047f4 <HAL_RCC_ClockConfig+0x274>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e109      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b87      	ldr	r3, [pc, #540]	@ (80047f0 <HAL_RCC_ClockConfig+0x270>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2201      	movs	r2, #1
 80045d8:	4013      	ands	r3, r2
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1ee      	bne.n	80045be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2202      	movs	r2, #2
 80045e6:	4013      	ands	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ea:	4b83      	ldr	r3, [pc, #524]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	22f0      	movs	r2, #240	@ 0xf0
 80045f0:	4393      	bics	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	4b7f      	ldr	r3, [pc, #508]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2201      	movs	r2, #1
 8004604:	4013      	ands	r3, r2
 8004606:	d100      	bne.n	800460a <HAL_RCC_ClockConfig+0x8a>
 8004608:	e089      	b.n	800471e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004612:	4b79      	ldr	r3, [pc, #484]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	2380      	movs	r3, #128	@ 0x80
 8004618:	029b      	lsls	r3, r3, #10
 800461a:	4013      	ands	r3, r2
 800461c:	d120      	bne.n	8004660 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0e1      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800462a:	4b73      	ldr	r3, [pc, #460]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	049b      	lsls	r3, r3, #18
 8004632:	4013      	ands	r3, r2
 8004634:	d114      	bne.n	8004660 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0d5      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d106      	bne.n	8004650 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004642:	4b6d      	ldr	r3, [pc, #436]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2204      	movs	r2, #4
 8004648:	4013      	ands	r3, r2
 800464a:	d109      	bne.n	8004660 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0ca      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004650:	4b69      	ldr	r3, [pc, #420]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	2380      	movs	r3, #128	@ 0x80
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4013      	ands	r3, r2
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0c2      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004660:	4b65      	ldr	r3, [pc, #404]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2203      	movs	r2, #3
 8004666:	4393      	bics	r3, r2
 8004668:	0019      	movs	r1, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	4b62      	ldr	r3, [pc, #392]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 8004670:	430a      	orrs	r2, r1
 8004672:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004674:	f7fe fc20 	bl	8002eb8 <HAL_GetTick>
 8004678:	0003      	movs	r3, r0
 800467a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d111      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004684:	e009      	b.n	800469a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004686:	f7fe fc17 	bl	8002eb8 <HAL_GetTick>
 800468a:	0002      	movs	r2, r0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	4a58      	ldr	r2, [pc, #352]	@ (80047f4 <HAL_RCC_ClockConfig+0x274>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0a5      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800469a:	4b57      	ldr	r3, [pc, #348]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	220c      	movs	r2, #12
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d1ef      	bne.n	8004686 <HAL_RCC_ClockConfig+0x106>
 80046a6:	e03a      	b.n	800471e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d111      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046b0:	e009      	b.n	80046c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b2:	f7fe fc01 	bl	8002eb8 <HAL_GetTick>
 80046b6:	0002      	movs	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	4a4d      	ldr	r2, [pc, #308]	@ (80047f4 <HAL_RCC_ClockConfig+0x274>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e08f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046c6:	4b4c      	ldr	r3, [pc, #304]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	220c      	movs	r2, #12
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d1ef      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x132>
 80046d2:	e024      	b.n	800471e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d11b      	bne.n	8004714 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046dc:	e009      	b.n	80046f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046de:	f7fe fbeb 	bl	8002eb8 <HAL_GetTick>
 80046e2:	0002      	movs	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	4a42      	ldr	r2, [pc, #264]	@ (80047f4 <HAL_RCC_ClockConfig+0x274>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e079      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046f2:	4b41      	ldr	r3, [pc, #260]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	220c      	movs	r2, #12
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d1ef      	bne.n	80046de <HAL_RCC_ClockConfig+0x15e>
 80046fe:	e00e      	b.n	800471e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fe fbda 	bl	8002eb8 <HAL_GetTick>
 8004704:	0002      	movs	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	4a3a      	ldr	r2, [pc, #232]	@ (80047f4 <HAL_RCC_ClockConfig+0x274>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e068      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004714:	4b38      	ldr	r3, [pc, #224]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	220c      	movs	r2, #12
 800471a:	4013      	ands	r3, r2
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <HAL_RCC_ClockConfig+0x270>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2201      	movs	r2, #1
 8004724:	4013      	ands	r3, r2
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d21e      	bcs.n	800476a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472c:	4b30      	ldr	r3, [pc, #192]	@ (80047f0 <HAL_RCC_ClockConfig+0x270>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	4393      	bics	r3, r2
 8004734:	0019      	movs	r1, r3
 8004736:	4b2e      	ldr	r3, [pc, #184]	@ (80047f0 <HAL_RCC_ClockConfig+0x270>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800473e:	f7fe fbbb 	bl	8002eb8 <HAL_GetTick>
 8004742:	0003      	movs	r3, r0
 8004744:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	e009      	b.n	800475c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004748:	f7fe fbb6 	bl	8002eb8 <HAL_GetTick>
 800474c:	0002      	movs	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	4a28      	ldr	r2, [pc, #160]	@ (80047f4 <HAL_RCC_ClockConfig+0x274>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e044      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475c:	4b24      	ldr	r3, [pc, #144]	@ (80047f0 <HAL_RCC_ClockConfig+0x270>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	4013      	ands	r3, r2
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d1ee      	bne.n	8004748 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2204      	movs	r2, #4
 8004770:	4013      	ands	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004774:	4b20      	ldr	r3, [pc, #128]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a20      	ldr	r2, [pc, #128]	@ (80047fc <HAL_RCC_ClockConfig+0x27c>)
 800477a:	4013      	ands	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 8004784:	430a      	orrs	r2, r1
 8004786:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2208      	movs	r2, #8
 800478e:	4013      	ands	r3, r2
 8004790:	d00a      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004792:	4b19      	ldr	r3, [pc, #100]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	4a1a      	ldr	r2, [pc, #104]	@ (8004800 <HAL_RCC_ClockConfig+0x280>)
 8004798:	4013      	ands	r3, r2
 800479a:	0019      	movs	r1, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	00da      	lsls	r2, r3, #3
 80047a2:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047a8:	f000 f832 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80047ac:	0001      	movs	r1, r0
 80047ae:	4b12      	ldr	r3, [pc, #72]	@ (80047f8 <HAL_RCC_ClockConfig+0x278>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	220f      	movs	r2, #15
 80047b6:	4013      	ands	r3, r2
 80047b8:	4a12      	ldr	r2, [pc, #72]	@ (8004804 <HAL_RCC_ClockConfig+0x284>)
 80047ba:	5cd3      	ldrb	r3, [r2, r3]
 80047bc:	000a      	movs	r2, r1
 80047be:	40da      	lsrs	r2, r3
 80047c0:	4b11      	ldr	r3, [pc, #68]	@ (8004808 <HAL_RCC_ClockConfig+0x288>)
 80047c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047c4:	4b11      	ldr	r3, [pc, #68]	@ (800480c <HAL_RCC_ClockConfig+0x28c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	250b      	movs	r5, #11
 80047ca:	197c      	adds	r4, r7, r5
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fe fb2d 	bl	8002e2c <HAL_InitTick>
 80047d2:	0003      	movs	r3, r0
 80047d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80047d6:	197b      	adds	r3, r7, r5
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80047de:	197b      	adds	r3, r7, r5
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	0018      	movs	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b004      	add	sp, #16
 80047ec:	bdb0      	pop	{r4, r5, r7, pc}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	40022000 	.word	0x40022000
 80047f4:	00001388 	.word	0x00001388
 80047f8:	40021000 	.word	0x40021000
 80047fc:	fffff8ff 	.word	0xfffff8ff
 8004800:	ffffc7ff 	.word	0xffffc7ff
 8004804:	08007700 	.word	0x08007700
 8004808:	20000014 	.word	0x20000014
 800480c:	20000018 	.word	0x20000018

08004810 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004810:	b5b0      	push	{r4, r5, r7, lr}
 8004812:	b08e      	sub	sp, #56	@ 0x38
 8004814:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004816:	4b4c      	ldr	r3, [pc, #304]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x138>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800481c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800481e:	230c      	movs	r3, #12
 8004820:	4013      	ands	r3, r2
 8004822:	2b0c      	cmp	r3, #12
 8004824:	d014      	beq.n	8004850 <HAL_RCC_GetSysClockFreq+0x40>
 8004826:	d900      	bls.n	800482a <HAL_RCC_GetSysClockFreq+0x1a>
 8004828:	e07b      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x112>
 800482a:	2b04      	cmp	r3, #4
 800482c:	d002      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x24>
 800482e:	2b08      	cmp	r3, #8
 8004830:	d00b      	beq.n	800484a <HAL_RCC_GetSysClockFreq+0x3a>
 8004832:	e076      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004834:	4b44      	ldr	r3, [pc, #272]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x138>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2210      	movs	r2, #16
 800483a:	4013      	ands	r3, r2
 800483c:	d002      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800483e:	4b43      	ldr	r3, [pc, #268]	@ (800494c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004840:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004842:	e07c      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004844:	4b42      	ldr	r3, [pc, #264]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x140>)
 8004846:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004848:	e079      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800484a:	4b42      	ldr	r3, [pc, #264]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x144>)
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800484e:	e076      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004852:	0c9a      	lsrs	r2, r3, #18
 8004854:	230f      	movs	r3, #15
 8004856:	401a      	ands	r2, r3
 8004858:	4b3f      	ldr	r3, [pc, #252]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x148>)
 800485a:	5c9b      	ldrb	r3, [r3, r2]
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800485e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004860:	0d9a      	lsrs	r2, r3, #22
 8004862:	2303      	movs	r3, #3
 8004864:	4013      	ands	r3, r2
 8004866:	3301      	adds	r3, #1
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486a:	4b37      	ldr	r3, [pc, #220]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x138>)
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	2380      	movs	r3, #128	@ 0x80
 8004870:	025b      	lsls	r3, r3, #9
 8004872:	4013      	ands	r3, r2
 8004874:	d01a      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	4a35      	ldr	r2, [pc, #212]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x144>)
 8004880:	2300      	movs	r3, #0
 8004882:	69b8      	ldr	r0, [r7, #24]
 8004884:	69f9      	ldr	r1, [r7, #28]
 8004886:	f7fb fd25 	bl	80002d4 <__aeabi_lmul>
 800488a:	0002      	movs	r2, r0
 800488c:	000b      	movs	r3, r1
 800488e:	0010      	movs	r0, r2
 8004890:	0019      	movs	r1, r3
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f7fb fcf9 	bl	8000294 <__aeabi_uldivmod>
 80048a2:	0002      	movs	r2, r0
 80048a4:	000b      	movs	r3, r1
 80048a6:	0013      	movs	r3, r2
 80048a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048aa:	e037      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80048ac:	4b26      	ldr	r3, [pc, #152]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x138>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2210      	movs	r2, #16
 80048b2:	4013      	ands	r3, r2
 80048b4:	d01a      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80048b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	4a23      	ldr	r2, [pc, #140]	@ (800494c <HAL_RCC_GetSysClockFreq+0x13c>)
 80048c0:	2300      	movs	r3, #0
 80048c2:	68b8      	ldr	r0, [r7, #8]
 80048c4:	68f9      	ldr	r1, [r7, #12]
 80048c6:	f7fb fd05 	bl	80002d4 <__aeabi_lmul>
 80048ca:	0002      	movs	r2, r0
 80048cc:	000b      	movs	r3, r1
 80048ce:	0010      	movs	r0, r2
 80048d0:	0019      	movs	r1, r3
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f7fb fcd9 	bl	8000294 <__aeabi_uldivmod>
 80048e2:	0002      	movs	r2, r0
 80048e4:	000b      	movs	r3, r1
 80048e6:	0013      	movs	r3, r2
 80048e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ea:	e017      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80048ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ee:	0018      	movs	r0, r3
 80048f0:	2300      	movs	r3, #0
 80048f2:	0019      	movs	r1, r3
 80048f4:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x140>)
 80048f6:	2300      	movs	r3, #0
 80048f8:	f7fb fcec 	bl	80002d4 <__aeabi_lmul>
 80048fc:	0002      	movs	r2, r0
 80048fe:	000b      	movs	r3, r1
 8004900:	0010      	movs	r0, r2
 8004902:	0019      	movs	r1, r3
 8004904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004906:	001c      	movs	r4, r3
 8004908:	2300      	movs	r3, #0
 800490a:	001d      	movs	r5, r3
 800490c:	0022      	movs	r2, r4
 800490e:	002b      	movs	r3, r5
 8004910:	f7fb fcc0 	bl	8000294 <__aeabi_uldivmod>
 8004914:	0002      	movs	r2, r0
 8004916:	000b      	movs	r3, r1
 8004918:	0013      	movs	r3, r2
 800491a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800491c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004920:	e00d      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x138>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	0b5b      	lsrs	r3, r3, #13
 8004928:	2207      	movs	r2, #7
 800492a:	4013      	ands	r3, r2
 800492c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	3301      	adds	r3, #1
 8004932:	2280      	movs	r2, #128	@ 0x80
 8004934:	0212      	lsls	r2, r2, #8
 8004936:	409a      	lsls	r2, r3
 8004938:	0013      	movs	r3, r2
 800493a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800493c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b00e      	add	sp, #56	@ 0x38
 8004946:	bdb0      	pop	{r4, r5, r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	003d0900 	.word	0x003d0900
 8004950:	00f42400 	.word	0x00f42400
 8004954:	007a1200 	.word	0x007a1200
 8004958:	08007718 	.word	0x08007718

0800495c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004960:	4b02      	ldr	r3, [pc, #8]	@ (800496c <HAL_RCC_GetHCLKFreq+0x10>)
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	20000014 	.word	0x20000014

08004970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004974:	f7ff fff2 	bl	800495c <HAL_RCC_GetHCLKFreq>
 8004978:	0001      	movs	r1, r0
 800497a:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	2207      	movs	r2, #7
 8004982:	4013      	ands	r3, r2
 8004984:	4a04      	ldr	r2, [pc, #16]	@ (8004998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004986:	5cd3      	ldrb	r3, [r2, r3]
 8004988:	40d9      	lsrs	r1, r3
 800498a:	000b      	movs	r3, r1
}
 800498c:	0018      	movs	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	40021000 	.word	0x40021000
 8004998:	08007710 	.word	0x08007710

0800499c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049a0:	f7ff ffdc 	bl	800495c <HAL_RCC_GetHCLKFreq>
 80049a4:	0001      	movs	r1, r0
 80049a6:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	0adb      	lsrs	r3, r3, #11
 80049ac:	2207      	movs	r2, #7
 80049ae:	4013      	ands	r3, r2
 80049b0:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049b2:	5cd3      	ldrb	r3, [r2, r3]
 80049b4:	40d9      	lsrs	r1, r3
 80049b6:	000b      	movs	r3, r1
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	40021000 	.word	0x40021000
 80049c4:	08007710 	.word	0x08007710

080049c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80049d0:	2017      	movs	r0, #23
 80049d2:	183b      	adds	r3, r7, r0
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2220      	movs	r2, #32
 80049de:	4013      	ands	r3, r2
 80049e0:	d100      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80049e2:	e0c7      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e4:	4b9b      	ldr	r3, [pc, #620]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80049e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049e8:	2380      	movs	r3, #128	@ 0x80
 80049ea:	055b      	lsls	r3, r3, #21
 80049ec:	4013      	ands	r3, r2
 80049ee:	d109      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f0:	4b98      	ldr	r3, [pc, #608]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80049f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049f4:	4b97      	ldr	r3, [pc, #604]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80049f6:	2180      	movs	r1, #128	@ 0x80
 80049f8:	0549      	lsls	r1, r1, #21
 80049fa:	430a      	orrs	r2, r1
 80049fc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80049fe:	183b      	adds	r3, r7, r0
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a04:	4b94      	ldr	r3, [pc, #592]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d11a      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a10:	4b91      	ldr	r3, [pc, #580]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b90      	ldr	r3, [pc, #576]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004a16:	2180      	movs	r1, #128	@ 0x80
 8004a18:	0049      	lsls	r1, r1, #1
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1e:	f7fe fa4b 	bl	8002eb8 <HAL_GetTick>
 8004a22:	0003      	movs	r3, r0
 8004a24:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a26:	e008      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a28:	f7fe fa46 	bl	8002eb8 <HAL_GetTick>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	@ 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e107      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3a:	4b87      	ldr	r3, [pc, #540]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	2380      	movs	r3, #128	@ 0x80
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	4013      	ands	r3, r2
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004a46:	4b83      	ldr	r3, [pc, #524]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	23c0      	movs	r3, #192	@ 0xc0
 8004a4c:	039b      	lsls	r3, r3, #14
 8004a4e:	4013      	ands	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	23c0      	movs	r3, #192	@ 0xc0
 8004a58:	039b      	lsls	r3, r3, #14
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d013      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	23c0      	movs	r3, #192	@ 0xc0
 8004a68:	029b      	lsls	r3, r3, #10
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	23c0      	movs	r3, #192	@ 0xc0
 8004a6e:	029b      	lsls	r3, r3, #10
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d10a      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a74:	4b77      	ldr	r3, [pc, #476]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	029b      	lsls	r3, r3, #10
 8004a7c:	401a      	ands	r2, r3
 8004a7e:	2380      	movs	r3, #128	@ 0x80
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d101      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0df      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004a8a:	4b72      	ldr	r3, [pc, #456]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004a8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a8e:	23c0      	movs	r3, #192	@ 0xc0
 8004a90:	029b      	lsls	r3, r3, #10
 8004a92:	4013      	ands	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d03b      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	23c0      	movs	r3, #192	@ 0xc0
 8004aa2:	029b      	lsls	r3, r3, #10
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d033      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d02e      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004ab6:	4b67      	ldr	r3, [pc, #412]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aba:	4a68      	ldr	r2, [pc, #416]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ac0:	4b64      	ldr	r3, [pc, #400]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ac2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ac4:	4b63      	ldr	r3, [pc, #396]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ac6:	2180      	movs	r1, #128	@ 0x80
 8004ac8:	0309      	lsls	r1, r1, #12
 8004aca:	430a      	orrs	r2, r1
 8004acc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ace:	4b61      	ldr	r3, [pc, #388]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ad0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ad2:	4b60      	ldr	r3, [pc, #384]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ad4:	4962      	ldr	r1, [pc, #392]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004ad6:	400a      	ands	r2, r1
 8004ad8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004ada:	4b5e      	ldr	r3, [pc, #376]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	2380      	movs	r3, #128	@ 0x80
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d014      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aea:	f7fe f9e5 	bl	8002eb8 <HAL_GetTick>
 8004aee:	0003      	movs	r3, r0
 8004af0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004af2:	e009      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fe f9e0 	bl	8002eb8 <HAL_GetTick>
 8004af8:	0002      	movs	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	4a59      	ldr	r2, [pc, #356]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e0a0      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b08:	4b52      	ldr	r3, [pc, #328]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b0c:	2380      	movs	r3, #128	@ 0x80
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4013      	ands	r3, r2
 8004b12:	d0ef      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d01f      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	23c0      	movs	r3, #192	@ 0xc0
 8004b24:	029b      	lsls	r3, r3, #10
 8004b26:	401a      	ands	r2, r3
 8004b28:	23c0      	movs	r3, #192	@ 0xc0
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d10c      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004b30:	4b48      	ldr	r3, [pc, #288]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a4c      	ldr	r2, [pc, #304]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	23c0      	movs	r3, #192	@ 0xc0
 8004b40:	039b      	lsls	r3, r3, #14
 8004b42:	401a      	ands	r2, r3
 8004b44:	4b43      	ldr	r3, [pc, #268]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	4b42      	ldr	r3, [pc, #264]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	23c0      	movs	r3, #192	@ 0xc0
 8004b54:	029b      	lsls	r3, r3, #10
 8004b56:	401a      	ands	r2, r3
 8004b58:	4b3e      	ldr	r3, [pc, #248]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b5e:	2317      	movs	r3, #23
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b68:	4b3a      	ldr	r3, [pc, #232]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b6c:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b6e:	493f      	ldr	r1, [pc, #252]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b70:	400a      	ands	r2, r1
 8004b72:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b7e:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b82:	2203      	movs	r2, #3
 8004b84:	4393      	bics	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b31      	ldr	r3, [pc, #196]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2202      	movs	r2, #2
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba0:	220c      	movs	r2, #12
 8004ba2:	4393      	bics	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	4b2a      	ldr	r3, [pc, #168]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004bac:	430a      	orrs	r2, r1
 8004bae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bba:	4b26      	ldr	r3, [pc, #152]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	4b22      	ldr	r3, [pc, #136]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2208      	movs	r2, #8
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bdc:	4a25      	ldr	r2, [pc, #148]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	0019      	movs	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004be8:	430a      	orrs	r2, r1
 8004bea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bf8:	4b16      	ldr	r3, [pc, #88]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfc:	4a17      	ldr	r2, [pc, #92]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	4b13      	ldr	r3, [pc, #76]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2240      	movs	r2, #64	@ 0x40
 8004c12:	4013      	ands	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c16:	4b0f      	ldr	r3, [pc, #60]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1a:	4a17      	ldr	r2, [pc, #92]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	0019      	movs	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c26:	430a      	orrs	r2, r1
 8004c28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2280      	movs	r2, #128	@ 0x80
 8004c30:	4013      	ands	r3, r2
 8004c32:	d009      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004c34:	4b07      	ldr	r3, [pc, #28]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c38:	4a10      	ldr	r2, [pc, #64]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c44:	430a      	orrs	r2, r1
 8004c46:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b006      	add	sp, #24
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
 8004c5c:	fffcffff 	.word	0xfffcffff
 8004c60:	fff7ffff 	.word	0xfff7ffff
 8004c64:	00001388 	.word	0x00001388
 8004c68:	ffcfffff 	.word	0xffcfffff
 8004c6c:	efffffff 	.word	0xefffffff
 8004c70:	fffff3ff 	.word	0xfffff3ff
 8004c74:	ffffcfff 	.word	0xffffcfff
 8004c78:	fbffffff 	.word	0xfbffffff
 8004c7c:	fff3ffff 	.word	0xfff3ffff

08004c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e032      	b.n	8004cf8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2239      	movs	r2, #57	@ 0x39
 8004c96:	5c9b      	ldrb	r3, [r3, r2]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d107      	bne.n	8004cae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2238      	movs	r2, #56	@ 0x38
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7fd ff8d 	bl	8002bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2239      	movs	r2, #57	@ 0x39
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	0010      	movs	r0, r2
 8004cc2:	f000 f885 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	223e      	movs	r2, #62	@ 0x3e
 8004cca:	2101      	movs	r1, #1
 8004ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	223a      	movs	r2, #58	@ 0x3a
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	5499      	strb	r1, [r3, r2]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	223b      	movs	r2, #59	@ 0x3b
 8004cda:	2101      	movs	r1, #1
 8004cdc:	5499      	strb	r1, [r3, r2]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	223c      	movs	r2, #60	@ 0x3c
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	5499      	strb	r1, [r3, r2]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	223d      	movs	r2, #61	@ 0x3d
 8004cea:	2101      	movs	r1, #1
 8004cec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2239      	movs	r2, #57	@ 0x39
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b002      	add	sp, #8
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2239      	movs	r2, #57	@ 0x39
 8004d0c:	5c9b      	ldrb	r3, [r3, r2]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d001      	beq.n	8004d18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e033      	b.n	8004d80 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2239      	movs	r2, #57	@ 0x39
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	2380      	movs	r3, #128	@ 0x80
 8004d26:	05db      	lsls	r3, r3, #23
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d00e      	beq.n	8004d4a <HAL_TIM_Base_Start+0x4a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a15      	ldr	r2, [pc, #84]	@ (8004d88 <HAL_TIM_Base_Start+0x88>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_TIM_Base_Start+0x4a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a14      	ldr	r2, [pc, #80]	@ (8004d8c <HAL_TIM_Base_Start+0x8c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIM_Base_Start+0x4a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a12      	ldr	r2, [pc, #72]	@ (8004d90 <HAL_TIM_Base_Start+0x90>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d111      	bne.n	8004d6e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2207      	movs	r2, #7
 8004d52:	4013      	ands	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b06      	cmp	r3, #6
 8004d5a:	d010      	beq.n	8004d7e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2101      	movs	r1, #1
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6c:	e007      	b.n	8004d7e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2101      	movs	r1, #1
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b004      	add	sp, #16
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40010800 	.word	0x40010800
 8004d90:	40011400 	.word	0x40011400

08004d94 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dcc <HAL_TIM_Base_Stop+0x38>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	d107      	bne.n	8004db8 <HAL_TIM_Base_Stop+0x24>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2101      	movs	r1, #1
 8004db4:	438a      	bics	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2239      	movs	r2, #57	@ 0x39
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b002      	add	sp, #8
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	00001111 	.word	0x00001111

08004dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	2380      	movs	r3, #128	@ 0x80
 8004de4:	05db      	lsls	r3, r3, #23
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d00b      	beq.n	8004e02 <TIM_Base_SetConfig+0x32>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a23      	ldr	r2, [pc, #140]	@ (8004e7c <TIM_Base_SetConfig+0xac>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <TIM_Base_SetConfig+0x32>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a22      	ldr	r2, [pc, #136]	@ (8004e80 <TIM_Base_SetConfig+0xb0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_Base_SetConfig+0x32>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a21      	ldr	r2, [pc, #132]	@ (8004e84 <TIM_Base_SetConfig+0xb4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d108      	bne.n	8004e14 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2270      	movs	r2, #112	@ 0x70
 8004e06:	4393      	bics	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	05db      	lsls	r3, r3, #23
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d00b      	beq.n	8004e36 <TIM_Base_SetConfig+0x66>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a16      	ldr	r2, [pc, #88]	@ (8004e7c <TIM_Base_SetConfig+0xac>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <TIM_Base_SetConfig+0x66>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <TIM_Base_SetConfig+0xb0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <TIM_Base_SetConfig+0x66>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a14      	ldr	r2, [pc, #80]	@ (8004e84 <TIM_Base_SetConfig+0xb4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d108      	bne.n	8004e48 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a13      	ldr	r2, [pc, #76]	@ (8004e88 <TIM_Base_SetConfig+0xb8>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2280      	movs	r2, #128	@ 0x80
 8004e4c:	4393      	bics	r3, r2
 8004e4e:	001a      	movs	r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	615a      	str	r2, [r3, #20]
}
 8004e74:	46c0      	nop			@ (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b004      	add	sp, #16
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40010800 	.word	0x40010800
 8004e84:	40011400 	.word	0x40011400
 8004e88:	fffffcff 	.word	0xfffffcff

08004e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2238      	movs	r2, #56	@ 0x38
 8004e9a:	5c9b      	ldrb	r3, [r3, r2]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e047      	b.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2238      	movs	r2, #56	@ 0x38
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2239      	movs	r2, #57	@ 0x39
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2270      	movs	r2, #112	@ 0x70
 8004ec8:	4393      	bics	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	2380      	movs	r3, #128	@ 0x80
 8004ee4:	05db      	lsls	r3, r3, #23
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d00e      	beq.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a13      	ldr	r2, [pc, #76]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d009      	beq.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a11      	ldr	r2, [pc, #68]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a10      	ldr	r2, [pc, #64]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d10c      	bne.n	8004f22 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2280      	movs	r2, #128	@ 0x80
 8004f0c:	4393      	bics	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2239      	movs	r2, #57	@ 0x39
 8004f26:	2101      	movs	r1, #1
 8004f28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2238      	movs	r2, #56	@ 0x38
 8004f2e:	2100      	movs	r1, #0
 8004f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	0018      	movs	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b004      	add	sp, #16
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40010800 	.word	0x40010800
 8004f44:	40011400 	.word	0x40011400

08004f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e044      	b.n	8004fe4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d107      	bne.n	8004f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2278      	movs	r2, #120	@ 0x78
 8004f66:	2100      	movs	r1, #0
 8004f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7fd fe43 	bl	8002bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2224      	movs	r2, #36	@ 0x24
 8004f76:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2101      	movs	r1, #1
 8004f84:	438a      	bics	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 f8d0 	bl	8005130 <UART_SetConfig>
 8004f90:	0003      	movs	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e024      	b.n	8004fe4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f000 fb61 	bl	800566c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	490d      	ldr	r1, [pc, #52]	@ (8004fec <HAL_UART_Init+0xa4>)
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	212a      	movs	r1, #42	@ 0x2a
 8004fc6:	438a      	bics	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f000 fbf9 	bl	80057d4 <UART_CheckIdleState>
 8004fe2:	0003      	movs	r3, r0
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b002      	add	sp, #8
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	ffffb7ff 	.word	0xffffb7ff

08004ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	@ 0x28
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	1dbb      	adds	r3, r7, #6
 8004ffe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005004:	2b20      	cmp	r3, #32
 8005006:	d000      	beq.n	800500a <HAL_UART_Transmit+0x1a>
 8005008:	e08c      	b.n	8005124 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_UART_Transmit+0x28>
 8005010:	1dbb      	adds	r3, r7, #6
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e084      	b.n	8005126 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	015b      	lsls	r3, r3, #5
 8005024:	429a      	cmp	r2, r3
 8005026:	d109      	bne.n	800503c <HAL_UART_Transmit+0x4c>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2201      	movs	r2, #1
 8005034:	4013      	ands	r3, r2
 8005036:	d001      	beq.n	800503c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e074      	b.n	8005126 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2284      	movs	r2, #132	@ 0x84
 8005040:	2100      	movs	r1, #0
 8005042:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2221      	movs	r2, #33	@ 0x21
 8005048:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800504a:	f7fd ff35 	bl	8002eb8 <HAL_GetTick>
 800504e:	0003      	movs	r3, r0
 8005050:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1dba      	adds	r2, r7, #6
 8005056:	2150      	movs	r1, #80	@ 0x50
 8005058:	8812      	ldrh	r2, [r2, #0]
 800505a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1dba      	adds	r2, r7, #6
 8005060:	2152      	movs	r1, #82	@ 0x52
 8005062:	8812      	ldrh	r2, [r2, #0]
 8005064:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	2380      	movs	r3, #128	@ 0x80
 800506c:	015b      	lsls	r3, r3, #5
 800506e:	429a      	cmp	r2, r3
 8005070:	d108      	bne.n	8005084 <HAL_UART_Transmit+0x94>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d104      	bne.n	8005084 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e003      	b.n	800508c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005088:	2300      	movs	r3, #0
 800508a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800508c:	e02f      	b.n	80050ee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	0013      	movs	r3, r2
 8005098:	2200      	movs	r2, #0
 800509a:	2180      	movs	r1, #128	@ 0x80
 800509c:	f000 fc42 	bl	8005924 <UART_WaitOnFlagUntilTimeout>
 80050a0:	1e03      	subs	r3, r0, #0
 80050a2:	d004      	beq.n	80050ae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e03b      	b.n	8005126 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	001a      	movs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	05d2      	lsls	r2, r2, #23
 80050c0:	0dd2      	lsrs	r2, r2, #23
 80050c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	3302      	adds	r3, #2
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	e007      	b.n	80050dc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	781a      	ldrb	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3301      	adds	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2252      	movs	r2, #82	@ 0x52
 80050e0:	5a9b      	ldrh	r3, [r3, r2]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b299      	uxth	r1, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2252      	movs	r2, #82	@ 0x52
 80050ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2252      	movs	r2, #82	@ 0x52
 80050f2:	5a9b      	ldrh	r3, [r3, r2]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1c9      	bne.n	800508e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	0013      	movs	r3, r2
 8005104:	2200      	movs	r2, #0
 8005106:	2140      	movs	r1, #64	@ 0x40
 8005108:	f000 fc0c 	bl	8005924 <UART_WaitOnFlagUntilTimeout>
 800510c:	1e03      	subs	r3, r0, #0
 800510e:	d004      	beq.n	800511a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e005      	b.n	8005126 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b008      	add	sp, #32
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005130:	b5b0      	push	{r4, r5, r7, lr}
 8005132:	b08e      	sub	sp, #56	@ 0x38
 8005134:	af00      	add	r7, sp, #0
 8005136:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005138:	231a      	movs	r3, #26
 800513a:	2218      	movs	r2, #24
 800513c:	189b      	adds	r3, r3, r2
 800513e:	19db      	adds	r3, r3, r7
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	431a      	orrs	r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	431a      	orrs	r2, r3
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	4313      	orrs	r3, r2
 800515a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4ac3      	ldr	r2, [pc, #780]	@ (8005470 <UART_SetConfig+0x340>)
 8005164:	4013      	ands	r3, r2
 8005166:	0019      	movs	r1, r3
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800516e:	430a      	orrs	r2, r1
 8005170:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4abe      	ldr	r2, [pc, #760]	@ (8005474 <UART_SetConfig+0x344>)
 800517a:	4013      	ands	r3, r2
 800517c:	0019      	movs	r1, r3
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4ab8      	ldr	r2, [pc, #736]	@ (8005478 <UART_SetConfig+0x348>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051a0:	4313      	orrs	r3, r2
 80051a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	4ab4      	ldr	r2, [pc, #720]	@ (800547c <UART_SetConfig+0x34c>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	0019      	movs	r1, r3
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4ab0      	ldr	r2, [pc, #704]	@ (8005480 <UART_SetConfig+0x350>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d131      	bne.n	8005228 <UART_SetConfig+0xf8>
 80051c4:	4baf      	ldr	r3, [pc, #700]	@ (8005484 <UART_SetConfig+0x354>)
 80051c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c8:	2203      	movs	r2, #3
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d01d      	beq.n	800520c <UART_SetConfig+0xdc>
 80051d0:	d823      	bhi.n	800521a <UART_SetConfig+0xea>
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d00c      	beq.n	80051f0 <UART_SetConfig+0xc0>
 80051d6:	d820      	bhi.n	800521a <UART_SetConfig+0xea>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <UART_SetConfig+0xb2>
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d00e      	beq.n	80051fe <UART_SetConfig+0xce>
 80051e0:	e01b      	b.n	800521a <UART_SetConfig+0xea>
 80051e2:	231b      	movs	r3, #27
 80051e4:	2218      	movs	r2, #24
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	19db      	adds	r3, r3, r7
 80051ea:	2201      	movs	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e0b4      	b.n	800535a <UART_SetConfig+0x22a>
 80051f0:	231b      	movs	r3, #27
 80051f2:	2218      	movs	r2, #24
 80051f4:	189b      	adds	r3, r3, r2
 80051f6:	19db      	adds	r3, r3, r7
 80051f8:	2202      	movs	r2, #2
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e0ad      	b.n	800535a <UART_SetConfig+0x22a>
 80051fe:	231b      	movs	r3, #27
 8005200:	2218      	movs	r2, #24
 8005202:	189b      	adds	r3, r3, r2
 8005204:	19db      	adds	r3, r3, r7
 8005206:	2204      	movs	r2, #4
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e0a6      	b.n	800535a <UART_SetConfig+0x22a>
 800520c:	231b      	movs	r3, #27
 800520e:	2218      	movs	r2, #24
 8005210:	189b      	adds	r3, r3, r2
 8005212:	19db      	adds	r3, r3, r7
 8005214:	2208      	movs	r2, #8
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	e09f      	b.n	800535a <UART_SetConfig+0x22a>
 800521a:	231b      	movs	r3, #27
 800521c:	2218      	movs	r2, #24
 800521e:	189b      	adds	r3, r3, r2
 8005220:	19db      	adds	r3, r3, r7
 8005222:	2210      	movs	r2, #16
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e098      	b.n	800535a <UART_SetConfig+0x22a>
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a96      	ldr	r2, [pc, #600]	@ (8005488 <UART_SetConfig+0x358>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d131      	bne.n	8005296 <UART_SetConfig+0x166>
 8005232:	4b94      	ldr	r3, [pc, #592]	@ (8005484 <UART_SetConfig+0x354>)
 8005234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005236:	220c      	movs	r2, #12
 8005238:	4013      	ands	r3, r2
 800523a:	2b0c      	cmp	r3, #12
 800523c:	d01d      	beq.n	800527a <UART_SetConfig+0x14a>
 800523e:	d823      	bhi.n	8005288 <UART_SetConfig+0x158>
 8005240:	2b08      	cmp	r3, #8
 8005242:	d00c      	beq.n	800525e <UART_SetConfig+0x12e>
 8005244:	d820      	bhi.n	8005288 <UART_SetConfig+0x158>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <UART_SetConfig+0x120>
 800524a:	2b04      	cmp	r3, #4
 800524c:	d00e      	beq.n	800526c <UART_SetConfig+0x13c>
 800524e:	e01b      	b.n	8005288 <UART_SetConfig+0x158>
 8005250:	231b      	movs	r3, #27
 8005252:	2218      	movs	r2, #24
 8005254:	189b      	adds	r3, r3, r2
 8005256:	19db      	adds	r3, r3, r7
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e07d      	b.n	800535a <UART_SetConfig+0x22a>
 800525e:	231b      	movs	r3, #27
 8005260:	2218      	movs	r2, #24
 8005262:	189b      	adds	r3, r3, r2
 8005264:	19db      	adds	r3, r3, r7
 8005266:	2202      	movs	r2, #2
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e076      	b.n	800535a <UART_SetConfig+0x22a>
 800526c:	231b      	movs	r3, #27
 800526e:	2218      	movs	r2, #24
 8005270:	189b      	adds	r3, r3, r2
 8005272:	19db      	adds	r3, r3, r7
 8005274:	2204      	movs	r2, #4
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e06f      	b.n	800535a <UART_SetConfig+0x22a>
 800527a:	231b      	movs	r3, #27
 800527c:	2218      	movs	r2, #24
 800527e:	189b      	adds	r3, r3, r2
 8005280:	19db      	adds	r3, r3, r7
 8005282:	2208      	movs	r2, #8
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	e068      	b.n	800535a <UART_SetConfig+0x22a>
 8005288:	231b      	movs	r3, #27
 800528a:	2218      	movs	r2, #24
 800528c:	189b      	adds	r3, r3, r2
 800528e:	19db      	adds	r3, r3, r7
 8005290:	2210      	movs	r2, #16
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e061      	b.n	800535a <UART_SetConfig+0x22a>
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7c      	ldr	r2, [pc, #496]	@ (800548c <UART_SetConfig+0x35c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d106      	bne.n	80052ae <UART_SetConfig+0x17e>
 80052a0:	231b      	movs	r3, #27
 80052a2:	2218      	movs	r2, #24
 80052a4:	189b      	adds	r3, r3, r2
 80052a6:	19db      	adds	r3, r3, r7
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e055      	b.n	800535a <UART_SetConfig+0x22a>
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a77      	ldr	r2, [pc, #476]	@ (8005490 <UART_SetConfig+0x360>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d106      	bne.n	80052c6 <UART_SetConfig+0x196>
 80052b8:	231b      	movs	r3, #27
 80052ba:	2218      	movs	r2, #24
 80052bc:	189b      	adds	r3, r3, r2
 80052be:	19db      	adds	r3, r3, r7
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	e049      	b.n	800535a <UART_SetConfig+0x22a>
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005478 <UART_SetConfig+0x348>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d13e      	bne.n	800534e <UART_SetConfig+0x21e>
 80052d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005484 <UART_SetConfig+0x354>)
 80052d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052d4:	23c0      	movs	r3, #192	@ 0xc0
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4013      	ands	r3, r2
 80052da:	22c0      	movs	r2, #192	@ 0xc0
 80052dc:	0112      	lsls	r2, r2, #4
 80052de:	4293      	cmp	r3, r2
 80052e0:	d027      	beq.n	8005332 <UART_SetConfig+0x202>
 80052e2:	22c0      	movs	r2, #192	@ 0xc0
 80052e4:	0112      	lsls	r2, r2, #4
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d82a      	bhi.n	8005340 <UART_SetConfig+0x210>
 80052ea:	2280      	movs	r2, #128	@ 0x80
 80052ec:	0112      	lsls	r2, r2, #4
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d011      	beq.n	8005316 <UART_SetConfig+0x1e6>
 80052f2:	2280      	movs	r2, #128	@ 0x80
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d822      	bhi.n	8005340 <UART_SetConfig+0x210>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <UART_SetConfig+0x1d8>
 80052fe:	2280      	movs	r2, #128	@ 0x80
 8005300:	00d2      	lsls	r2, r2, #3
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <UART_SetConfig+0x1f4>
 8005306:	e01b      	b.n	8005340 <UART_SetConfig+0x210>
 8005308:	231b      	movs	r3, #27
 800530a:	2218      	movs	r2, #24
 800530c:	189b      	adds	r3, r3, r2
 800530e:	19db      	adds	r3, r3, r7
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e021      	b.n	800535a <UART_SetConfig+0x22a>
 8005316:	231b      	movs	r3, #27
 8005318:	2218      	movs	r2, #24
 800531a:	189b      	adds	r3, r3, r2
 800531c:	19db      	adds	r3, r3, r7
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e01a      	b.n	800535a <UART_SetConfig+0x22a>
 8005324:	231b      	movs	r3, #27
 8005326:	2218      	movs	r2, #24
 8005328:	189b      	adds	r3, r3, r2
 800532a:	19db      	adds	r3, r3, r7
 800532c:	2204      	movs	r2, #4
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e013      	b.n	800535a <UART_SetConfig+0x22a>
 8005332:	231b      	movs	r3, #27
 8005334:	2218      	movs	r2, #24
 8005336:	189b      	adds	r3, r3, r2
 8005338:	19db      	adds	r3, r3, r7
 800533a:	2208      	movs	r2, #8
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e00c      	b.n	800535a <UART_SetConfig+0x22a>
 8005340:	231b      	movs	r3, #27
 8005342:	2218      	movs	r2, #24
 8005344:	189b      	adds	r3, r3, r2
 8005346:	19db      	adds	r3, r3, r7
 8005348:	2210      	movs	r2, #16
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	e005      	b.n	800535a <UART_SetConfig+0x22a>
 800534e:	231b      	movs	r3, #27
 8005350:	2218      	movs	r2, #24
 8005352:	189b      	adds	r3, r3, r2
 8005354:	19db      	adds	r3, r3, r7
 8005356:	2210      	movs	r2, #16
 8005358:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a46      	ldr	r2, [pc, #280]	@ (8005478 <UART_SetConfig+0x348>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d000      	beq.n	8005366 <UART_SetConfig+0x236>
 8005364:	e09a      	b.n	800549c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005366:	231b      	movs	r3, #27
 8005368:	2218      	movs	r2, #24
 800536a:	189b      	adds	r3, r3, r2
 800536c:	19db      	adds	r3, r3, r7
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b08      	cmp	r3, #8
 8005372:	d01d      	beq.n	80053b0 <UART_SetConfig+0x280>
 8005374:	dc20      	bgt.n	80053b8 <UART_SetConfig+0x288>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d015      	beq.n	80053a6 <UART_SetConfig+0x276>
 800537a:	dc1d      	bgt.n	80053b8 <UART_SetConfig+0x288>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <UART_SetConfig+0x256>
 8005380:	2b02      	cmp	r3, #2
 8005382:	d005      	beq.n	8005390 <UART_SetConfig+0x260>
 8005384:	e018      	b.n	80053b8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005386:	f7ff faf3 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 800538a:	0003      	movs	r3, r0
 800538c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800538e:	e01c      	b.n	80053ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005390:	4b3c      	ldr	r3, [pc, #240]	@ (8005484 <UART_SetConfig+0x354>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2210      	movs	r2, #16
 8005396:	4013      	ands	r3, r2
 8005398:	d002      	beq.n	80053a0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800539a:	4b3e      	ldr	r3, [pc, #248]	@ (8005494 <UART_SetConfig+0x364>)
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800539e:	e014      	b.n	80053ca <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80053a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005498 <UART_SetConfig+0x368>)
 80053a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053a4:	e011      	b.n	80053ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053a6:	f7ff fa33 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80053aa:	0003      	movs	r3, r0
 80053ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053ae:	e00c      	b.n	80053ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053b6:	e008      	b.n	80053ca <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80053bc:	231a      	movs	r3, #26
 80053be:	2218      	movs	r2, #24
 80053c0:	189b      	adds	r3, r3, r2
 80053c2:	19db      	adds	r3, r3, r7
 80053c4:	2201      	movs	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
        break;
 80053c8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d100      	bne.n	80053d2 <UART_SetConfig+0x2a2>
 80053d0:	e133      	b.n	800563a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	0013      	movs	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	189b      	adds	r3, r3, r2
 80053dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053de:	429a      	cmp	r2, r3
 80053e0:	d305      	bcc.n	80053ee <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d906      	bls.n	80053fc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80053ee:	231a      	movs	r3, #26
 80053f0:	2218      	movs	r2, #24
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	19db      	adds	r3, r3, r7
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	e11e      	b.n	800563a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	6939      	ldr	r1, [r7, #16]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	000b      	movs	r3, r1
 800540a:	0e1b      	lsrs	r3, r3, #24
 800540c:	0010      	movs	r0, r2
 800540e:	0205      	lsls	r5, r0, #8
 8005410:	431d      	orrs	r5, r3
 8005412:	000b      	movs	r3, r1
 8005414:	021c      	lsls	r4, r3, #8
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68b8      	ldr	r0, [r7, #8]
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	1900      	adds	r0, r0, r4
 8005428:	4169      	adcs	r1, r5
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	2300      	movs	r3, #0
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f7fa ff2c 	bl	8000294 <__aeabi_uldivmod>
 800543c:	0002      	movs	r2, r0
 800543e:	000b      	movs	r3, r1
 8005440:	0013      	movs	r3, r2
 8005442:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005446:	23c0      	movs	r3, #192	@ 0xc0
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	429a      	cmp	r2, r3
 800544c:	d309      	bcc.n	8005462 <UART_SetConfig+0x332>
 800544e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005450:	2380      	movs	r3, #128	@ 0x80
 8005452:	035b      	lsls	r3, r3, #13
 8005454:	429a      	cmp	r2, r3
 8005456:	d204      	bcs.n	8005462 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800545e:	60da      	str	r2, [r3, #12]
 8005460:	e0eb      	b.n	800563a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005462:	231a      	movs	r3, #26
 8005464:	2218      	movs	r2, #24
 8005466:	189b      	adds	r3, r3, r2
 8005468:	19db      	adds	r3, r3, r7
 800546a:	2201      	movs	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e0e4      	b.n	800563a <UART_SetConfig+0x50a>
 8005470:	efff69f3 	.word	0xefff69f3
 8005474:	ffffcfff 	.word	0xffffcfff
 8005478:	40004800 	.word	0x40004800
 800547c:	fffff4ff 	.word	0xfffff4ff
 8005480:	40013800 	.word	0x40013800
 8005484:	40021000 	.word	0x40021000
 8005488:	40004400 	.word	0x40004400
 800548c:	40004c00 	.word	0x40004c00
 8005490:	40005000 	.word	0x40005000
 8005494:	003d0900 	.word	0x003d0900
 8005498:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d000      	beq.n	80054aa <UART_SetConfig+0x37a>
 80054a8:	e070      	b.n	800558c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80054aa:	231b      	movs	r3, #27
 80054ac:	2218      	movs	r2, #24
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	19db      	adds	r3, r3, r7
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d822      	bhi.n	80054fe <UART_SetConfig+0x3ce>
 80054b8:	009a      	lsls	r2, r3, #2
 80054ba:	4b67      	ldr	r3, [pc, #412]	@ (8005658 <UART_SetConfig+0x528>)
 80054bc:	18d3      	adds	r3, r2, r3
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c2:	f7ff fa55 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 80054c6:	0003      	movs	r3, r0
 80054c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054ca:	e021      	b.n	8005510 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7ff fa66 	bl	800499c <HAL_RCC_GetPCLK2Freq>
 80054d0:	0003      	movs	r3, r0
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054d4:	e01c      	b.n	8005510 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054d6:	4b61      	ldr	r3, [pc, #388]	@ (800565c <UART_SetConfig+0x52c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2210      	movs	r2, #16
 80054dc:	4013      	ands	r3, r2
 80054de:	d002      	beq.n	80054e6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054e0:	4b5f      	ldr	r3, [pc, #380]	@ (8005660 <UART_SetConfig+0x530>)
 80054e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054e4:	e014      	b.n	8005510 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80054e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005664 <UART_SetConfig+0x534>)
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054ea:	e011      	b.n	8005510 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ec:	f7ff f990 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80054f0:	0003      	movs	r3, r0
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054f4:	e00c      	b.n	8005510 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f6:	2380      	movs	r3, #128	@ 0x80
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054fc:	e008      	b.n	8005510 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005502:	231a      	movs	r3, #26
 8005504:	2218      	movs	r2, #24
 8005506:	189b      	adds	r3, r3, r2
 8005508:	19db      	adds	r3, r3, r7
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
        break;
 800550e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d100      	bne.n	8005518 <UART_SetConfig+0x3e8>
 8005516:	e090      	b.n	800563a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551a:	005a      	lsls	r2, r3, #1
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	18d2      	adds	r2, r2, r3
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	0019      	movs	r1, r3
 800552a:	0010      	movs	r0, r2
 800552c:	f7fa fe26 	bl	800017c <__udivsi3>
 8005530:	0003      	movs	r3, r0
 8005532:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	2b0f      	cmp	r3, #15
 8005538:	d921      	bls.n	800557e <UART_SetConfig+0x44e>
 800553a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800553c:	2380      	movs	r3, #128	@ 0x80
 800553e:	025b      	lsls	r3, r3, #9
 8005540:	429a      	cmp	r2, r3
 8005542:	d21c      	bcs.n	800557e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	b29a      	uxth	r2, r3
 8005548:	200e      	movs	r0, #14
 800554a:	2418      	movs	r4, #24
 800554c:	1903      	adds	r3, r0, r4
 800554e:	19db      	adds	r3, r3, r7
 8005550:	210f      	movs	r1, #15
 8005552:	438a      	bics	r2, r1
 8005554:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	2207      	movs	r2, #7
 800555e:	4013      	ands	r3, r2
 8005560:	b299      	uxth	r1, r3
 8005562:	1903      	adds	r3, r0, r4
 8005564:	19db      	adds	r3, r3, r7
 8005566:	1902      	adds	r2, r0, r4
 8005568:	19d2      	adds	r2, r2, r7
 800556a:	8812      	ldrh	r2, [r2, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	1902      	adds	r2, r0, r4
 8005576:	19d2      	adds	r2, r2, r7
 8005578:	8812      	ldrh	r2, [r2, #0]
 800557a:	60da      	str	r2, [r3, #12]
 800557c:	e05d      	b.n	800563a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800557e:	231a      	movs	r3, #26
 8005580:	2218      	movs	r2, #24
 8005582:	189b      	adds	r3, r3, r2
 8005584:	19db      	adds	r3, r3, r7
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	e056      	b.n	800563a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800558c:	231b      	movs	r3, #27
 800558e:	2218      	movs	r2, #24
 8005590:	189b      	adds	r3, r3, r2
 8005592:	19db      	adds	r3, r3, r7
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b08      	cmp	r3, #8
 8005598:	d822      	bhi.n	80055e0 <UART_SetConfig+0x4b0>
 800559a:	009a      	lsls	r2, r3, #2
 800559c:	4b32      	ldr	r3, [pc, #200]	@ (8005668 <UART_SetConfig+0x538>)
 800559e:	18d3      	adds	r3, r2, r3
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a4:	f7ff f9e4 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 80055a8:	0003      	movs	r3, r0
 80055aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055ac:	e021      	b.n	80055f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ae:	f7ff f9f5 	bl	800499c <HAL_RCC_GetPCLK2Freq>
 80055b2:	0003      	movs	r3, r0
 80055b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055b6:	e01c      	b.n	80055f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b8:	4b28      	ldr	r3, [pc, #160]	@ (800565c <UART_SetConfig+0x52c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2210      	movs	r2, #16
 80055be:	4013      	ands	r3, r2
 80055c0:	d002      	beq.n	80055c8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80055c2:	4b27      	ldr	r3, [pc, #156]	@ (8005660 <UART_SetConfig+0x530>)
 80055c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055c6:	e014      	b.n	80055f2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80055c8:	4b26      	ldr	r3, [pc, #152]	@ (8005664 <UART_SetConfig+0x534>)
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055cc:	e011      	b.n	80055f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ce:	f7ff f91f 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80055d2:	0003      	movs	r3, r0
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055d6:	e00c      	b.n	80055f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d8:	2380      	movs	r3, #128	@ 0x80
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055de:	e008      	b.n	80055f2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80055e4:	231a      	movs	r3, #26
 80055e6:	2218      	movs	r2, #24
 80055e8:	189b      	adds	r3, r3, r2
 80055ea:	19db      	adds	r3, r3, r7
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
        break;
 80055f0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80055f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d020      	beq.n	800563a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	085a      	lsrs	r2, r3, #1
 80055fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005600:	18d2      	adds	r2, r2, r3
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	0019      	movs	r1, r3
 8005608:	0010      	movs	r0, r2
 800560a:	f7fa fdb7 	bl	800017c <__udivsi3>
 800560e:	0003      	movs	r3, r0
 8005610:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	2b0f      	cmp	r3, #15
 8005616:	d90a      	bls.n	800562e <UART_SetConfig+0x4fe>
 8005618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800561a:	2380      	movs	r3, #128	@ 0x80
 800561c:	025b      	lsls	r3, r3, #9
 800561e:	429a      	cmp	r2, r3
 8005620:	d205      	bcs.n	800562e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	b29a      	uxth	r2, r3
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60da      	str	r2, [r3, #12]
 800562c:	e005      	b.n	800563a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800562e:	231a      	movs	r3, #26
 8005630:	2218      	movs	r2, #24
 8005632:	189b      	adds	r3, r3, r2
 8005634:	19db      	adds	r3, r3, r7
 8005636:	2201      	movs	r2, #1
 8005638:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	2200      	movs	r2, #0
 800563e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2200      	movs	r2, #0
 8005644:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005646:	231a      	movs	r3, #26
 8005648:	2218      	movs	r2, #24
 800564a:	189b      	adds	r3, r3, r2
 800564c:	19db      	adds	r3, r3, r7
 800564e:	781b      	ldrb	r3, [r3, #0]
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b00e      	add	sp, #56	@ 0x38
 8005656:	bdb0      	pop	{r4, r5, r7, pc}
 8005658:	08007724 	.word	0x08007724
 800565c:	40021000 	.word	0x40021000
 8005660:	003d0900 	.word	0x003d0900
 8005664:	00f42400 	.word	0x00f42400
 8005668:	08007748 	.word	0x08007748

0800566c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	2201      	movs	r2, #1
 800567a:	4013      	ands	r3, r2
 800567c:	d00b      	beq.n	8005696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	4a4a      	ldr	r2, [pc, #296]	@ (80057b0 <UART_AdvFeatureConfig+0x144>)
 8005686:	4013      	ands	r3, r2
 8005688:	0019      	movs	r1, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	2202      	movs	r2, #2
 800569c:	4013      	ands	r3, r2
 800569e:	d00b      	beq.n	80056b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4a43      	ldr	r2, [pc, #268]	@ (80057b4 <UART_AdvFeatureConfig+0x148>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	0019      	movs	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	2204      	movs	r2, #4
 80056be:	4013      	ands	r3, r2
 80056c0:	d00b      	beq.n	80056da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a3b      	ldr	r2, [pc, #236]	@ (80057b8 <UART_AdvFeatureConfig+0x14c>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	0019      	movs	r1, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	2208      	movs	r2, #8
 80056e0:	4013      	ands	r3, r2
 80056e2:	d00b      	beq.n	80056fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4a34      	ldr	r2, [pc, #208]	@ (80057bc <UART_AdvFeatureConfig+0x150>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	0019      	movs	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005700:	2210      	movs	r2, #16
 8005702:	4013      	ands	r3, r2
 8005704:	d00b      	beq.n	800571e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4a2c      	ldr	r2, [pc, #176]	@ (80057c0 <UART_AdvFeatureConfig+0x154>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005722:	2220      	movs	r2, #32
 8005724:	4013      	ands	r3, r2
 8005726:	d00b      	beq.n	8005740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	4a25      	ldr	r2, [pc, #148]	@ (80057c4 <UART_AdvFeatureConfig+0x158>)
 8005730:	4013      	ands	r3, r2
 8005732:	0019      	movs	r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	2240      	movs	r2, #64	@ 0x40
 8005746:	4013      	ands	r3, r2
 8005748:	d01d      	beq.n	8005786 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4a1d      	ldr	r2, [pc, #116]	@ (80057c8 <UART_AdvFeatureConfig+0x15c>)
 8005752:	4013      	ands	r3, r2
 8005754:	0019      	movs	r1, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005766:	2380      	movs	r3, #128	@ 0x80
 8005768:	035b      	lsls	r3, r3, #13
 800576a:	429a      	cmp	r2, r3
 800576c:	d10b      	bne.n	8005786 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4a15      	ldr	r2, [pc, #84]	@ (80057cc <UART_AdvFeatureConfig+0x160>)
 8005776:	4013      	ands	r3, r2
 8005778:	0019      	movs	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	2280      	movs	r2, #128	@ 0x80
 800578c:	4013      	ands	r3, r2
 800578e:	d00b      	beq.n	80057a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4a0e      	ldr	r2, [pc, #56]	@ (80057d0 <UART_AdvFeatureConfig+0x164>)
 8005798:	4013      	ands	r3, r2
 800579a:	0019      	movs	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
  }
}
 80057a8:	46c0      	nop			@ (mov r8, r8)
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	fffdffff 	.word	0xfffdffff
 80057b4:	fffeffff 	.word	0xfffeffff
 80057b8:	fffbffff 	.word	0xfffbffff
 80057bc:	ffff7fff 	.word	0xffff7fff
 80057c0:	ffffefff 	.word	0xffffefff
 80057c4:	ffffdfff 	.word	0xffffdfff
 80057c8:	ffefffff 	.word	0xffefffff
 80057cc:	ff9fffff 	.word	0xff9fffff
 80057d0:	fff7ffff 	.word	0xfff7ffff

080057d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b092      	sub	sp, #72	@ 0x48
 80057d8:	af02      	add	r7, sp, #8
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2284      	movs	r2, #132	@ 0x84
 80057e0:	2100      	movs	r1, #0
 80057e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057e4:	f7fd fb68 	bl	8002eb8 <HAL_GetTick>
 80057e8:	0003      	movs	r3, r0
 80057ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2208      	movs	r2, #8
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d12c      	bne.n	8005854 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fc:	2280      	movs	r2, #128	@ 0x80
 80057fe:	0391      	lsls	r1, r2, #14
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4a46      	ldr	r2, [pc, #280]	@ (800591c <UART_CheckIdleState+0x148>)
 8005804:	9200      	str	r2, [sp, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	f000 f88c 	bl	8005924 <UART_WaitOnFlagUntilTimeout>
 800580c:	1e03      	subs	r3, r0, #0
 800580e:	d021      	beq.n	8005854 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005810:	f3ef 8310 	mrs	r3, PRIMASK
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005818:	63bb      	str	r3, [r7, #56]	@ 0x38
 800581a:	2301      	movs	r3, #1
 800581c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	f383 8810 	msr	PRIMASK, r3
}
 8005824:	46c0      	nop			@ (mov r8, r8)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2180      	movs	r1, #128	@ 0x80
 8005832:	438a      	bics	r2, r1
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583c:	f383 8810 	msr	PRIMASK, r3
}
 8005840:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2278      	movs	r2, #120	@ 0x78
 800584c:	2100      	movs	r1, #0
 800584e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e05f      	b.n	8005914 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2204      	movs	r2, #4
 800585c:	4013      	ands	r3, r2
 800585e:	2b04      	cmp	r3, #4
 8005860:	d146      	bne.n	80058f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005864:	2280      	movs	r2, #128	@ 0x80
 8005866:	03d1      	lsls	r1, r2, #15
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4a2c      	ldr	r2, [pc, #176]	@ (800591c <UART_CheckIdleState+0x148>)
 800586c:	9200      	str	r2, [sp, #0]
 800586e:	2200      	movs	r2, #0
 8005870:	f000 f858 	bl	8005924 <UART_WaitOnFlagUntilTimeout>
 8005874:	1e03      	subs	r3, r0, #0
 8005876:	d03b      	beq.n	80058f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005878:	f3ef 8310 	mrs	r3, PRIMASK
 800587c:	60fb      	str	r3, [r7, #12]
  return(result);
 800587e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005880:	637b      	str	r3, [r7, #52]	@ 0x34
 8005882:	2301      	movs	r3, #1
 8005884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f383 8810 	msr	PRIMASK, r3
}
 800588c:	46c0      	nop			@ (mov r8, r8)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4921      	ldr	r1, [pc, #132]	@ (8005920 <UART_CheckIdleState+0x14c>)
 800589a:	400a      	ands	r2, r1
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f383 8810 	msr	PRIMASK, r3
}
 80058a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058aa:	f3ef 8310 	mrs	r3, PRIMASK
 80058ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80058b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80058b4:	2301      	movs	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f383 8810 	msr	PRIMASK, r3
}
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2101      	movs	r1, #1
 80058cc:	438a      	bics	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	f383 8810 	msr	PRIMASK, r3
}
 80058da:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2280      	movs	r2, #128	@ 0x80
 80058e0:	2120      	movs	r1, #32
 80058e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2278      	movs	r2, #120	@ 0x78
 80058e8:	2100      	movs	r1, #0
 80058ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e011      	b.n	8005914 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2280      	movs	r2, #128	@ 0x80
 80058fa:	2120      	movs	r1, #32
 80058fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2278      	movs	r2, #120	@ 0x78
 800590e:	2100      	movs	r1, #0
 8005910:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	0018      	movs	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	b010      	add	sp, #64	@ 0x40
 800591a:	bd80      	pop	{r7, pc}
 800591c:	01ffffff 	.word	0x01ffffff
 8005920:	fffffedf 	.word	0xfffffedf

08005924 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	1dfb      	adds	r3, r7, #7
 8005932:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005934:	e04b      	b.n	80059ce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	3301      	adds	r3, #1
 800593a:	d048      	beq.n	80059ce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593c:	f7fd fabc 	bl	8002eb8 <HAL_GetTick>
 8005940:	0002      	movs	r2, r0
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	429a      	cmp	r2, r3
 800594a:	d302      	bcc.n	8005952 <UART_WaitOnFlagUntilTimeout+0x2e>
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e04b      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2204      	movs	r2, #4
 800595e:	4013      	ands	r3, r2
 8005960:	d035      	beq.n	80059ce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	2208      	movs	r2, #8
 800596a:	4013      	ands	r3, r2
 800596c:	2b08      	cmp	r3, #8
 800596e:	d111      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2208      	movs	r2, #8
 8005976:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	0018      	movs	r0, r3
 800597c:	f000 f83c 	bl	80059f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2284      	movs	r2, #132	@ 0x84
 8005984:	2108      	movs	r1, #8
 8005986:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2278      	movs	r2, #120	@ 0x78
 800598c:	2100      	movs	r1, #0
 800598e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e02c      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	401a      	ands	r2, r3
 80059a0:	2380      	movs	r3, #128	@ 0x80
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d112      	bne.n	80059ce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2280      	movs	r2, #128	@ 0x80
 80059ae:	0112      	lsls	r2, r2, #4
 80059b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	0018      	movs	r0, r3
 80059b6:	f000 f81f 	bl	80059f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2284      	movs	r2, #132	@ 0x84
 80059be:	2120      	movs	r1, #32
 80059c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2278      	movs	r2, #120	@ 0x78
 80059c6:	2100      	movs	r1, #0
 80059c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e00f      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	4013      	ands	r3, r2
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	425a      	negs	r2, r3
 80059de:	4153      	adcs	r3, r2
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	001a      	movs	r2, r3
 80059e4:	1dfb      	adds	r3, r7, #7
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d0a4      	beq.n	8005936 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b004      	add	sp, #16
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08e      	sub	sp, #56	@ 0x38
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	617b      	str	r3, [r7, #20]
  return(result);
 8005a06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			@ (mov r8, r8)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4926      	ldr	r1, [pc, #152]	@ (8005abc <UART_EndRxTransfer+0xc4>)
 8005a22:	400a      	ands	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f383 8810 	msr	PRIMASK, r3
}
 8005a30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a32:	f3ef 8310 	mrs	r3, PRIMASK
 8005a36:	623b      	str	r3, [r7, #32]
  return(result);
 8005a38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a42:	f383 8810 	msr	PRIMASK, r3
}
 8005a46:	46c0      	nop			@ (mov r8, r8)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2101      	movs	r1, #1
 8005a54:	438a      	bics	r2, r1
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	f383 8810 	msr	PRIMASK, r3
}
 8005a62:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d118      	bne.n	8005a9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a70:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a76:	2301      	movs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f383 8810 	msr	PRIMASK, r3
}
 8005a80:	46c0      	nop			@ (mov r8, r8)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2110      	movs	r1, #16
 8005a8e:	438a      	bics	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f383 8810 	msr	PRIMASK, r3
}
 8005a9c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2280      	movs	r2, #128	@ 0x80
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ab2:	46c0      	nop			@ (mov r8, r8)
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b00e      	add	sp, #56	@ 0x38
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	46c0      	nop			@ (mov r8, r8)
 8005abc:	fffffedf 	.word	0xfffffedf

08005ac0 <arm_cfft_radix4by2_q31>:
 8005ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac2:	465f      	mov	r7, fp
 8005ac4:	4656      	mov	r6, sl
 8005ac6:	464d      	mov	r5, r9
 8005ac8:	4644      	mov	r4, r8
 8005aca:	000b      	movs	r3, r1
 8005acc:	b4f0      	push	{r4, r5, r6, r7}
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	b08f      	sub	sp, #60	@ 0x3c
 8005ad2:	910a      	str	r1, [sp, #40]	@ 0x28
 8005ad4:	0007      	movs	r7, r0
 8005ad6:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ad8:	0011      	movs	r1, r2
 8005ada:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005adc:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d100      	bne.n	8005ae4 <arm_cfft_radix4by2_q31+0x24>
 8005ae2:	e0a0      	b.n	8005c26 <arm_cfft_radix4by2_q31+0x166>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	3204      	adds	r2, #4
 8005aea:	4691      	mov	r9, r2
 8005aec:	4698      	mov	r8, r3
 8005aee:	000a      	movs	r2, r1
 8005af0:	464e      	mov	r6, r9
 8005af2:	4442      	add	r2, r8
 8005af4:	4699      	mov	r9, r3
 8005af6:	4688      	mov	r8, r1
 8005af8:	9208      	str	r2, [sp, #32]
 8005afa:	900d      	str	r0, [sp, #52]	@ 0x34
 8005afc:	4643      	mov	r3, r8
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	469b      	mov	fp, r3
 8005b02:	4643      	mov	r3, r8
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	469a      	mov	sl, r3
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	109c      	asrs	r4, r3, #2
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	58fb      	ldr	r3, [r7, r3]
 8005b10:	109a      	asrs	r2, r3, #2
 8005b12:	18a3      	adds	r3, r4, r2
 8005b14:	603b      	str	r3, [r7, #0]
 8005b16:	6833      	ldr	r3, [r6, #0]
 8005b18:	1aa4      	subs	r4, r4, r2
 8005b1a:	109d      	asrs	r5, r3, #2
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	58f3      	ldr	r3, [r6, r3]
 8005b20:	17e2      	asrs	r2, r4, #31
 8005b22:	109b      	asrs	r3, r3, #2
 8005b24:	18e9      	adds	r1, r5, r3
 8005b26:	6031      	str	r1, [r6, #0]
 8005b28:	0011      	movs	r1, r2
 8005b2a:	465a      	mov	r2, fp
 8005b2c:	17d2      	asrs	r2, r2, #31
 8005b2e:	0010      	movs	r0, r2
 8005b30:	4652      	mov	r2, sl
 8005b32:	1aed      	subs	r5, r5, r3
 8005b34:	17eb      	asrs	r3, r5, #31
 8005b36:	17d2      	asrs	r2, r2, #31
 8005b38:	9307      	str	r3, [sp, #28]
 8005b3a:	9204      	str	r2, [sp, #16]
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	465a      	mov	r2, fp
 8005b40:	9006      	str	r0, [sp, #24]
 8005b42:	0020      	movs	r0, r4
 8005b44:	9105      	str	r1, [sp, #20]
 8005b46:	f7fa fbc5 	bl	80002d4 <__aeabi_lmul>
 8005b4a:	2280      	movs	r2, #128	@ 0x80
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	0612      	lsls	r2, r2, #24
 8005b50:	1880      	adds	r0, r0, r2
 8005b52:	4159      	adcs	r1, r3
 8005b54:	2300      	movs	r3, #0
 8005b56:	9101      	str	r1, [sp, #4]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	9b04      	ldr	r3, [sp, #16]
 8005b5e:	0028      	movs	r0, r5
 8005b60:	17e9      	asrs	r1, r5, #31
 8005b62:	f7fa fbb7 	bl	80002d4 <__aeabi_lmul>
 8005b66:	9a00      	ldr	r2, [sp, #0]
 8005b68:	9b01      	ldr	r3, [sp, #4]
 8005b6a:	1880      	adds	r0, r0, r2
 8005b6c:	4159      	adcs	r1, r3
 8005b6e:	2280      	movs	r2, #128	@ 0x80
 8005b70:	2300      	movs	r3, #0
 8005b72:	0612      	lsls	r2, r2, #24
 8005b74:	1880      	adds	r0, r0, r2
 8005b76:	4159      	adcs	r1, r3
 8005b78:	464a      	mov	r2, r9
 8005b7a:	004b      	lsls	r3, r1, #1
 8005b7c:	50bb      	str	r3, [r7, r2]
 8005b7e:	4658      	mov	r0, fp
 8005b80:	002a      	movs	r2, r5
 8005b82:	9b07      	ldr	r3, [sp, #28]
 8005b84:	9906      	ldr	r1, [sp, #24]
 8005b86:	f7fa fba5 	bl	80002d4 <__aeabi_lmul>
 8005b8a:	2280      	movs	r2, #128	@ 0x80
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	0612      	lsls	r2, r2, #24
 8005b90:	1880      	adds	r0, r0, r2
 8005b92:	4159      	adcs	r1, r3
 8005b94:	2000      	movs	r0, #0
 8005b96:	9103      	str	r1, [sp, #12]
 8005b98:	9002      	str	r0, [sp, #8]
 8005b9a:	4652      	mov	r2, sl
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	0020      	movs	r0, r4
 8005ba0:	9905      	ldr	r1, [sp, #20]
 8005ba2:	f7fa fb97 	bl	80002d4 <__aeabi_lmul>
 8005ba6:	9a02      	ldr	r2, [sp, #8]
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	1a12      	subs	r2, r2, r0
 8005bac:	418b      	sbcs	r3, r1
 8005bae:	2080      	movs	r0, #128	@ 0x80
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	0600      	lsls	r0, r0, #24
 8005bb4:	1812      	adds	r2, r2, r0
 8005bb6:	414b      	adcs	r3, r1
 8005bb8:	464a      	mov	r2, r9
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	50b3      	str	r3, [r6, r2]
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	469c      	mov	ip, r3
 8005bc2:	9b08      	ldr	r3, [sp, #32]
 8005bc4:	44e0      	add	r8, ip
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	3608      	adds	r6, #8
 8005bca:	4598      	cmp	r8, r3
 8005bcc:	d196      	bne.n	8005afc <arm_cfft_radix4by2_q31+0x3c>
 8005bce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005bd0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8005bd2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	003a      	movs	r2, r7
 8005bd8:	0029      	movs	r1, r5
 8005bda:	0020      	movs	r0, r4
 8005bdc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8005bde:	f000 f957 	bl	8005e90 <arm_radix4_butterfly_q31>
 8005be2:	46a4      	mov	ip, r4
 8005be4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005be6:	2302      	movs	r3, #2
 8005be8:	0088      	lsls	r0, r1, #2
 8005bea:	4460      	add	r0, ip
 8005bec:	003a      	movs	r2, r7
 8005bee:	0029      	movs	r1, r5
 8005bf0:	f000 f94e 	bl	8005e90 <arm_radix4_butterfly_q31>
 8005bf4:	46a4      	mov	ip, r4
 8005bf6:	0128      	lsls	r0, r5, #4
 8005bf8:	4460      	add	r0, ip
 8005bfa:	6833      	ldr	r3, [r6, #0]
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	6033      	str	r3, [r6, #0]
 8005c00:	6873      	ldr	r3, [r6, #4]
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	6073      	str	r3, [r6, #4]
 8005c06:	68b3      	ldr	r3, [r6, #8]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	60b3      	str	r3, [r6, #8]
 8005c0c:	68f3      	ldr	r3, [r6, #12]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	60f3      	str	r3, [r6, #12]
 8005c12:	3610      	adds	r6, #16
 8005c14:	42b0      	cmp	r0, r6
 8005c16:	d1f0      	bne.n	8005bfa <arm_cfft_radix4by2_q31+0x13a>
 8005c18:	b00f      	add	sp, #60	@ 0x3c
 8005c1a:	bc3c      	pop	{r2, r3, r4, r5}
 8005c1c:	4690      	mov	r8, r2
 8005c1e:	4699      	mov	r9, r3
 8005c20:	46a2      	mov	sl, r4
 8005c22:	46ab      	mov	fp, r5
 8005c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c26:	2302      	movs	r3, #2
 8005c28:	2100      	movs	r1, #0
 8005c2a:	0015      	movs	r5, r2
 8005c2c:	f000 f930 	bl	8005e90 <arm_radix4_butterfly_q31>
 8005c30:	46bc      	mov	ip, r7
 8005c32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c34:	002a      	movs	r2, r5
 8005c36:	0098      	lsls	r0, r3, #2
 8005c38:	4460      	add	r0, ip
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	f000 f927 	bl	8005e90 <arm_radix4_butterfly_q31>
 8005c42:	e7e9      	b.n	8005c18 <arm_cfft_radix4by2_q31+0x158>

08005c44 <arm_cfft_radix4by2_inverse_q31>:
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c46:	465f      	mov	r7, fp
 8005c48:	4656      	mov	r6, sl
 8005c4a:	464d      	mov	r5, r9
 8005c4c:	4644      	mov	r4, r8
 8005c4e:	000b      	movs	r3, r1
 8005c50:	b4f0      	push	{r4, r5, r6, r7}
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	b08f      	sub	sp, #60	@ 0x3c
 8005c56:	910a      	str	r1, [sp, #40]	@ 0x28
 8005c58:	0007      	movs	r7, r0
 8005c5a:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c5c:	0011      	movs	r1, r2
 8005c5e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005c60:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d100      	bne.n	8005c68 <arm_cfft_radix4by2_inverse_q31+0x24>
 8005c66:	e0a0      	b.n	8005daa <arm_cfft_radix4by2_inverse_q31+0x166>
 8005c68:	0002      	movs	r2, r0
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	3204      	adds	r2, #4
 8005c6e:	4691      	mov	r9, r2
 8005c70:	4698      	mov	r8, r3
 8005c72:	000a      	movs	r2, r1
 8005c74:	464e      	mov	r6, r9
 8005c76:	4442      	add	r2, r8
 8005c78:	4699      	mov	r9, r3
 8005c7a:	4688      	mov	r8, r1
 8005c7c:	9208      	str	r2, [sp, #32]
 8005c7e:	900d      	str	r0, [sp, #52]	@ 0x34
 8005c80:	4643      	mov	r3, r8
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	469b      	mov	fp, r3
 8005c86:	4643      	mov	r3, r8
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	469a      	mov	sl, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	109c      	asrs	r4, r3, #2
 8005c90:	464b      	mov	r3, r9
 8005c92:	58fb      	ldr	r3, [r7, r3]
 8005c94:	109a      	asrs	r2, r3, #2
 8005c96:	18a3      	adds	r3, r4, r2
 8005c98:	603b      	str	r3, [r7, #0]
 8005c9a:	6833      	ldr	r3, [r6, #0]
 8005c9c:	1aa4      	subs	r4, r4, r2
 8005c9e:	109d      	asrs	r5, r3, #2
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	58f3      	ldr	r3, [r6, r3]
 8005ca4:	17e2      	asrs	r2, r4, #31
 8005ca6:	109b      	asrs	r3, r3, #2
 8005ca8:	18e9      	adds	r1, r5, r3
 8005caa:	6031      	str	r1, [r6, #0]
 8005cac:	0011      	movs	r1, r2
 8005cae:	465a      	mov	r2, fp
 8005cb0:	17d2      	asrs	r2, r2, #31
 8005cb2:	0010      	movs	r0, r2
 8005cb4:	4652      	mov	r2, sl
 8005cb6:	1aed      	subs	r5, r5, r3
 8005cb8:	17eb      	asrs	r3, r5, #31
 8005cba:	17d2      	asrs	r2, r2, #31
 8005cbc:	9307      	str	r3, [sp, #28]
 8005cbe:	9204      	str	r2, [sp, #16]
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	465a      	mov	r2, fp
 8005cc4:	9006      	str	r0, [sp, #24]
 8005cc6:	0020      	movs	r0, r4
 8005cc8:	9105      	str	r1, [sp, #20]
 8005cca:	f7fa fb03 	bl	80002d4 <__aeabi_lmul>
 8005cce:	2280      	movs	r2, #128	@ 0x80
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	0612      	lsls	r2, r2, #24
 8005cd4:	1880      	adds	r0, r0, r2
 8005cd6:	4159      	adcs	r1, r3
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9101      	str	r1, [sp, #4]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	4652      	mov	r2, sl
 8005ce0:	9b04      	ldr	r3, [sp, #16]
 8005ce2:	0028      	movs	r0, r5
 8005ce4:	17e9      	asrs	r1, r5, #31
 8005ce6:	f7fa faf5 	bl	80002d4 <__aeabi_lmul>
 8005cea:	9a00      	ldr	r2, [sp, #0]
 8005cec:	9b01      	ldr	r3, [sp, #4]
 8005cee:	1a12      	subs	r2, r2, r0
 8005cf0:	418b      	sbcs	r3, r1
 8005cf2:	2080      	movs	r0, #128	@ 0x80
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	0600      	lsls	r0, r0, #24
 8005cf8:	1812      	adds	r2, r2, r0
 8005cfa:	414b      	adcs	r3, r1
 8005cfc:	464a      	mov	r2, r9
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	50bb      	str	r3, [r7, r2]
 8005d02:	4658      	mov	r0, fp
 8005d04:	002a      	movs	r2, r5
 8005d06:	9b07      	ldr	r3, [sp, #28]
 8005d08:	9906      	ldr	r1, [sp, #24]
 8005d0a:	f7fa fae3 	bl	80002d4 <__aeabi_lmul>
 8005d0e:	2280      	movs	r2, #128	@ 0x80
 8005d10:	2300      	movs	r3, #0
 8005d12:	0612      	lsls	r2, r2, #24
 8005d14:	1880      	adds	r0, r0, r2
 8005d16:	4159      	adcs	r1, r3
 8005d18:	2000      	movs	r0, #0
 8005d1a:	9103      	str	r1, [sp, #12]
 8005d1c:	9002      	str	r0, [sp, #8]
 8005d1e:	4652      	mov	r2, sl
 8005d20:	9b04      	ldr	r3, [sp, #16]
 8005d22:	0020      	movs	r0, r4
 8005d24:	9905      	ldr	r1, [sp, #20]
 8005d26:	f7fa fad5 	bl	80002d4 <__aeabi_lmul>
 8005d2a:	9b02      	ldr	r3, [sp, #8]
 8005d2c:	9c03      	ldr	r4, [sp, #12]
 8005d2e:	18c0      	adds	r0, r0, r3
 8005d30:	4161      	adcs	r1, r4
 8005d32:	2380      	movs	r3, #128	@ 0x80
 8005d34:	2400      	movs	r4, #0
 8005d36:	061b      	lsls	r3, r3, #24
 8005d38:	18c0      	adds	r0, r0, r3
 8005d3a:	4161      	adcs	r1, r4
 8005d3c:	464a      	mov	r2, r9
 8005d3e:	004b      	lsls	r3, r1, #1
 8005d40:	50b3      	str	r3, [r6, r2]
 8005d42:	2308      	movs	r3, #8
 8005d44:	469c      	mov	ip, r3
 8005d46:	9b08      	ldr	r3, [sp, #32]
 8005d48:	44e0      	add	r8, ip
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	3608      	adds	r6, #8
 8005d4e:	4598      	cmp	r8, r3
 8005d50:	d196      	bne.n	8005c80 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8005d52:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005d54:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8005d56:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005d58:	2302      	movs	r3, #2
 8005d5a:	003a      	movs	r2, r7
 8005d5c:	0029      	movs	r1, r5
 8005d5e:	0020      	movs	r0, r4
 8005d60:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8005d62:	f000 fb3b 	bl	80063dc <arm_radix4_butterfly_inverse_q31>
 8005d66:	46a4      	mov	ip, r4
 8005d68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	0088      	lsls	r0, r1, #2
 8005d6e:	4460      	add	r0, ip
 8005d70:	003a      	movs	r2, r7
 8005d72:	0029      	movs	r1, r5
 8005d74:	f000 fb32 	bl	80063dc <arm_radix4_butterfly_inverse_q31>
 8005d78:	46a4      	mov	ip, r4
 8005d7a:	0128      	lsls	r0, r5, #4
 8005d7c:	4460      	add	r0, ip
 8005d7e:	6833      	ldr	r3, [r6, #0]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	6873      	ldr	r3, [r6, #4]
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	6073      	str	r3, [r6, #4]
 8005d8a:	68b3      	ldr	r3, [r6, #8]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	60b3      	str	r3, [r6, #8]
 8005d90:	68f3      	ldr	r3, [r6, #12]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	60f3      	str	r3, [r6, #12]
 8005d96:	3610      	adds	r6, #16
 8005d98:	42b0      	cmp	r0, r6
 8005d9a:	d1f0      	bne.n	8005d7e <arm_cfft_radix4by2_inverse_q31+0x13a>
 8005d9c:	b00f      	add	sp, #60	@ 0x3c
 8005d9e:	bc3c      	pop	{r2, r3, r4, r5}
 8005da0:	4690      	mov	r8, r2
 8005da2:	4699      	mov	r9, r3
 8005da4:	46a2      	mov	sl, r4
 8005da6:	46ab      	mov	fp, r5
 8005da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005daa:	2302      	movs	r3, #2
 8005dac:	2100      	movs	r1, #0
 8005dae:	0015      	movs	r5, r2
 8005db0:	f000 fb14 	bl	80063dc <arm_radix4_butterfly_inverse_q31>
 8005db4:	46bc      	mov	ip, r7
 8005db6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005db8:	002a      	movs	r2, r5
 8005dba:	0098      	lsls	r0, r3, #2
 8005dbc:	4460      	add	r0, ip
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	f000 fb0b 	bl	80063dc <arm_radix4_butterfly_inverse_q31>
 8005dc6:	e7e9      	b.n	8005d9c <arm_cfft_radix4by2_inverse_q31+0x158>

08005dc8 <arm_cfft_q31>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	001e      	movs	r6, r3
 8005dcc:	2380      	movs	r3, #128	@ 0x80
 8005dce:	000d      	movs	r5, r1
 8005dd0:	0004      	movs	r4, r0
 8005dd2:	8801      	ldrh	r1, [r0, #0]
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	2a01      	cmp	r2, #1
 8005dd8:	d028      	beq.n	8005e2c <arm_cfft_q31+0x64>
 8005dda:	4299      	cmp	r1, r3
 8005ddc:	d020      	beq.n	8005e20 <arm_cfft_q31+0x58>
 8005dde:	d812      	bhi.n	8005e06 <arm_cfft_q31+0x3e>
 8005de0:	2920      	cmp	r1, #32
 8005de2:	d004      	beq.n	8005dee <arm_cfft_q31+0x26>
 8005de4:	d949      	bls.n	8005e7a <arm_cfft_q31+0xb2>
 8005de6:	2940      	cmp	r1, #64	@ 0x40
 8005de8:	d01a      	beq.n	8005e20 <arm_cfft_q31+0x58>
 8005dea:	2980      	cmp	r1, #128	@ 0x80
 8005dec:	d103      	bne.n	8005df6 <arm_cfft_q31+0x2e>
 8005dee:	6862      	ldr	r2, [r4, #4]
 8005df0:	0028      	movs	r0, r5
 8005df2:	f7ff fe65 	bl	8005ac0 <arm_cfft_radix4by2_q31>
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	d004      	beq.n	8005e04 <arm_cfft_q31+0x3c>
 8005dfa:	68a2      	ldr	r2, [r4, #8]
 8005dfc:	89a1      	ldrh	r1, [r4, #12]
 8005dfe:	0028      	movs	r0, r5
 8005e00:	f7fa f982 	bl	8000108 <arm_bitreversal_32>
 8005e04:	bd70      	pop	{r4, r5, r6, pc}
 8005e06:	2380      	movs	r3, #128	@ 0x80
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	d008      	beq.n	8005e20 <arm_cfft_q31+0x58>
 8005e0e:	d92f      	bls.n	8005e70 <arm_cfft_q31+0xa8>
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	4299      	cmp	r1, r3
 8005e16:	d0ea      	beq.n	8005dee <arm_cfft_q31+0x26>
 8005e18:	2380      	movs	r3, #128	@ 0x80
 8005e1a:	015b      	lsls	r3, r3, #5
 8005e1c:	4299      	cmp	r1, r3
 8005e1e:	d1ea      	bne.n	8005df6 <arm_cfft_q31+0x2e>
 8005e20:	2301      	movs	r3, #1
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	0028      	movs	r0, r5
 8005e26:	f000 f833 	bl	8005e90 <arm_radix4_butterfly_q31>
 8005e2a:	e7e4      	b.n	8005df6 <arm_cfft_q31+0x2e>
 8005e2c:	4299      	cmp	r1, r3
 8005e2e:	d019      	beq.n	8005e64 <arm_cfft_q31+0x9c>
 8005e30:	d80b      	bhi.n	8005e4a <arm_cfft_q31+0x82>
 8005e32:	2920      	cmp	r1, #32
 8005e34:	d004      	beq.n	8005e40 <arm_cfft_q31+0x78>
 8005e36:	d928      	bls.n	8005e8a <arm_cfft_q31+0xc2>
 8005e38:	2940      	cmp	r1, #64	@ 0x40
 8005e3a:	d013      	beq.n	8005e64 <arm_cfft_q31+0x9c>
 8005e3c:	2980      	cmp	r1, #128	@ 0x80
 8005e3e:	d1da      	bne.n	8005df6 <arm_cfft_q31+0x2e>
 8005e40:	6862      	ldr	r2, [r4, #4]
 8005e42:	0028      	movs	r0, r5
 8005e44:	f7ff fefe 	bl	8005c44 <arm_cfft_radix4by2_inverse_q31>
 8005e48:	e7d5      	b.n	8005df6 <arm_cfft_q31+0x2e>
 8005e4a:	2380      	movs	r3, #128	@ 0x80
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	4299      	cmp	r1, r3
 8005e50:	d008      	beq.n	8005e64 <arm_cfft_q31+0x9c>
 8005e52:	d915      	bls.n	8005e80 <arm_cfft_q31+0xb8>
 8005e54:	2380      	movs	r3, #128	@ 0x80
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	d0f1      	beq.n	8005e40 <arm_cfft_q31+0x78>
 8005e5c:	2380      	movs	r3, #128	@ 0x80
 8005e5e:	015b      	lsls	r3, r3, #5
 8005e60:	4299      	cmp	r1, r3
 8005e62:	d1c8      	bne.n	8005df6 <arm_cfft_q31+0x2e>
 8005e64:	2301      	movs	r3, #1
 8005e66:	6862      	ldr	r2, [r4, #4]
 8005e68:	0028      	movs	r0, r5
 8005e6a:	f000 fab7 	bl	80063dc <arm_radix4_butterfly_inverse_q31>
 8005e6e:	e7c2      	b.n	8005df6 <arm_cfft_q31+0x2e>
 8005e70:	2380      	movs	r3, #128	@ 0x80
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4299      	cmp	r1, r3
 8005e76:	d0ba      	beq.n	8005dee <arm_cfft_q31+0x26>
 8005e78:	e7bd      	b.n	8005df6 <arm_cfft_q31+0x2e>
 8005e7a:	2910      	cmp	r1, #16
 8005e7c:	d1bb      	bne.n	8005df6 <arm_cfft_q31+0x2e>
 8005e7e:	e7cf      	b.n	8005e20 <arm_cfft_q31+0x58>
 8005e80:	2380      	movs	r3, #128	@ 0x80
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4299      	cmp	r1, r3
 8005e86:	d0db      	beq.n	8005e40 <arm_cfft_q31+0x78>
 8005e88:	e7b5      	b.n	8005df6 <arm_cfft_q31+0x2e>
 8005e8a:	2910      	cmp	r1, #16
 8005e8c:	d1b3      	bne.n	8005df6 <arm_cfft_q31+0x2e>
 8005e8e:	e7e9      	b.n	8005e64 <arm_cfft_q31+0x9c>

08005e90 <arm_radix4_butterfly_q31>:
 8005e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e92:	464d      	mov	r5, r9
 8005e94:	4644      	mov	r4, r8
 8005e96:	465f      	mov	r7, fp
 8005e98:	4656      	mov	r6, sl
 8005e9a:	469c      	mov	ip, r3
 8005e9c:	b4f0      	push	{r4, r5, r6, r7}
 8005e9e:	b0a7      	sub	sp, #156	@ 0x9c
 8005ea0:	9114      	str	r1, [sp, #80]	@ 0x50
 8005ea2:	0889      	lsrs	r1, r1, #2
 8005ea4:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ea6:	00cb      	lsls	r3, r1, #3
 8005ea8:	0015      	movs	r5, r2
 8005eaa:	9223      	str	r2, [sp, #140]	@ 0x8c
 8005eac:	18c2      	adds	r2, r0, r3
 8005eae:	000c      	movs	r4, r1
 8005eb0:	469a      	mov	sl, r3
 8005eb2:	9124      	str	r1, [sp, #144]	@ 0x90
 8005eb4:	18d1      	adds	r1, r2, r3
 8005eb6:	4663      	mov	r3, ip
 8005eb8:	468b      	mov	fp, r1
 8005eba:	0119      	lsls	r1, r3, #4
 8005ebc:	910d      	str	r1, [sp, #52]	@ 0x34
 8005ebe:	00d9      	lsls	r1, r3, #3
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	4463      	add	r3, ip
 8005ec4:	910e      	str	r1, [sp, #56]	@ 0x38
 8005ec6:	00d9      	lsls	r1, r3, #3
 8005ec8:	465b      	mov	r3, fp
 8005eca:	44da      	add	sl, fp
 8005ecc:	4690      	mov	r8, r2
 8005ece:	4683      	mov	fp, r0
 8005ed0:	4699      	mov	r9, r3
 8005ed2:	9022      	str	r0, [sp, #136]	@ 0x88
 8005ed4:	9025      	str	r0, [sp, #148]	@ 0x94
 8005ed6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8005ed8:	9502      	str	r5, [sp, #8]
 8005eda:	9500      	str	r5, [sp, #0]
 8005edc:	9501      	str	r5, [sp, #4]
 8005ede:	9407      	str	r4, [sp, #28]
 8005ee0:	465b      	mov	r3, fp
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	111c      	asrs	r4, r3, #4
 8005ee8:	464b      	mov	r3, r9
 8005eea:	4658      	mov	r0, fp
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	111b      	asrs	r3, r3, #4
 8005ef2:	18e7      	adds	r7, r4, r3
 8005ef4:	1ae3      	subs	r3, r4, r3
 8005ef6:	1114      	asrs	r4, r2, #4
 8005ef8:	4652      	mov	r2, sl
 8005efa:	6840      	ldr	r0, [r0, #4]
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	1105      	asrs	r5, r0, #4
 8005f00:	4648      	mov	r0, r9
 8005f02:	9303      	str	r3, [sp, #12]
 8005f04:	1113      	asrs	r3, r2, #4
 8005f06:	18e2      	adds	r2, r4, r3
 8005f08:	465c      	mov	r4, fp
 8005f0a:	6840      	ldr	r0, [r0, #4]
 8005f0c:	1103      	asrs	r3, r0, #4
 8005f0e:	18ee      	adds	r6, r5, r3
 8005f10:	1ae8      	subs	r0, r5, r3
 8005f12:	18bb      	adds	r3, r7, r2
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	4644      	mov	r4, r8
 8005f18:	6864      	ldr	r4, [r4, #4]
 8005f1a:	9004      	str	r0, [sp, #16]
 8005f1c:	1125      	asrs	r5, r4, #4
 8005f1e:	4654      	mov	r4, sl
 8005f20:	6864      	ldr	r4, [r4, #4]
 8005f22:	1123      	asrs	r3, r4, #4
 8005f24:	465c      	mov	r4, fp
 8005f26:	18eb      	adds	r3, r5, r3
 8005f28:	18f1      	adds	r1, r6, r3
 8005f2a:	6061      	str	r1, [r4, #4]
 8005f2c:	4655      	mov	r5, sl
 8005f2e:	4644      	mov	r4, r8
 8005f30:	686d      	ldr	r5, [r5, #4]
 8005f32:	6864      	ldr	r4, [r4, #4]
 8005f34:	1129      	asrs	r1, r5, #4
 8005f36:	1124      	asrs	r4, r4, #4
 8005f38:	1a64      	subs	r4, r4, r1
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	6809      	ldr	r1, [r1, #0]
 8005f3e:	9405      	str	r4, [sp, #20]
 8005f40:	1108      	asrs	r0, r1, #4
 8005f42:	4651      	mov	r1, sl
 8005f44:	6809      	ldr	r1, [r1, #0]
 8005f46:	1abc      	subs	r4, r7, r2
 8005f48:	1109      	asrs	r1, r1, #4
 8005f4a:	1a41      	subs	r1, r0, r1
 8005f4c:	17e2      	asrs	r2, r4, #31
 8005f4e:	9106      	str	r1, [sp, #24]
 8005f50:	0011      	movs	r1, r2
 8005f52:	9a01      	ldr	r2, [sp, #4]
 8005f54:	9108      	str	r1, [sp, #32]
 8005f56:	6817      	ldr	r7, [r2, #0]
 8005f58:	17fd      	asrs	r5, r7, #31
 8005f5a:	0028      	movs	r0, r5
 8005f5c:	1af5      	subs	r5, r6, r3
 8005f5e:	17ee      	asrs	r6, r5, #31
 8005f60:	960a      	str	r6, [sp, #40]	@ 0x28
 8005f62:	6856      	ldr	r6, [r2, #4]
 8005f64:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f66:	17f3      	asrs	r3, r6, #31
 8005f68:	003a      	movs	r2, r7
 8005f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	0020      	movs	r0, r4
 8005f70:	f7fa f9b0 	bl	80002d4 <__aeabi_lmul>
 8005f74:	0032      	movs	r2, r6
 8005f76:	17f3      	asrs	r3, r6, #31
 8005f78:	910c      	str	r1, [sp, #48]	@ 0x30
 8005f7a:	0028      	movs	r0, r5
 8005f7c:	17e9      	asrs	r1, r5, #31
 8005f7e:	f7fa f9a9 	bl	80002d4 <__aeabi_lmul>
 8005f82:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005f84:	002a      	movs	r2, r5
 8005f86:	4684      	mov	ip, r0
 8005f88:	4640      	mov	r0, r8
 8005f8a:	4461      	add	r1, ip
 8005f8c:	0049      	lsls	r1, r1, #1
 8005f8e:	6001      	str	r1, [r0, #0]
 8005f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f94:	0038      	movs	r0, r7
 8005f96:	f7fa f99d 	bl	80002d4 <__aeabi_lmul>
 8005f9a:	0032      	movs	r2, r6
 8005f9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f9e:	000d      	movs	r5, r1
 8005fa0:	0020      	movs	r0, r4
 8005fa2:	9908      	ldr	r1, [sp, #32]
 8005fa4:	f7fa f996 	bl	80002d4 <__aeabi_lmul>
 8005fa8:	4646      	mov	r6, r8
 8005faa:	1a6d      	subs	r5, r5, r1
 8005fac:	006d      	lsls	r5, r5, #1
 8005fae:	6075      	str	r5, [r6, #4]
 8005fb0:	9903      	ldr	r1, [sp, #12]
 8005fb2:	9d05      	ldr	r5, [sp, #20]
 8005fb4:	000c      	movs	r4, r1
 8005fb6:	46ac      	mov	ip, r5
 8005fb8:	4464      	add	r4, ip
 8005fba:	17e6      	asrs	r6, r4, #31
 8005fbc:	0031      	movs	r1, r6
 8005fbe:	9b00      	ldr	r3, [sp, #0]
 8005fc0:	9804      	ldr	r0, [sp, #16]
 8005fc2:	681e      	ldr	r6, [r3, #0]
 8005fc4:	17f7      	asrs	r7, r6, #31
 8005fc6:	9709      	str	r7, [sp, #36]	@ 0x24
 8005fc8:	9f06      	ldr	r7, [sp, #24]
 8005fca:	0032      	movs	r2, r6
 8005fcc:	1bc7      	subs	r7, r0, r7
 8005fce:	17fd      	asrs	r5, r7, #31
 8005fd0:	950a      	str	r5, [sp, #40]	@ 0x28
 8005fd2:	685d      	ldr	r5, [r3, #4]
 8005fd4:	17f3      	asrs	r3, r6, #31
 8005fd6:	17e8      	asrs	r0, r5, #31
 8005fd8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005fda:	0020      	movs	r0, r4
 8005fdc:	9108      	str	r1, [sp, #32]
 8005fde:	f7fa f979 	bl	80002d4 <__aeabi_lmul>
 8005fe2:	002a      	movs	r2, r5
 8005fe4:	17eb      	asrs	r3, r5, #31
 8005fe6:	910c      	str	r1, [sp, #48]	@ 0x30
 8005fe8:	0038      	movs	r0, r7
 8005fea:	17f9      	asrs	r1, r7, #31
 8005fec:	f7fa f972 	bl	80002d4 <__aeabi_lmul>
 8005ff0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005ff2:	003a      	movs	r2, r7
 8005ff4:	4684      	mov	ip, r0
 8005ff6:	4648      	mov	r0, r9
 8005ff8:	4461      	add	r1, ip
 8005ffa:	0049      	lsls	r1, r1, #1
 8005ffc:	6001      	str	r1, [r0, #0]
 8005ffe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006000:	0030      	movs	r0, r6
 8006002:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006004:	f7fa f966 	bl	80002d4 <__aeabi_lmul>
 8006008:	002a      	movs	r2, r5
 800600a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800600c:	000e      	movs	r6, r1
 800600e:	0020      	movs	r0, r4
 8006010:	9908      	ldr	r1, [sp, #32]
 8006012:	f7fa f95f 	bl	80002d4 <__aeabi_lmul>
 8006016:	464c      	mov	r4, r9
 8006018:	9d05      	ldr	r5, [sp, #20]
 800601a:	1a76      	subs	r6, r6, r1
 800601c:	9903      	ldr	r1, [sp, #12]
 800601e:	0076      	lsls	r6, r6, #1
 8006020:	6066      	str	r6, [r4, #4]
 8006022:	1b4c      	subs	r4, r1, r5
 8006024:	9e06      	ldr	r6, [sp, #24]
 8006026:	17e1      	asrs	r1, r4, #31
 8006028:	9103      	str	r1, [sp, #12]
 800602a:	9902      	ldr	r1, [sp, #8]
 800602c:	46b4      	mov	ip, r6
 800602e:	680f      	ldr	r7, [r1, #0]
 8006030:	9804      	ldr	r0, [sp, #16]
 8006032:	17fd      	asrs	r5, r7, #31
 8006034:	002b      	movs	r3, r5
 8006036:	684e      	ldr	r6, [r1, #4]
 8006038:	4460      	add	r0, ip
 800603a:	0005      	movs	r5, r0
 800603c:	17c0      	asrs	r0, r0, #31
 800603e:	9005      	str	r0, [sp, #20]
 8006040:	17f0      	asrs	r0, r6, #31
 8006042:	9006      	str	r0, [sp, #24]
 8006044:	003a      	movs	r2, r7
 8006046:	0020      	movs	r0, r4
 8006048:	17e1      	asrs	r1, r4, #31
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	f7fa f942 	bl	80002d4 <__aeabi_lmul>
 8006050:	0032      	movs	r2, r6
 8006052:	9108      	str	r1, [sp, #32]
 8006054:	17f3      	asrs	r3, r6, #31
 8006056:	0028      	movs	r0, r5
 8006058:	17e9      	asrs	r1, r5, #31
 800605a:	f7fa f93b 	bl	80002d4 <__aeabi_lmul>
 800605e:	9808      	ldr	r0, [sp, #32]
 8006060:	002a      	movs	r2, r5
 8006062:	4684      	mov	ip, r0
 8006064:	4650      	mov	r0, sl
 8006066:	4461      	add	r1, ip
 8006068:	0049      	lsls	r1, r1, #1
 800606a:	6001      	str	r1, [r0, #0]
 800606c:	9b05      	ldr	r3, [sp, #20]
 800606e:	9904      	ldr	r1, [sp, #16]
 8006070:	0038      	movs	r0, r7
 8006072:	f7fa f92f 	bl	80002d4 <__aeabi_lmul>
 8006076:	0020      	movs	r0, r4
 8006078:	2408      	movs	r4, #8
 800607a:	000d      	movs	r5, r1
 800607c:	0032      	movs	r2, r6
 800607e:	9b06      	ldr	r3, [sp, #24]
 8006080:	9903      	ldr	r1, [sp, #12]
 8006082:	f7fa f927 	bl	80002d4 <__aeabi_lmul>
 8006086:	46a4      	mov	ip, r4
 8006088:	4650      	mov	r0, sl
 800608a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800608c:	44e3      	add	fp, ip
 800608e:	44e0      	add	r8, ip
 8006090:	44e1      	add	r9, ip
 8006092:	44e2      	add	sl, ip
 8006094:	46a4      	mov	ip, r4
 8006096:	1a6d      	subs	r5, r5, r1
 8006098:	006d      	lsls	r5, r5, #1
 800609a:	9a01      	ldr	r2, [sp, #4]
 800609c:	6045      	str	r5, [r0, #4]
 800609e:	9807      	ldr	r0, [sp, #28]
 80060a0:	4462      	add	r2, ip
 80060a2:	3801      	subs	r0, #1
 80060a4:	9201      	str	r2, [sp, #4]
 80060a6:	9007      	str	r0, [sp, #28]
 80060a8:	9b00      	ldr	r3, [sp, #0]
 80060aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060ac:	9902      	ldr	r1, [sp, #8]
 80060ae:	4694      	mov	ip, r2
 80060b0:	4463      	add	r3, ip
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060b6:	469c      	mov	ip, r3
 80060b8:	4461      	add	r1, ip
 80060ba:	9102      	str	r1, [sp, #8]
 80060bc:	2800      	cmp	r0, #0
 80060be:	d000      	beq.n	80060c2 <arm_radix4_butterfly_q31+0x232>
 80060c0:	e70e      	b.n	8005ee0 <arm_radix4_butterfly_q31+0x50>
 80060c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80060c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060ca:	9320      	str	r3, [sp, #128]	@ 0x80
 80060cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d800      	bhi.n	80060d4 <arm_radix4_butterfly_q31+0x244>
 80060d2:	e180      	b.n	80063d6 <arm_radix4_butterfly_q31+0x546>
 80060d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80060d6:	0893      	lsrs	r3, r2, #2
 80060d8:	1e59      	subs	r1, r3, #1
 80060da:	9321      	str	r3, [sp, #132]	@ 0x84
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	931b      	str	r3, [sp, #108]	@ 0x6c
 80060e0:	00d3      	lsls	r3, r2, #3
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80060e6:	911a      	str	r1, [sp, #104]	@ 0x68
 80060e8:	00da      	lsls	r2, r3, #3
 80060ea:	921e      	str	r2, [sp, #120]	@ 0x78
 80060ec:	011a      	lsls	r2, r3, #4
 80060ee:	921d      	str	r2, [sp, #116]	@ 0x74
 80060f0:	001a      	movs	r2, r3
 80060f2:	4694      	mov	ip, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	4463      	add	r3, ip
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	931c      	str	r3, [sp, #112]	@ 0x70
 80060fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006100:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006102:	9318      	str	r3, [sp, #96]	@ 0x60
 8006104:	9319      	str	r3, [sp, #100]	@ 0x64
 8006106:	9316      	str	r3, [sp, #88]	@ 0x58
 8006108:	2300      	movs	r3, #0
 800610a:	9315      	str	r3, [sp, #84]	@ 0x54
 800610c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800610e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	9205      	str	r2, [sp, #20]
 8006116:	9306      	str	r3, [sp, #24]
 8006118:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800611a:	468c      	mov	ip, r1
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	9207      	str	r2, [sp, #28]
 8006122:	9308      	str	r3, [sp, #32]
 8006124:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	9209      	str	r2, [sp, #36]	@ 0x24
 800612c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800612e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006130:	0013      	movs	r3, r2
 8006132:	4463      	add	r3, ip
 8006134:	4698      	mov	r8, r3
 8006136:	0013      	movs	r3, r2
 8006138:	4442      	add	r2, r8
 800613a:	4691      	mov	r9, r2
 800613c:	001a      	movs	r2, r3
 800613e:	444a      	add	r2, r9
 8006140:	4692      	mov	sl, r2
 8006142:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006144:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006146:	4293      	cmp	r3, r2
 8006148:	d800      	bhi.n	800614c <arm_radix4_butterfly_q31+0x2bc>
 800614a:	e0dd      	b.n	8006308 <arm_radix4_butterfly_q31+0x478>
 800614c:	4694      	mov	ip, r2
 800614e:	468b      	mov	fp, r1
 8006150:	4644      	mov	r4, r8
 8006152:	4655      	mov	r5, sl
 8006154:	9b07      	ldr	r3, [sp, #28]
 8006156:	17db      	asrs	r3, r3, #31
 8006158:	930c      	str	r3, [sp, #48]	@ 0x30
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	17db      	asrs	r3, r3, #31
 800615e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006160:	9b05      	ldr	r3, [sp, #20]
 8006162:	17db      	asrs	r3, r3, #31
 8006164:	930e      	str	r3, [sp, #56]	@ 0x38
 8006166:	9b06      	ldr	r3, [sp, #24]
 8006168:	17db      	asrs	r3, r3, #31
 800616a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800616c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800616e:	17db      	asrs	r3, r3, #31
 8006170:	9310      	str	r3, [sp, #64]	@ 0x40
 8006172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006174:	17db      	asrs	r3, r3, #31
 8006176:	9311      	str	r3, [sp, #68]	@ 0x44
 8006178:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800617a:	4463      	add	r3, ip
 800617c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800617e:	465b      	mov	r3, fp
 8006180:	4659      	mov	r1, fp
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	464b      	mov	r3, r9
 8006186:	684f      	ldr	r7, [r1, #4]
 8006188:	4649      	mov	r1, r9
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	18d6      	adds	r6, r2, r3
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	684b      	ldr	r3, [r1, #4]
 8006194:	18f8      	adds	r0, r7, r3
 8006196:	1af9      	subs	r1, r7, r3
 8006198:	6827      	ldr	r7, [r4, #0]
 800619a:	9102      	str	r1, [sp, #8]
 800619c:	003a      	movs	r2, r7
 800619e:	682f      	ldr	r7, [r5, #0]
 80061a0:	46bc      	mov	ip, r7
 80061a2:	465f      	mov	r7, fp
 80061a4:	4462      	add	r2, ip
 80061a6:	18b3      	adds	r3, r6, r2
 80061a8:	109b      	asrs	r3, r3, #2
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	6867      	ldr	r7, [r4, #4]
 80061ae:	1ab6      	subs	r6, r6, r2
 80061b0:	46b8      	mov	r8, r7
 80061b2:	686f      	ldr	r7, [r5, #4]
 80061b4:	17f2      	asrs	r2, r6, #31
 80061b6:	46bc      	mov	ip, r7
 80061b8:	44e0      	add	r8, ip
 80061ba:	4643      	mov	r3, r8
 80061bc:	465f      	mov	r7, fp
 80061be:	18c1      	adds	r1, r0, r3
 80061c0:	1089      	asrs	r1, r1, #2
 80061c2:	6079      	str	r1, [r7, #4]
 80061c4:	9900      	ldr	r1, [sp, #0]
 80061c6:	4690      	mov	r8, r2
 80061c8:	468c      	mov	ip, r1
 80061ca:	6867      	ldr	r7, [r4, #4]
 80061cc:	6869      	ldr	r1, [r5, #4]
 80061ce:	44e3      	add	fp, ip
 80061d0:	1a7f      	subs	r7, r7, r1
 80061d2:	9703      	str	r7, [sp, #12]
 80061d4:	6829      	ldr	r1, [r5, #0]
 80061d6:	6827      	ldr	r7, [r4, #0]
 80061d8:	1a7f      	subs	r7, r7, r1
 80061da:	9704      	str	r7, [sp, #16]
 80061dc:	1ac7      	subs	r7, r0, r3
 80061de:	17fa      	asrs	r2, r7, #31
 80061e0:	4692      	mov	sl, r2
 80061e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061e4:	9a07      	ldr	r2, [sp, #28]
 80061e6:	0030      	movs	r0, r6
 80061e8:	4641      	mov	r1, r8
 80061ea:	f7fa f873 	bl	80002d4 <__aeabi_lmul>
 80061ee:	9a08      	ldr	r2, [sp, #32]
 80061f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061f2:	9112      	str	r1, [sp, #72]	@ 0x48
 80061f4:	0038      	movs	r0, r7
 80061f6:	4651      	mov	r1, sl
 80061f8:	f7fa f86c 	bl	80002d4 <__aeabi_lmul>
 80061fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80061fe:	9a07      	ldr	r2, [sp, #28]
 8006200:	4684      	mov	ip, r0
 8006202:	4461      	add	r1, ip
 8006204:	1049      	asrs	r1, r1, #1
 8006206:	6021      	str	r1, [r4, #0]
 8006208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800620a:	0038      	movs	r0, r7
 800620c:	4651      	mov	r1, sl
 800620e:	f7fa f861 	bl	80002d4 <__aeabi_lmul>
 8006212:	9a08      	ldr	r2, [sp, #32]
 8006214:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006216:	000f      	movs	r7, r1
 8006218:	0030      	movs	r0, r6
 800621a:	4641      	mov	r1, r8
 800621c:	f7fa f85a 	bl	80002d4 <__aeabi_lmul>
 8006220:	9b00      	ldr	r3, [sp, #0]
 8006222:	9a01      	ldr	r2, [sp, #4]
 8006224:	469c      	mov	ip, r3
 8006226:	9803      	ldr	r0, [sp, #12]
 8006228:	1a7f      	subs	r7, r7, r1
 800622a:	107f      	asrs	r7, r7, #1
 800622c:	6067      	str	r7, [r4, #4]
 800622e:	0016      	movs	r6, r2
 8006230:	4464      	add	r4, ip
 8006232:	4684      	mov	ip, r0
 8006234:	4466      	add	r6, ip
 8006236:	17f2      	asrs	r2, r6, #31
 8006238:	4690      	mov	r8, r2
 800623a:	9902      	ldr	r1, [sp, #8]
 800623c:	9f04      	ldr	r7, [sp, #16]
 800623e:	0030      	movs	r0, r6
 8006240:	1bcf      	subs	r7, r1, r7
 8006242:	17fa      	asrs	r2, r7, #31
 8006244:	4692      	mov	sl, r2
 8006246:	4641      	mov	r1, r8
 8006248:	9a05      	ldr	r2, [sp, #20]
 800624a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800624c:	f7fa f842 	bl	80002d4 <__aeabi_lmul>
 8006250:	9a06      	ldr	r2, [sp, #24]
 8006252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006254:	9112      	str	r1, [sp, #72]	@ 0x48
 8006256:	0038      	movs	r0, r7
 8006258:	4651      	mov	r1, sl
 800625a:	f7fa f83b 	bl	80002d4 <__aeabi_lmul>
 800625e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006260:	9a05      	ldr	r2, [sp, #20]
 8006262:	4684      	mov	ip, r0
 8006264:	4648      	mov	r0, r9
 8006266:	4461      	add	r1, ip
 8006268:	1049      	asrs	r1, r1, #1
 800626a:	6001      	str	r1, [r0, #0]
 800626c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800626e:	0038      	movs	r0, r7
 8006270:	4651      	mov	r1, sl
 8006272:	f7fa f82f 	bl	80002d4 <__aeabi_lmul>
 8006276:	9a06      	ldr	r2, [sp, #24]
 8006278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800627a:	000f      	movs	r7, r1
 800627c:	0030      	movs	r0, r6
 800627e:	4641      	mov	r1, r8
 8006280:	f7fa f828 	bl	80002d4 <__aeabi_lmul>
 8006284:	464e      	mov	r6, r9
 8006286:	9a00      	ldr	r2, [sp, #0]
 8006288:	9b01      	ldr	r3, [sp, #4]
 800628a:	4694      	mov	ip, r2
 800628c:	9803      	ldr	r0, [sp, #12]
 800628e:	1a7f      	subs	r7, r7, r1
 8006290:	107f      	asrs	r7, r7, #1
 8006292:	6077      	str	r7, [r6, #4]
 8006294:	1a1e      	subs	r6, r3, r0
 8006296:	9b04      	ldr	r3, [sp, #16]
 8006298:	44e1      	add	r9, ip
 800629a:	469c      	mov	ip, r3
 800629c:	17f0      	asrs	r0, r6, #31
 800629e:	4680      	mov	r8, r0
 80062a0:	9902      	ldr	r1, [sp, #8]
 80062a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062a4:	4461      	add	r1, ip
 80062a6:	17cb      	asrs	r3, r1, #31
 80062a8:	000f      	movs	r7, r1
 80062aa:	469a      	mov	sl, r3
 80062ac:	0030      	movs	r0, r6
 80062ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062b0:	4641      	mov	r1, r8
 80062b2:	f7fa f80f 	bl	80002d4 <__aeabi_lmul>
 80062b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062ba:	9101      	str	r1, [sp, #4]
 80062bc:	0038      	movs	r0, r7
 80062be:	4651      	mov	r1, sl
 80062c0:	f7fa f808 	bl	80002d4 <__aeabi_lmul>
 80062c4:	9801      	ldr	r0, [sp, #4]
 80062c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062c8:	4684      	mov	ip, r0
 80062ca:	4461      	add	r1, ip
 80062cc:	1049      	asrs	r1, r1, #1
 80062ce:	6029      	str	r1, [r5, #0]
 80062d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062d2:	0038      	movs	r0, r7
 80062d4:	4651      	mov	r1, sl
 80062d6:	f7f9 fffd 	bl	80002d4 <__aeabi_lmul>
 80062da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062dc:	000f      	movs	r7, r1
 80062de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062e0:	0030      	movs	r0, r6
 80062e2:	4641      	mov	r1, r8
 80062e4:	f7f9 fff6 	bl	80002d4 <__aeabi_lmul>
 80062e8:	1a7f      	subs	r7, r7, r1
 80062ea:	107f      	asrs	r7, r7, #1
 80062ec:	606f      	str	r7, [r5, #4]
 80062ee:	9a00      	ldr	r2, [sp, #0]
 80062f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80062f2:	4694      	mov	ip, r2
 80062f4:	4465      	add	r5, ip
 80062f6:	468c      	mov	ip, r1
 80062f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062fa:	0013      	movs	r3, r2
 80062fc:	4462      	add	r2, ip
 80062fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006300:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006302:	429a      	cmp	r2, r3
 8006304:	d900      	bls.n	8006308 <arm_radix4_butterfly_q31+0x478>
 8006306:	e73a      	b.n	800617e <arm_radix4_butterfly_q31+0x2ee>
 8006308:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800630a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800630c:	468c      	mov	ip, r1
 800630e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8006310:	4462      	add	r2, ip
 8006312:	468c      	mov	ip, r1
 8006314:	9216      	str	r2, [sp, #88]	@ 0x58
 8006316:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8006318:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800631a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800631c:	4462      	add	r2, ip
 800631e:	468c      	mov	ip, r1
 8006320:	9219      	str	r2, [sp, #100]	@ 0x64
 8006322:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006324:	3301      	adds	r3, #1
 8006326:	4462      	add	r2, ip
 8006328:	9218      	str	r2, [sp, #96]	@ 0x60
 800632a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800632c:	9315      	str	r3, [sp, #84]	@ 0x54
 800632e:	3208      	adds	r2, #8
 8006330:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006332:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006334:	4293      	cmp	r3, r2
 8006336:	d800      	bhi.n	800633a <arm_radix4_butterfly_q31+0x4aa>
 8006338:	e6e8      	b.n	800610c <arm_radix4_butterfly_q31+0x27c>
 800633a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800633c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	931f      	str	r3, [sp, #124]	@ 0x7c
 8006342:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006344:	9213      	str	r2, [sp, #76]	@ 0x4c
 8006346:	089b      	lsrs	r3, r3, #2
 8006348:	9320      	str	r3, [sp, #128]	@ 0x80
 800634a:	2b04      	cmp	r3, #4
 800634c:	d900      	bls.n	8006350 <arm_radix4_butterfly_q31+0x4c0>
 800634e:	e6c1      	b.n	80060d4 <arm_radix4_butterfly_q31+0x244>
 8006350:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006352:	469a      	mov	sl, r3
 8006354:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8006356:	691c      	ldr	r4, [r3, #16]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	46a1      	mov	r9, r4
 800635c:	4690      	mov	r8, r2
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	699f      	ldr	r7, [r3, #24]
 8006364:	188d      	adds	r5, r1, r2
 8006366:	444d      	add	r5, r9
 8006368:	19ed      	adds	r5, r5, r7
 800636a:	69de      	ldr	r6, [r3, #28]
 800636c:	601d      	str	r5, [r3, #0]
 800636e:	4645      	mov	r5, r8
 8006370:	46b4      	mov	ip, r6
 8006372:	68d8      	ldr	r0, [r3, #12]
 8006374:	695c      	ldr	r4, [r3, #20]
 8006376:	182d      	adds	r5, r5, r0
 8006378:	192d      	adds	r5, r5, r4
 800637a:	4465      	add	r5, ip
 800637c:	605d      	str	r5, [r3, #4]
 800637e:	1a8d      	subs	r5, r1, r2
 8006380:	444d      	add	r5, r9
 8006382:	1bed      	subs	r5, r5, r7
 8006384:	609d      	str	r5, [r3, #8]
 8006386:	4645      	mov	r5, r8
 8006388:	1a2d      	subs	r5, r5, r0
 800638a:	192d      	adds	r5, r5, r4
 800638c:	1bad      	subs	r5, r5, r6
 800638e:	464e      	mov	r6, r9
 8006390:	60dd      	str	r5, [r3, #12]
 8006392:	180d      	adds	r5, r1, r0
 8006394:	1bad      	subs	r5, r5, r6
 8006396:	4666      	mov	r6, ip
 8006398:	1bad      	subs	r5, r5, r6
 800639a:	611d      	str	r5, [r3, #16]
 800639c:	4645      	mov	r5, r8
 800639e:	1aad      	subs	r5, r5, r2
 80063a0:	4442      	add	r2, r8
 80063a2:	1b12      	subs	r2, r2, r4
 80063a4:	1bd2      	subs	r2, r2, r7
 80063a6:	1a08      	subs	r0, r1, r0
 80063a8:	61da      	str	r2, [r3, #28]
 80063aa:	4649      	mov	r1, r9
 80063ac:	2201      	movs	r2, #1
 80063ae:	1a41      	subs	r1, r0, r1
 80063b0:	4252      	negs	r2, r2
 80063b2:	4461      	add	r1, ip
 80063b4:	4694      	mov	ip, r2
 80063b6:	44e2      	add	sl, ip
 80063b8:	4652      	mov	r2, sl
 80063ba:	1b2d      	subs	r5, r5, r4
 80063bc:	19ed      	adds	r5, r5, r7
 80063be:	615d      	str	r5, [r3, #20]
 80063c0:	6199      	str	r1, [r3, #24]
 80063c2:	3320      	adds	r3, #32
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	d1c6      	bne.n	8006356 <arm_radix4_butterfly_q31+0x4c6>
 80063c8:	b027      	add	sp, #156	@ 0x9c
 80063ca:	bc3c      	pop	{r2, r3, r4, r5}
 80063cc:	4690      	mov	r8, r2
 80063ce:	4699      	mov	r9, r3
 80063d0:	46a2      	mov	sl, r4
 80063d2:	46ab      	mov	fp, r5
 80063d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063d6:	469a      	mov	sl, r3
 80063d8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80063da:	e7bc      	b.n	8006356 <arm_radix4_butterfly_q31+0x4c6>

080063dc <arm_radix4_butterfly_inverse_q31>:
 80063dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063de:	464d      	mov	r5, r9
 80063e0:	4644      	mov	r4, r8
 80063e2:	465f      	mov	r7, fp
 80063e4:	4656      	mov	r6, sl
 80063e6:	b4f0      	push	{r4, r5, r6, r7}
 80063e8:	b0a7      	sub	sp, #156	@ 0x9c
 80063ea:	469c      	mov	ip, r3
 80063ec:	9114      	str	r1, [sp, #80]	@ 0x50
 80063ee:	0889      	lsrs	r1, r1, #2
 80063f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80063f2:	00cb      	lsls	r3, r1, #3
 80063f4:	0015      	movs	r5, r2
 80063f6:	9223      	str	r2, [sp, #140]	@ 0x8c
 80063f8:	18c2      	adds	r2, r0, r3
 80063fa:	000c      	movs	r4, r1
 80063fc:	9124      	str	r1, [sp, #144]	@ 0x90
 80063fe:	18d1      	adds	r1, r2, r3
 8006400:	468b      	mov	fp, r1
 8006402:	469a      	mov	sl, r3
 8006404:	4663      	mov	r3, ip
 8006406:	44da      	add	sl, fp
 8006408:	46d0      	mov	r8, sl
 800640a:	4681      	mov	r9, r0
 800640c:	4692      	mov	sl, r2
 800640e:	0119      	lsls	r1, r3, #4
 8006410:	910d      	str	r1, [sp, #52]	@ 0x34
 8006412:	00d9      	lsls	r1, r3, #3
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	4463      	add	r3, ip
 8006418:	910e      	str	r1, [sp, #56]	@ 0x38
 800641a:	00d9      	lsls	r1, r3, #3
 800641c:	9022      	str	r0, [sp, #136]	@ 0x88
 800641e:	9025      	str	r0, [sp, #148]	@ 0x94
 8006420:	910f      	str	r1, [sp, #60]	@ 0x3c
 8006422:	9502      	str	r5, [sp, #8]
 8006424:	9500      	str	r5, [sp, #0]
 8006426:	9501      	str	r5, [sp, #4]
 8006428:	9409      	str	r4, [sp, #36]	@ 0x24
 800642a:	464b      	mov	r3, r9
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4652      	mov	r2, sl
 8006430:	111c      	asrs	r4, r3, #4
 8006432:	465b      	mov	r3, fp
 8006434:	4648      	mov	r0, r9
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	6840      	ldr	r0, [r0, #4]
 800643c:	111b      	asrs	r3, r3, #4
 800643e:	18e7      	adds	r7, r4, r3
 8006440:	1ae3      	subs	r3, r4, r3
 8006442:	1114      	asrs	r4, r2, #4
 8006444:	4642      	mov	r2, r8
 8006446:	1105      	asrs	r5, r0, #4
 8006448:	4658      	mov	r0, fp
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	6840      	ldr	r0, [r0, #4]
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	1113      	asrs	r3, r2, #4
 8006452:	18e2      	adds	r2, r4, r3
 8006454:	1103      	asrs	r3, r0, #4
 8006456:	18ee      	adds	r6, r5, r3
 8006458:	1ae8      	subs	r0, r5, r3
 800645a:	464d      	mov	r5, r9
 800645c:	18bb      	adds	r3, r7, r2
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	4641      	mov	r1, r8
 8006462:	4655      	mov	r5, sl
 8006464:	6849      	ldr	r1, [r1, #4]
 8006466:	686d      	ldr	r5, [r5, #4]
 8006468:	110b      	asrs	r3, r1, #4
 800646a:	112d      	asrs	r5, r5, #4
 800646c:	18eb      	adds	r3, r5, r3
 800646e:	464d      	mov	r5, r9
 8006470:	18f1      	adds	r1, r6, r3
 8006472:	6069      	str	r1, [r5, #4]
 8006474:	4655      	mov	r5, sl
 8006476:	686d      	ldr	r5, [r5, #4]
 8006478:	9004      	str	r0, [sp, #16]
 800647a:	112c      	asrs	r4, r5, #4
 800647c:	4645      	mov	r5, r8
 800647e:	686d      	ldr	r5, [r5, #4]
 8006480:	1129      	asrs	r1, r5, #4
 8006482:	1a65      	subs	r5, r4, r1
 8006484:	4651      	mov	r1, sl
 8006486:	6809      	ldr	r1, [r1, #0]
 8006488:	1abc      	subs	r4, r7, r2
 800648a:	1108      	asrs	r0, r1, #4
 800648c:	4641      	mov	r1, r8
 800648e:	17e2      	asrs	r2, r4, #31
 8006490:	6809      	ldr	r1, [r1, #0]
 8006492:	9207      	str	r2, [sp, #28]
 8006494:	9a01      	ldr	r2, [sp, #4]
 8006496:	1109      	asrs	r1, r1, #4
 8006498:	6817      	ldr	r7, [r2, #0]
 800649a:	1a41      	subs	r1, r0, r1
 800649c:	9106      	str	r1, [sp, #24]
 800649e:	0039      	movs	r1, r7
 80064a0:	17ff      	asrs	r7, r7, #31
 80064a2:	0038      	movs	r0, r7
 80064a4:	9505      	str	r5, [sp, #20]
 80064a6:	1af5      	subs	r5, r6, r3
 80064a8:	17ef      	asrs	r7, r5, #31
 80064aa:	970b      	str	r7, [sp, #44]	@ 0x2c
 80064ac:	6857      	ldr	r7, [r2, #4]
 80064ae:	0003      	movs	r3, r0
 80064b0:	17fe      	asrs	r6, r7, #31
 80064b2:	000a      	movs	r2, r1
 80064b4:	9108      	str	r1, [sp, #32]
 80064b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80064b8:	17e1      	asrs	r1, r4, #31
 80064ba:	0020      	movs	r0, r4
 80064bc:	960c      	str	r6, [sp, #48]	@ 0x30
 80064be:	f7f9 ff09 	bl	80002d4 <__aeabi_lmul>
 80064c2:	003a      	movs	r2, r7
 80064c4:	17fb      	asrs	r3, r7, #31
 80064c6:	000e      	movs	r6, r1
 80064c8:	0028      	movs	r0, r5
 80064ca:	17e9      	asrs	r1, r5, #31
 80064cc:	f7f9 ff02 	bl	80002d4 <__aeabi_lmul>
 80064d0:	4653      	mov	r3, sl
 80064d2:	1a76      	subs	r6, r6, r1
 80064d4:	0076      	lsls	r6, r6, #1
 80064d6:	601e      	str	r6, [r3, #0]
 80064d8:	002a      	movs	r2, r5
 80064da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064dc:	9808      	ldr	r0, [sp, #32]
 80064de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064e0:	f7f9 fef8 	bl	80002d4 <__aeabi_lmul>
 80064e4:	003a      	movs	r2, r7
 80064e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064e8:	000d      	movs	r5, r1
 80064ea:	0020      	movs	r0, r4
 80064ec:	9907      	ldr	r1, [sp, #28]
 80064ee:	f7f9 fef1 	bl	80002d4 <__aeabi_lmul>
 80064f2:	4657      	mov	r7, sl
 80064f4:	186d      	adds	r5, r5, r1
 80064f6:	006d      	lsls	r5, r5, #1
 80064f8:	607d      	str	r5, [r7, #4]
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	9e06      	ldr	r6, [sp, #24]
 80064fe:	9d05      	ldr	r5, [sp, #20]
 8006500:	46b4      	mov	ip, r6
 8006502:	1b5d      	subs	r5, r3, r5
 8006504:	9b00      	ldr	r3, [sp, #0]
 8006506:	17ef      	asrs	r7, r5, #31
 8006508:	0039      	movs	r1, r7
 800650a:	681f      	ldr	r7, [r3, #0]
 800650c:	17fc      	asrs	r4, r7, #31
 800650e:	0020      	movs	r0, r4
 8006510:	9c04      	ldr	r4, [sp, #16]
 8006512:	4464      	add	r4, ip
 8006514:	17e6      	asrs	r6, r4, #31
 8006516:	9407      	str	r4, [sp, #28]
 8006518:	9608      	str	r6, [sp, #32]
 800651a:	685e      	ldr	r6, [r3, #4]
 800651c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800651e:	17f2      	asrs	r2, r6, #31
 8006520:	0003      	movs	r3, r0
 8006522:	920c      	str	r2, [sp, #48]	@ 0x30
 8006524:	0028      	movs	r0, r5
 8006526:	003a      	movs	r2, r7
 8006528:	910a      	str	r1, [sp, #40]	@ 0x28
 800652a:	f7f9 fed3 	bl	80002d4 <__aeabi_lmul>
 800652e:	0032      	movs	r2, r6
 8006530:	17f3      	asrs	r3, r6, #31
 8006532:	9807      	ldr	r0, [sp, #28]
 8006534:	000c      	movs	r4, r1
 8006536:	9908      	ldr	r1, [sp, #32]
 8006538:	f7f9 fecc 	bl	80002d4 <__aeabi_lmul>
 800653c:	4658      	mov	r0, fp
 800653e:	1a64      	subs	r4, r4, r1
 8006540:	0064      	lsls	r4, r4, #1
 8006542:	9a07      	ldr	r2, [sp, #28]
 8006544:	6004      	str	r4, [r0, #0]
 8006546:	9b08      	ldr	r3, [sp, #32]
 8006548:	0038      	movs	r0, r7
 800654a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800654c:	f7f9 fec2 	bl	80002d4 <__aeabi_lmul>
 8006550:	0032      	movs	r2, r6
 8006552:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006554:	000c      	movs	r4, r1
 8006556:	0028      	movs	r0, r5
 8006558:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800655a:	f7f9 febb 	bl	80002d4 <__aeabi_lmul>
 800655e:	9d05      	ldr	r5, [sp, #20]
 8006560:	465f      	mov	r7, fp
 8006562:	46ac      	mov	ip, r5
 8006564:	1864      	adds	r4, r4, r1
 8006566:	9903      	ldr	r1, [sp, #12]
 8006568:	0064      	lsls	r4, r4, #1
 800656a:	4461      	add	r1, ip
 800656c:	607c      	str	r4, [r7, #4]
 800656e:	000c      	movs	r4, r1
 8006570:	17c9      	asrs	r1, r1, #31
 8006572:	9105      	str	r1, [sp, #20]
 8006574:	9902      	ldr	r1, [sp, #8]
 8006576:	9804      	ldr	r0, [sp, #16]
 8006578:	680d      	ldr	r5, [r1, #0]
 800657a:	9e06      	ldr	r6, [sp, #24]
 800657c:	002b      	movs	r3, r5
 800657e:	17ed      	asrs	r5, r5, #31
 8006580:	684f      	ldr	r7, [r1, #4]
 8006582:	9503      	str	r5, [sp, #12]
 8006584:	1b85      	subs	r5, r0, r6
 8006586:	17e8      	asrs	r0, r5, #31
 8006588:	001a      	movs	r2, r3
 800658a:	9006      	str	r0, [sp, #24]
 800658c:	17fe      	asrs	r6, r7, #31
 800658e:	9304      	str	r3, [sp, #16]
 8006590:	0020      	movs	r0, r4
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	17e1      	asrs	r1, r4, #31
 8006596:	9607      	str	r6, [sp, #28]
 8006598:	f7f9 fe9c 	bl	80002d4 <__aeabi_lmul>
 800659c:	003a      	movs	r2, r7
 800659e:	000e      	movs	r6, r1
 80065a0:	17fb      	asrs	r3, r7, #31
 80065a2:	0028      	movs	r0, r5
 80065a4:	17e9      	asrs	r1, r5, #31
 80065a6:	f7f9 fe95 	bl	80002d4 <__aeabi_lmul>
 80065aa:	4640      	mov	r0, r8
 80065ac:	1a76      	subs	r6, r6, r1
 80065ae:	0076      	lsls	r6, r6, #1
 80065b0:	002a      	movs	r2, r5
 80065b2:	9b06      	ldr	r3, [sp, #24]
 80065b4:	6006      	str	r6, [r0, #0]
 80065b6:	9903      	ldr	r1, [sp, #12]
 80065b8:	9804      	ldr	r0, [sp, #16]
 80065ba:	f7f9 fe8b 	bl	80002d4 <__aeabi_lmul>
 80065be:	0020      	movs	r0, r4
 80065c0:	2408      	movs	r4, #8
 80065c2:	9b07      	ldr	r3, [sp, #28]
 80065c4:	000d      	movs	r5, r1
 80065c6:	003a      	movs	r2, r7
 80065c8:	9905      	ldr	r1, [sp, #20]
 80065ca:	f7f9 fe83 	bl	80002d4 <__aeabi_lmul>
 80065ce:	4640      	mov	r0, r8
 80065d0:	46a4      	mov	ip, r4
 80065d2:	186d      	adds	r5, r5, r1
 80065d4:	006d      	lsls	r5, r5, #1
 80065d6:	6045      	str	r5, [r0, #4]
 80065d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065da:	44e1      	add	r9, ip
 80065dc:	3801      	subs	r0, #1
 80065de:	9009      	str	r0, [sp, #36]	@ 0x24
 80065e0:	9a01      	ldr	r2, [sp, #4]
 80065e2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80065e4:	44e2      	add	sl, ip
 80065e6:	44e3      	add	fp, ip
 80065e8:	44e0      	add	r8, ip
 80065ea:	46a4      	mov	ip, r4
 80065ec:	4462      	add	r2, ip
 80065ee:	9201      	str	r2, [sp, #4]
 80065f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	4694      	mov	ip, r2
 80065f6:	4463      	add	r3, ip
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065fc:	9902      	ldr	r1, [sp, #8]
 80065fe:	469c      	mov	ip, r3
 8006600:	4461      	add	r1, ip
 8006602:	9102      	str	r1, [sp, #8]
 8006604:	2800      	cmp	r0, #0
 8006606:	d000      	beq.n	800660a <arm_radix4_butterfly_inverse_q31+0x22e>
 8006608:	e70f      	b.n	800642a <arm_radix4_butterfly_inverse_q31+0x4e>
 800660a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8006610:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006612:	9320      	str	r3, [sp, #128]	@ 0x80
 8006614:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006616:	2b04      	cmp	r3, #4
 8006618:	d800      	bhi.n	800661c <arm_radix4_butterfly_inverse_q31+0x240>
 800661a:	e17c      	b.n	8006916 <arm_radix4_butterfly_inverse_q31+0x53a>
 800661c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800661e:	0893      	lsrs	r3, r2, #2
 8006620:	1e59      	subs	r1, r3, #1
 8006622:	9321      	str	r3, [sp, #132]	@ 0x84
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006628:	00d3      	lsls	r3, r2, #3
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800662e:	911a      	str	r1, [sp, #104]	@ 0x68
 8006630:	00da      	lsls	r2, r3, #3
 8006632:	921e      	str	r2, [sp, #120]	@ 0x78
 8006634:	011a      	lsls	r2, r3, #4
 8006636:	921d      	str	r2, [sp, #116]	@ 0x74
 8006638:	001a      	movs	r2, r3
 800663a:	4694      	mov	ip, r2
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	4463      	add	r3, ip
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	931c      	str	r3, [sp, #112]	@ 0x70
 8006644:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006646:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006648:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800664a:	9318      	str	r3, [sp, #96]	@ 0x60
 800664c:	9319      	str	r3, [sp, #100]	@ 0x64
 800664e:	9316      	str	r3, [sp, #88]	@ 0x58
 8006650:	2300      	movs	r3, #0
 8006652:	9315      	str	r3, [sp, #84]	@ 0x54
 8006654:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006656:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	9205      	str	r2, [sp, #20]
 800665e:	9306      	str	r3, [sp, #24]
 8006660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006662:	468c      	mov	ip, r1
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	9207      	str	r2, [sp, #28]
 800666a:	9308      	str	r3, [sp, #32]
 800666c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	9209      	str	r2, [sp, #36]	@ 0x24
 8006674:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006676:	930a      	str	r3, [sp, #40]	@ 0x28
 8006678:	0013      	movs	r3, r2
 800667a:	4463      	add	r3, ip
 800667c:	4698      	mov	r8, r3
 800667e:	0013      	movs	r3, r2
 8006680:	4442      	add	r2, r8
 8006682:	4691      	mov	r9, r2
 8006684:	001a      	movs	r2, r3
 8006686:	444a      	add	r2, r9
 8006688:	4692      	mov	sl, r2
 800668a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800668c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800668e:	4293      	cmp	r3, r2
 8006690:	d800      	bhi.n	8006694 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8006692:	e0d9      	b.n	8006848 <arm_radix4_butterfly_inverse_q31+0x46c>
 8006694:	4694      	mov	ip, r2
 8006696:	4644      	mov	r4, r8
 8006698:	4655      	mov	r5, sl
 800669a:	4688      	mov	r8, r1
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	17db      	asrs	r3, r3, #31
 80066a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80066a2:	9b08      	ldr	r3, [sp, #32]
 80066a4:	17db      	asrs	r3, r3, #31
 80066a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80066a8:	9b05      	ldr	r3, [sp, #20]
 80066aa:	17db      	asrs	r3, r3, #31
 80066ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80066ae:	9b06      	ldr	r3, [sp, #24]
 80066b0:	17db      	asrs	r3, r3, #31
 80066b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b6:	17db      	asrs	r3, r3, #31
 80066b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80066ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066bc:	17db      	asrs	r3, r3, #31
 80066be:	9311      	str	r3, [sp, #68]	@ 0x44
 80066c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80066c2:	4463      	add	r3, ip
 80066c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066c6:	4643      	mov	r3, r8
 80066c8:	4641      	mov	r1, r8
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	464b      	mov	r3, r9
 80066ce:	684f      	ldr	r7, [r1, #4]
 80066d0:	4649      	mov	r1, r9
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	18d6      	adds	r6, r2, r3
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	684b      	ldr	r3, [r1, #4]
 80066dc:	1af9      	subs	r1, r7, r3
 80066de:	9102      	str	r1, [sp, #8]
 80066e0:	6829      	ldr	r1, [r5, #0]
 80066e2:	18f8      	adds	r0, r7, r3
 80066e4:	468c      	mov	ip, r1
 80066e6:	6827      	ldr	r7, [r4, #0]
 80066e8:	4467      	add	r7, ip
 80066ea:	003a      	movs	r2, r7
 80066ec:	19f3      	adds	r3, r6, r7
 80066ee:	4647      	mov	r7, r8
 80066f0:	109b      	asrs	r3, r3, #2
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	6869      	ldr	r1, [r5, #4]
 80066f6:	6867      	ldr	r7, [r4, #4]
 80066f8:	468c      	mov	ip, r1
 80066fa:	4467      	add	r7, ip
 80066fc:	003b      	movs	r3, r7
 80066fe:	19c1      	adds	r1, r0, r7
 8006700:	4647      	mov	r7, r8
 8006702:	1ab6      	subs	r6, r6, r2
 8006704:	1089      	asrs	r1, r1, #2
 8006706:	6079      	str	r1, [r7, #4]
 8006708:	17f2      	asrs	r2, r6, #31
 800670a:	9900      	ldr	r1, [sp, #0]
 800670c:	4692      	mov	sl, r2
 800670e:	468c      	mov	ip, r1
 8006710:	6867      	ldr	r7, [r4, #4]
 8006712:	6869      	ldr	r1, [r5, #4]
 8006714:	44e0      	add	r8, ip
 8006716:	1a7f      	subs	r7, r7, r1
 8006718:	9703      	str	r7, [sp, #12]
 800671a:	6821      	ldr	r1, [r4, #0]
 800671c:	682f      	ldr	r7, [r5, #0]
 800671e:	1bc9      	subs	r1, r1, r7
 8006720:	1ac7      	subs	r7, r0, r3
 8006722:	17fa      	asrs	r2, r7, #31
 8006724:	4693      	mov	fp, r2
 8006726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006728:	9a07      	ldr	r2, [sp, #28]
 800672a:	9104      	str	r1, [sp, #16]
 800672c:	0030      	movs	r0, r6
 800672e:	4651      	mov	r1, sl
 8006730:	f7f9 fdd0 	bl	80002d4 <__aeabi_lmul>
 8006734:	9a08      	ldr	r2, [sp, #32]
 8006736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006738:	9112      	str	r1, [sp, #72]	@ 0x48
 800673a:	0038      	movs	r0, r7
 800673c:	4659      	mov	r1, fp
 800673e:	f7f9 fdc9 	bl	80002d4 <__aeabi_lmul>
 8006742:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006744:	9a07      	ldr	r2, [sp, #28]
 8006746:	1a41      	subs	r1, r0, r1
 8006748:	1049      	asrs	r1, r1, #1
 800674a:	6021      	str	r1, [r4, #0]
 800674c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800674e:	0038      	movs	r0, r7
 8006750:	4659      	mov	r1, fp
 8006752:	f7f9 fdbf 	bl	80002d4 <__aeabi_lmul>
 8006756:	9a08      	ldr	r2, [sp, #32]
 8006758:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800675a:	000f      	movs	r7, r1
 800675c:	0030      	movs	r0, r6
 800675e:	4651      	mov	r1, sl
 8006760:	f7f9 fdb8 	bl	80002d4 <__aeabi_lmul>
 8006764:	9b00      	ldr	r3, [sp, #0]
 8006766:	187f      	adds	r7, r7, r1
 8006768:	469c      	mov	ip, r3
 800676a:	107f      	asrs	r7, r7, #1
 800676c:	6067      	str	r7, [r4, #4]
 800676e:	9a01      	ldr	r2, [sp, #4]
 8006770:	9f03      	ldr	r7, [sp, #12]
 8006772:	9802      	ldr	r0, [sp, #8]
 8006774:	1bd7      	subs	r7, r2, r7
 8006776:	17fe      	asrs	r6, r7, #31
 8006778:	0031      	movs	r1, r6
 800677a:	9e04      	ldr	r6, [sp, #16]
 800677c:	4682      	mov	sl, r0
 800677e:	4464      	add	r4, ip
 8006780:	46b4      	mov	ip, r6
 8006782:	44e2      	add	sl, ip
 8006784:	4652      	mov	r2, sl
 8006786:	17d2      	asrs	r2, r2, #31
 8006788:	4693      	mov	fp, r2
 800678a:	0038      	movs	r0, r7
 800678c:	9a05      	ldr	r2, [sp, #20]
 800678e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006790:	9112      	str	r1, [sp, #72]	@ 0x48
 8006792:	f7f9 fd9f 	bl	80002d4 <__aeabi_lmul>
 8006796:	9a06      	ldr	r2, [sp, #24]
 8006798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800679a:	000e      	movs	r6, r1
 800679c:	4650      	mov	r0, sl
 800679e:	4659      	mov	r1, fp
 80067a0:	f7f9 fd98 	bl	80002d4 <__aeabi_lmul>
 80067a4:	4648      	mov	r0, r9
 80067a6:	1a76      	subs	r6, r6, r1
 80067a8:	1076      	asrs	r6, r6, #1
 80067aa:	6006      	str	r6, [r0, #0]
 80067ac:	9a05      	ldr	r2, [sp, #20]
 80067ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067b0:	4650      	mov	r0, sl
 80067b2:	4659      	mov	r1, fp
 80067b4:	f7f9 fd8e 	bl	80002d4 <__aeabi_lmul>
 80067b8:	9a06      	ldr	r2, [sp, #24]
 80067ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067bc:	000e      	movs	r6, r1
 80067be:	0038      	movs	r0, r7
 80067c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80067c2:	f7f9 fd87 	bl	80002d4 <__aeabi_lmul>
 80067c6:	9a00      	ldr	r2, [sp, #0]
 80067c8:	9f03      	ldr	r7, [sp, #12]
 80067ca:	4694      	mov	ip, r2
 80067cc:	1876      	adds	r6, r6, r1
 80067ce:	4649      	mov	r1, r9
 80067d0:	44e1      	add	r9, ip
 80067d2:	46bc      	mov	ip, r7
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	1076      	asrs	r6, r6, #1
 80067d8:	4463      	add	r3, ip
 80067da:	17df      	asrs	r7, r3, #31
 80067dc:	604e      	str	r6, [r1, #4]
 80067de:	46ba      	mov	sl, r7
 80067e0:	001e      	movs	r6, r3
 80067e2:	9802      	ldr	r0, [sp, #8]
 80067e4:	9b04      	ldr	r3, [sp, #16]
 80067e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067e8:	1ac7      	subs	r7, r0, r3
 80067ea:	17fb      	asrs	r3, r7, #31
 80067ec:	469b      	mov	fp, r3
 80067ee:	0030      	movs	r0, r6
 80067f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80067f2:	4651      	mov	r1, sl
 80067f4:	f7f9 fd6e 	bl	80002d4 <__aeabi_lmul>
 80067f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80067fc:	9101      	str	r1, [sp, #4]
 80067fe:	0038      	movs	r0, r7
 8006800:	4659      	mov	r1, fp
 8006802:	f7f9 fd67 	bl	80002d4 <__aeabi_lmul>
 8006806:	9801      	ldr	r0, [sp, #4]
 8006808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800680a:	1a41      	subs	r1, r0, r1
 800680c:	1049      	asrs	r1, r1, #1
 800680e:	6029      	str	r1, [r5, #0]
 8006810:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006812:	0038      	movs	r0, r7
 8006814:	4659      	mov	r1, fp
 8006816:	f7f9 fd5d 	bl	80002d4 <__aeabi_lmul>
 800681a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800681c:	000f      	movs	r7, r1
 800681e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006820:	0030      	movs	r0, r6
 8006822:	4651      	mov	r1, sl
 8006824:	f7f9 fd56 	bl	80002d4 <__aeabi_lmul>
 8006828:	187f      	adds	r7, r7, r1
 800682a:	107f      	asrs	r7, r7, #1
 800682c:	606f      	str	r7, [r5, #4]
 800682e:	9a00      	ldr	r2, [sp, #0]
 8006830:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006832:	4694      	mov	ip, r2
 8006834:	4465      	add	r5, ip
 8006836:	468c      	mov	ip, r1
 8006838:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800683a:	0013      	movs	r3, r2
 800683c:	4462      	add	r2, ip
 800683e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006840:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006842:	429a      	cmp	r2, r3
 8006844:	d900      	bls.n	8006848 <arm_radix4_butterfly_inverse_q31+0x46c>
 8006846:	e73e      	b.n	80066c6 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8006848:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800684a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800684c:	468c      	mov	ip, r1
 800684e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8006850:	4462      	add	r2, ip
 8006852:	468c      	mov	ip, r1
 8006854:	9216      	str	r2, [sp, #88]	@ 0x58
 8006856:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8006858:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800685a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800685c:	4462      	add	r2, ip
 800685e:	468c      	mov	ip, r1
 8006860:	9219      	str	r2, [sp, #100]	@ 0x64
 8006862:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006864:	3301      	adds	r3, #1
 8006866:	4462      	add	r2, ip
 8006868:	9218      	str	r2, [sp, #96]	@ 0x60
 800686a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800686c:	9315      	str	r3, [sp, #84]	@ 0x54
 800686e:	3208      	adds	r2, #8
 8006870:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006872:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006874:	4293      	cmp	r3, r2
 8006876:	d800      	bhi.n	800687a <arm_radix4_butterfly_inverse_q31+0x49e>
 8006878:	e6ec      	b.n	8006654 <arm_radix4_butterfly_inverse_q31+0x278>
 800687a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800687c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	931f      	str	r3, [sp, #124]	@ 0x7c
 8006882:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006884:	9213      	str	r2, [sp, #76]	@ 0x4c
 8006886:	089b      	lsrs	r3, r3, #2
 8006888:	9320      	str	r3, [sp, #128]	@ 0x80
 800688a:	2b04      	cmp	r3, #4
 800688c:	d900      	bls.n	8006890 <arm_radix4_butterfly_inverse_q31+0x4b4>
 800688e:	e6c5      	b.n	800661c <arm_radix4_butterfly_inverse_q31+0x240>
 8006890:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006892:	469a      	mov	sl, r3
 8006894:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	6918      	ldr	r0, [r3, #16]
 800689a:	4691      	mov	r9, r2
 800689c:	464c      	mov	r4, r9
 800689e:	4680      	mov	r8, r0
 80068a0:	69de      	ldr	r6, [r3, #28]
 80068a2:	689d      	ldr	r5, [r3, #8]
 80068a4:	46b4      	mov	ip, r6
 80068a6:	6998      	ldr	r0, [r3, #24]
 80068a8:	1964      	adds	r4, r4, r5
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	4444      	add	r4, r8
 80068b0:	695f      	ldr	r7, [r3, #20]
 80068b2:	1824      	adds	r4, r4, r0
 80068b4:	601c      	str	r4, [r3, #0]
 80068b6:	188c      	adds	r4, r1, r2
 80068b8:	19e4      	adds	r4, r4, r7
 80068ba:	4464      	add	r4, ip
 80068bc:	605c      	str	r4, [r3, #4]
 80068be:	464c      	mov	r4, r9
 80068c0:	1b64      	subs	r4, r4, r5
 80068c2:	4444      	add	r4, r8
 80068c4:	1a24      	subs	r4, r4, r0
 80068c6:	609c      	str	r4, [r3, #8]
 80068c8:	1a8c      	subs	r4, r1, r2
 80068ca:	19e4      	adds	r4, r4, r7
 80068cc:	1ba4      	subs	r4, r4, r6
 80068ce:	60dc      	str	r4, [r3, #12]
 80068d0:	464c      	mov	r4, r9
 80068d2:	4646      	mov	r6, r8
 80068d4:	1aa4      	subs	r4, r4, r2
 80068d6:	1ba4      	subs	r4, r4, r6
 80068d8:	4464      	add	r4, ip
 80068da:	611c      	str	r4, [r3, #16]
 80068dc:	194c      	adds	r4, r1, r5
 80068de:	1be4      	subs	r4, r4, r7
 80068e0:	1a24      	subs	r4, r4, r0
 80068e2:	615c      	str	r4, [r3, #20]
 80068e4:	4644      	mov	r4, r8
 80068e6:	4666      	mov	r6, ip
 80068e8:	444a      	add	r2, r9
 80068ea:	1b12      	subs	r2, r2, r4
 80068ec:	1b92      	subs	r2, r2, r6
 80068ee:	619a      	str	r2, [r3, #24]
 80068f0:	1b4a      	subs	r2, r1, r5
 80068f2:	1bd1      	subs	r1, r2, r7
 80068f4:	2201      	movs	r2, #1
 80068f6:	4252      	negs	r2, r2
 80068f8:	4694      	mov	ip, r2
 80068fa:	44e2      	add	sl, ip
 80068fc:	4652      	mov	r2, sl
 80068fe:	1809      	adds	r1, r1, r0
 8006900:	61d9      	str	r1, [r3, #28]
 8006902:	3320      	adds	r3, #32
 8006904:	2a00      	cmp	r2, #0
 8006906:	d1c6      	bne.n	8006896 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8006908:	b027      	add	sp, #156	@ 0x9c
 800690a:	bc3c      	pop	{r2, r3, r4, r5}
 800690c:	4690      	mov	r8, r2
 800690e:	4699      	mov	r9, r3
 8006910:	46a2      	mov	sl, r4
 8006912:	46ab      	mov	fp, r5
 8006914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006916:	469a      	mov	sl, r3
 8006918:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800691a:	e7bc      	b.n	8006896 <arm_radix4_butterfly_inverse_q31+0x4ba>

0800691c <arm_cmplx_mag_squared_q31>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	464f      	mov	r7, r9
 8006920:	4646      	mov	r6, r8
 8006922:	0004      	movs	r4, r0
 8006924:	b4c0      	push	{r6, r7}
 8006926:	0016      	movs	r6, r2
 8006928:	000f      	movs	r7, r1
 800692a:	2a00      	cmp	r2, #0
 800692c:	d018      	beq.n	8006960 <arm_cmplx_mag_squared_q31+0x44>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	6822      	ldr	r2, [r4, #0]
 8006932:	17d9      	asrs	r1, r3, #31
 8006934:	6863      	ldr	r3, [r4, #4]
 8006936:	0010      	movs	r0, r2
 8006938:	4698      	mov	r8, r3
 800693a:	17db      	asrs	r3, r3, #31
 800693c:	4699      	mov	r9, r3
 800693e:	000b      	movs	r3, r1
 8006940:	f7f9 fcc8 	bl	80002d4 <__aeabi_lmul>
 8006944:	4642      	mov	r2, r8
 8006946:	104d      	asrs	r5, r1, #1
 8006948:	464b      	mov	r3, r9
 800694a:	4640      	mov	r0, r8
 800694c:	4649      	mov	r1, r9
 800694e:	f7f9 fcc1 	bl	80002d4 <__aeabi_lmul>
 8006952:	1049      	asrs	r1, r1, #1
 8006954:	1869      	adds	r1, r5, r1
 8006956:	3e01      	subs	r6, #1
 8006958:	c702      	stmia	r7!, {r1}
 800695a:	3408      	adds	r4, #8
 800695c:	2e00      	cmp	r6, #0
 800695e:	d1e6      	bne.n	800692e <arm_cmplx_mag_squared_q31+0x12>
 8006960:	bc0c      	pop	{r2, r3}
 8006962:	4690      	mov	r8, r2
 8006964:	4699      	mov	r9, r3
 8006966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006968 <arm_mult_q31>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	4646      	mov	r6, r8
 800696c:	464f      	mov	r7, r9
 800696e:	4690      	mov	r8, r2
 8006970:	b4c0      	push	{r6, r7}
 8006972:	001d      	movs	r5, r3
 8006974:	0006      	movs	r6, r0
 8006976:	000f      	movs	r7, r1
 8006978:	2400      	movs	r4, #0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d020      	beq.n	80069c0 <arm_mult_q31+0x58>
 800697e:	4b12      	ldr	r3, [pc, #72]	@ (80069c8 <arm_mult_q31+0x60>)
 8006980:	4699      	mov	r9, r3
 8006982:	e007      	b.n	8006994 <arm_mult_q31+0x2c>
 8006984:	464b      	mov	r3, r9
 8006986:	4059      	eors	r1, r3
 8006988:	4643      	mov	r3, r8
 800698a:	3d01      	subs	r5, #1
 800698c:	5119      	str	r1, [r3, r4]
 800698e:	3404      	adds	r4, #4
 8006990:	2d00      	cmp	r5, #0
 8006992:	d015      	beq.n	80069c0 <arm_mult_q31+0x58>
 8006994:	5933      	ldr	r3, [r6, r4]
 8006996:	593a      	ldr	r2, [r7, r4]
 8006998:	17d9      	asrs	r1, r3, #31
 800699a:	593b      	ldr	r3, [r7, r4]
 800699c:	5930      	ldr	r0, [r6, r4]
 800699e:	17db      	asrs	r3, r3, #31
 80069a0:	f7f9 fc98 	bl	80002d4 <__aeabi_lmul>
 80069a4:	004b      	lsls	r3, r1, #1
 80069a6:	0fc0      	lsrs	r0, r0, #31
 80069a8:	4318      	orrs	r0, r3
 80069aa:	17c9      	asrs	r1, r1, #31
 80069ac:	17c3      	asrs	r3, r0, #31
 80069ae:	428b      	cmp	r3, r1
 80069b0:	d1e8      	bne.n	8006984 <arm_mult_q31+0x1c>
 80069b2:	0001      	movs	r1, r0
 80069b4:	4643      	mov	r3, r8
 80069b6:	3d01      	subs	r5, #1
 80069b8:	5119      	str	r1, [r3, r4]
 80069ba:	3404      	adds	r4, #4
 80069bc:	2d00      	cmp	r5, #0
 80069be:	d1e9      	bne.n	8006994 <arm_mult_q31+0x2c>
 80069c0:	bc0c      	pop	{r2, r3}
 80069c2:	4690      	mov	r8, r2
 80069c4:	4699      	mov	r9, r3
 80069c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c8:	7fffffff 	.word	0x7fffffff

080069cc <arm_add_q31>:
 80069cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ce:	465f      	mov	r7, fp
 80069d0:	4656      	mov	r6, sl
 80069d2:	464d      	mov	r5, r9
 80069d4:	4644      	mov	r4, r8
 80069d6:	b4f0      	push	{r4, r5, r6, r7}
 80069d8:	4693      	mov	fp, r2
 80069da:	b083      	sub	sp, #12
 80069dc:	4681      	mov	r9, r0
 80069de:	468a      	mov	sl, r1
 80069e0:	4698      	mov	r8, r3
 80069e2:	2200      	movs	r2, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d020      	beq.n	8006a2a <arm_add_q31+0x5e>
 80069e8:	4649      	mov	r1, r9
 80069ea:	4653      	mov	r3, sl
 80069ec:	588e      	ldr	r6, [r1, r2]
 80069ee:	589b      	ldr	r3, [r3, r2]
 80069f0:	17f7      	asrs	r7, r6, #31
 80069f2:	001c      	movs	r4, r3
 80069f4:	0030      	movs	r0, r6
 80069f6:	0039      	movs	r1, r7
 80069f8:	17dd      	asrs	r5, r3, #31
 80069fa:	46b4      	mov	ip, r6
 80069fc:	1900      	adds	r0, r0, r4
 80069fe:	4169      	adcs	r1, r5
 8006a00:	4463      	add	r3, ip
 8006a02:	9000      	str	r0, [sp, #0]
 8006a04:	9101      	str	r1, [sp, #4]
 8006a06:	17d9      	asrs	r1, r3, #31
 8006a08:	468c      	mov	ip, r1
 8006a0a:	9901      	ldr	r1, [sp, #4]
 8006a0c:	458c      	cmp	ip, r1
 8006a0e:	d002      	beq.n	8006a16 <arm_add_q31+0x4a>
 8006a10:	17cb      	asrs	r3, r1, #31
 8006a12:	4909      	ldr	r1, [pc, #36]	@ (8006a38 <arm_add_q31+0x6c>)
 8006a14:	404b      	eors	r3, r1
 8006a16:	4659      	mov	r1, fp
 8006a18:	508b      	str	r3, [r1, r2]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	425b      	negs	r3, r3
 8006a1e:	469c      	mov	ip, r3
 8006a20:	44e0      	add	r8, ip
 8006a22:	4643      	mov	r3, r8
 8006a24:	3204      	adds	r2, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1de      	bne.n	80069e8 <arm_add_q31+0x1c>
 8006a2a:	b003      	add	sp, #12
 8006a2c:	bc3c      	pop	{r2, r3, r4, r5}
 8006a2e:	4690      	mov	r8, r2
 8006a30:	4699      	mov	r9, r3
 8006a32:	46a2      	mov	sl, r4
 8006a34:	46ab      	mov	fp, r5
 8006a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a38:	7fffffff 	.word	0x7fffffff

08006a3c <_vsniprintf_r>:
 8006a3c:	b530      	push	{r4, r5, lr}
 8006a3e:	0014      	movs	r4, r2
 8006a40:	0005      	movs	r5, r0
 8006a42:	001a      	movs	r2, r3
 8006a44:	b09b      	sub	sp, #108	@ 0x6c
 8006a46:	2c00      	cmp	r4, #0
 8006a48:	da05      	bge.n	8006a56 <_vsniprintf_r+0x1a>
 8006a4a:	238b      	movs	r3, #139	@ 0x8b
 8006a4c:	6003      	str	r3, [r0, #0]
 8006a4e:	2001      	movs	r0, #1
 8006a50:	4240      	negs	r0, r0
 8006a52:	b01b      	add	sp, #108	@ 0x6c
 8006a54:	bd30      	pop	{r4, r5, pc}
 8006a56:	2382      	movs	r3, #130	@ 0x82
 8006a58:	4668      	mov	r0, sp
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	8183      	strh	r3, [r0, #12]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9100      	str	r1, [sp, #0]
 8006a62:	9104      	str	r1, [sp, #16]
 8006a64:	429c      	cmp	r4, r3
 8006a66:	d000      	beq.n	8006a6a <_vsniprintf_r+0x2e>
 8006a68:	1e63      	subs	r3, r4, #1
 8006a6a:	9302      	str	r3, [sp, #8]
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4669      	mov	r1, sp
 8006a72:	425b      	negs	r3, r3
 8006a74:	81cb      	strh	r3, [r1, #14]
 8006a76:	0028      	movs	r0, r5
 8006a78:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006a7a:	f000 f9a7 	bl	8006dcc <_svfiprintf_r>
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	da01      	bge.n	8006a86 <_vsniprintf_r+0x4a>
 8006a82:	238b      	movs	r3, #139	@ 0x8b
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	2c00      	cmp	r4, #0
 8006a88:	d0e3      	beq.n	8006a52 <_vsniprintf_r+0x16>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	9b00      	ldr	r3, [sp, #0]
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	e7df      	b.n	8006a52 <_vsniprintf_r+0x16>
	...

08006a94 <vsniprintf>:
 8006a94:	b513      	push	{r0, r1, r4, lr}
 8006a96:	4c04      	ldr	r4, [pc, #16]	@ (8006aa8 <vsniprintf+0x14>)
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	0013      	movs	r3, r2
 8006a9c:	000a      	movs	r2, r1
 8006a9e:	0001      	movs	r1, r0
 8006aa0:	6820      	ldr	r0, [r4, #0]
 8006aa2:	f7ff ffcb 	bl	8006a3c <_vsniprintf_r>
 8006aa6:	bd16      	pop	{r1, r2, r4, pc}
 8006aa8:	20000020 	.word	0x20000020

08006aac <memset>:
 8006aac:	0003      	movs	r3, r0
 8006aae:	1882      	adds	r2, r0, r2
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d100      	bne.n	8006ab6 <memset+0xa>
 8006ab4:	4770      	bx	lr
 8006ab6:	7019      	strb	r1, [r3, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	e7f9      	b.n	8006ab0 <memset+0x4>

08006abc <__errno>:
 8006abc:	4b01      	ldr	r3, [pc, #4]	@ (8006ac4 <__errno+0x8>)
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	4770      	bx	lr
 8006ac2:	46c0      	nop			@ (mov r8, r8)
 8006ac4:	20000020 	.word	0x20000020

08006ac8 <__libc_init_array>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	2600      	movs	r6, #0
 8006acc:	4c0c      	ldr	r4, [pc, #48]	@ (8006b00 <__libc_init_array+0x38>)
 8006ace:	4d0d      	ldr	r5, [pc, #52]	@ (8006b04 <__libc_init_array+0x3c>)
 8006ad0:	1b64      	subs	r4, r4, r5
 8006ad2:	10a4      	asrs	r4, r4, #2
 8006ad4:	42a6      	cmp	r6, r4
 8006ad6:	d109      	bne.n	8006aec <__libc_init_array+0x24>
 8006ad8:	2600      	movs	r6, #0
 8006ada:	f000 fc89 	bl	80073f0 <_init>
 8006ade:	4c0a      	ldr	r4, [pc, #40]	@ (8006b08 <__libc_init_array+0x40>)
 8006ae0:	4d0a      	ldr	r5, [pc, #40]	@ (8006b0c <__libc_init_array+0x44>)
 8006ae2:	1b64      	subs	r4, r4, r5
 8006ae4:	10a4      	asrs	r4, r4, #2
 8006ae6:	42a6      	cmp	r6, r4
 8006ae8:	d105      	bne.n	8006af6 <__libc_init_array+0x2e>
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	00b3      	lsls	r3, r6, #2
 8006aee:	58eb      	ldr	r3, [r5, r3]
 8006af0:	4798      	blx	r3
 8006af2:	3601      	adds	r6, #1
 8006af4:	e7ee      	b.n	8006ad4 <__libc_init_array+0xc>
 8006af6:	00b3      	lsls	r3, r6, #2
 8006af8:	58eb      	ldr	r3, [r5, r3]
 8006afa:	4798      	blx	r3
 8006afc:	3601      	adds	r6, #1
 8006afe:	e7f2      	b.n	8006ae6 <__libc_init_array+0x1e>
 8006b00:	08007b98 	.word	0x08007b98
 8006b04:	08007b98 	.word	0x08007b98
 8006b08:	08007b9c 	.word	0x08007b9c
 8006b0c:	08007b98 	.word	0x08007b98

08006b10 <__retarget_lock_acquire_recursive>:
 8006b10:	4770      	bx	lr

08006b12 <__retarget_lock_release_recursive>:
 8006b12:	4770      	bx	lr

08006b14 <_free_r>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	0005      	movs	r5, r0
 8006b18:	1e0c      	subs	r4, r1, #0
 8006b1a:	d010      	beq.n	8006b3e <_free_r+0x2a>
 8006b1c:	3c04      	subs	r4, #4
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da00      	bge.n	8006b26 <_free_r+0x12>
 8006b24:	18e4      	adds	r4, r4, r3
 8006b26:	0028      	movs	r0, r5
 8006b28:	f000 f8e0 	bl	8006cec <__malloc_lock>
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba4 <_free_r+0x90>)
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <_free_r+0x2c>
 8006b34:	6063      	str	r3, [r4, #4]
 8006b36:	6014      	str	r4, [r2, #0]
 8006b38:	0028      	movs	r0, r5
 8006b3a:	f000 f8df 	bl	8006cfc <__malloc_unlock>
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	d908      	bls.n	8006b56 <_free_r+0x42>
 8006b44:	6820      	ldr	r0, [r4, #0]
 8006b46:	1821      	adds	r1, r4, r0
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	d1f3      	bne.n	8006b34 <_free_r+0x20>
 8006b4c:	6819      	ldr	r1, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	1809      	adds	r1, r1, r0
 8006b52:	6021      	str	r1, [r4, #0]
 8006b54:	e7ee      	b.n	8006b34 <_free_r+0x20>
 8006b56:	001a      	movs	r2, r3
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <_free_r+0x4e>
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	d9f9      	bls.n	8006b56 <_free_r+0x42>
 8006b62:	6811      	ldr	r1, [r2, #0]
 8006b64:	1850      	adds	r0, r2, r1
 8006b66:	42a0      	cmp	r0, r4
 8006b68:	d10b      	bne.n	8006b82 <_free_r+0x6e>
 8006b6a:	6820      	ldr	r0, [r4, #0]
 8006b6c:	1809      	adds	r1, r1, r0
 8006b6e:	1850      	adds	r0, r2, r1
 8006b70:	6011      	str	r1, [r2, #0]
 8006b72:	4283      	cmp	r3, r0
 8006b74:	d1e0      	bne.n	8006b38 <_free_r+0x24>
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	1841      	adds	r1, r0, r1
 8006b7c:	6011      	str	r1, [r2, #0]
 8006b7e:	6053      	str	r3, [r2, #4]
 8006b80:	e7da      	b.n	8006b38 <_free_r+0x24>
 8006b82:	42a0      	cmp	r0, r4
 8006b84:	d902      	bls.n	8006b8c <_free_r+0x78>
 8006b86:	230c      	movs	r3, #12
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	e7d5      	b.n	8006b38 <_free_r+0x24>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	1821      	adds	r1, r4, r0
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d103      	bne.n	8006b9c <_free_r+0x88>
 8006b94:	6819      	ldr	r1, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	1809      	adds	r1, r1, r0
 8006b9a:	6021      	str	r1, [r4, #0]
 8006b9c:	6063      	str	r3, [r4, #4]
 8006b9e:	6054      	str	r4, [r2, #4]
 8006ba0:	e7ca      	b.n	8006b38 <_free_r+0x24>
 8006ba2:	46c0      	nop			@ (mov r8, r8)
 8006ba4:	200013bc 	.word	0x200013bc

08006ba8 <sbrk_aligned>:
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	4e0f      	ldr	r6, [pc, #60]	@ (8006be8 <sbrk_aligned+0x40>)
 8006bac:	000d      	movs	r5, r1
 8006bae:	6831      	ldr	r1, [r6, #0]
 8006bb0:	0004      	movs	r4, r0
 8006bb2:	2900      	cmp	r1, #0
 8006bb4:	d102      	bne.n	8006bbc <sbrk_aligned+0x14>
 8006bb6:	f000 fb99 	bl	80072ec <_sbrk_r>
 8006bba:	6030      	str	r0, [r6, #0]
 8006bbc:	0029      	movs	r1, r5
 8006bbe:	0020      	movs	r0, r4
 8006bc0:	f000 fb94 	bl	80072ec <_sbrk_r>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d103      	bne.n	8006bd0 <sbrk_aligned+0x28>
 8006bc8:	2501      	movs	r5, #1
 8006bca:	426d      	negs	r5, r5
 8006bcc:	0028      	movs	r0, r5
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	1cc5      	adds	r5, r0, #3
 8006bd4:	439d      	bics	r5, r3
 8006bd6:	42a8      	cmp	r0, r5
 8006bd8:	d0f8      	beq.n	8006bcc <sbrk_aligned+0x24>
 8006bda:	1a29      	subs	r1, r5, r0
 8006bdc:	0020      	movs	r0, r4
 8006bde:	f000 fb85 	bl	80072ec <_sbrk_r>
 8006be2:	3001      	adds	r0, #1
 8006be4:	d1f2      	bne.n	8006bcc <sbrk_aligned+0x24>
 8006be6:	e7ef      	b.n	8006bc8 <sbrk_aligned+0x20>
 8006be8:	200013b8 	.word	0x200013b8

08006bec <_malloc_r>:
 8006bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bee:	2203      	movs	r2, #3
 8006bf0:	1ccb      	adds	r3, r1, #3
 8006bf2:	4393      	bics	r3, r2
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	0005      	movs	r5, r0
 8006bf8:	001f      	movs	r7, r3
 8006bfa:	2b0c      	cmp	r3, #12
 8006bfc:	d234      	bcs.n	8006c68 <_malloc_r+0x7c>
 8006bfe:	270c      	movs	r7, #12
 8006c00:	42b9      	cmp	r1, r7
 8006c02:	d833      	bhi.n	8006c6c <_malloc_r+0x80>
 8006c04:	0028      	movs	r0, r5
 8006c06:	f000 f871 	bl	8006cec <__malloc_lock>
 8006c0a:	4e37      	ldr	r6, [pc, #220]	@ (8006ce8 <_malloc_r+0xfc>)
 8006c0c:	6833      	ldr	r3, [r6, #0]
 8006c0e:	001c      	movs	r4, r3
 8006c10:	2c00      	cmp	r4, #0
 8006c12:	d12f      	bne.n	8006c74 <_malloc_r+0x88>
 8006c14:	0039      	movs	r1, r7
 8006c16:	0028      	movs	r0, r5
 8006c18:	f7ff ffc6 	bl	8006ba8 <sbrk_aligned>
 8006c1c:	0004      	movs	r4, r0
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d15f      	bne.n	8006ce2 <_malloc_r+0xf6>
 8006c22:	6834      	ldr	r4, [r6, #0]
 8006c24:	9400      	str	r4, [sp, #0]
 8006c26:	9b00      	ldr	r3, [sp, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d14a      	bne.n	8006cc2 <_malloc_r+0xd6>
 8006c2c:	2c00      	cmp	r4, #0
 8006c2e:	d052      	beq.n	8006cd6 <_malloc_r+0xea>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	0028      	movs	r0, r5
 8006c34:	18e3      	adds	r3, r4, r3
 8006c36:	9900      	ldr	r1, [sp, #0]
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	f000 fb57 	bl	80072ec <_sbrk_r>
 8006c3e:	9b01      	ldr	r3, [sp, #4]
 8006c40:	4283      	cmp	r3, r0
 8006c42:	d148      	bne.n	8006cd6 <_malloc_r+0xea>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	0028      	movs	r0, r5
 8006c48:	1aff      	subs	r7, r7, r3
 8006c4a:	0039      	movs	r1, r7
 8006c4c:	f7ff ffac 	bl	8006ba8 <sbrk_aligned>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d040      	beq.n	8006cd6 <_malloc_r+0xea>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	19db      	adds	r3, r3, r7
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	6833      	ldr	r3, [r6, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	2a00      	cmp	r2, #0
 8006c60:	d133      	bne.n	8006cca <_malloc_r+0xde>
 8006c62:	9b00      	ldr	r3, [sp, #0]
 8006c64:	6033      	str	r3, [r6, #0]
 8006c66:	e019      	b.n	8006c9c <_malloc_r+0xb0>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	dac9      	bge.n	8006c00 <_malloc_r+0x14>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	2000      	movs	r0, #0
 8006c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c74:	6821      	ldr	r1, [r4, #0]
 8006c76:	1bc9      	subs	r1, r1, r7
 8006c78:	d420      	bmi.n	8006cbc <_malloc_r+0xd0>
 8006c7a:	290b      	cmp	r1, #11
 8006c7c:	d90a      	bls.n	8006c94 <_malloc_r+0xa8>
 8006c7e:	19e2      	adds	r2, r4, r7
 8006c80:	6027      	str	r7, [r4, #0]
 8006c82:	42a3      	cmp	r3, r4
 8006c84:	d104      	bne.n	8006c90 <_malloc_r+0xa4>
 8006c86:	6032      	str	r2, [r6, #0]
 8006c88:	6863      	ldr	r3, [r4, #4]
 8006c8a:	6011      	str	r1, [r2, #0]
 8006c8c:	6053      	str	r3, [r2, #4]
 8006c8e:	e005      	b.n	8006c9c <_malloc_r+0xb0>
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	e7f9      	b.n	8006c88 <_malloc_r+0x9c>
 8006c94:	6862      	ldr	r2, [r4, #4]
 8006c96:	42a3      	cmp	r3, r4
 8006c98:	d10e      	bne.n	8006cb8 <_malloc_r+0xcc>
 8006c9a:	6032      	str	r2, [r6, #0]
 8006c9c:	0028      	movs	r0, r5
 8006c9e:	f000 f82d 	bl	8006cfc <__malloc_unlock>
 8006ca2:	0020      	movs	r0, r4
 8006ca4:	2207      	movs	r2, #7
 8006ca6:	300b      	adds	r0, #11
 8006ca8:	1d23      	adds	r3, r4, #4
 8006caa:	4390      	bics	r0, r2
 8006cac:	1ac2      	subs	r2, r0, r3
 8006cae:	4298      	cmp	r0, r3
 8006cb0:	d0df      	beq.n	8006c72 <_malloc_r+0x86>
 8006cb2:	1a1b      	subs	r3, r3, r0
 8006cb4:	50a3      	str	r3, [r4, r2]
 8006cb6:	e7dc      	b.n	8006c72 <_malloc_r+0x86>
 8006cb8:	605a      	str	r2, [r3, #4]
 8006cba:	e7ef      	b.n	8006c9c <_malloc_r+0xb0>
 8006cbc:	0023      	movs	r3, r4
 8006cbe:	6864      	ldr	r4, [r4, #4]
 8006cc0:	e7a6      	b.n	8006c10 <_malloc_r+0x24>
 8006cc2:	9c00      	ldr	r4, [sp, #0]
 8006cc4:	6863      	ldr	r3, [r4, #4]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	e7ad      	b.n	8006c26 <_malloc_r+0x3a>
 8006cca:	001a      	movs	r2, r3
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	42a3      	cmp	r3, r4
 8006cd0:	d1fb      	bne.n	8006cca <_malloc_r+0xde>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e7da      	b.n	8006c8c <_malloc_r+0xa0>
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	0028      	movs	r0, r5
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	f000 f80e 	bl	8006cfc <__malloc_unlock>
 8006ce0:	e7c6      	b.n	8006c70 <_malloc_r+0x84>
 8006ce2:	6007      	str	r7, [r0, #0]
 8006ce4:	e7da      	b.n	8006c9c <_malloc_r+0xb0>
 8006ce6:	46c0      	nop			@ (mov r8, r8)
 8006ce8:	200013bc 	.word	0x200013bc

08006cec <__malloc_lock>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	4802      	ldr	r0, [pc, #8]	@ (8006cf8 <__malloc_lock+0xc>)
 8006cf0:	f7ff ff0e 	bl	8006b10 <__retarget_lock_acquire_recursive>
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	200013b4 	.word	0x200013b4

08006cfc <__malloc_unlock>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4802      	ldr	r0, [pc, #8]	@ (8006d08 <__malloc_unlock+0xc>)
 8006d00:	f7ff ff07 	bl	8006b12 <__retarget_lock_release_recursive>
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	46c0      	nop			@ (mov r8, r8)
 8006d08:	200013b4 	.word	0x200013b4

08006d0c <__ssputs_r>:
 8006d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0e:	688e      	ldr	r6, [r1, #8]
 8006d10:	b085      	sub	sp, #20
 8006d12:	001f      	movs	r7, r3
 8006d14:	000c      	movs	r4, r1
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	9002      	str	r0, [sp, #8]
 8006d1a:	9203      	str	r2, [sp, #12]
 8006d1c:	42be      	cmp	r6, r7
 8006d1e:	d830      	bhi.n	8006d82 <__ssputs_r+0x76>
 8006d20:	210c      	movs	r1, #12
 8006d22:	5e62      	ldrsh	r2, [r4, r1]
 8006d24:	2190      	movs	r1, #144	@ 0x90
 8006d26:	00c9      	lsls	r1, r1, #3
 8006d28:	420a      	tst	r2, r1
 8006d2a:	d028      	beq.n	8006d7e <__ssputs_r+0x72>
 8006d2c:	2003      	movs	r0, #3
 8006d2e:	6921      	ldr	r1, [r4, #16]
 8006d30:	1a5b      	subs	r3, r3, r1
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	6963      	ldr	r3, [r4, #20]
 8006d36:	4343      	muls	r3, r0
 8006d38:	9801      	ldr	r0, [sp, #4]
 8006d3a:	0fdd      	lsrs	r5, r3, #31
 8006d3c:	18ed      	adds	r5, r5, r3
 8006d3e:	1c7b      	adds	r3, r7, #1
 8006d40:	181b      	adds	r3, r3, r0
 8006d42:	106d      	asrs	r5, r5, #1
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	d900      	bls.n	8006d4a <__ssputs_r+0x3e>
 8006d48:	001d      	movs	r5, r3
 8006d4a:	0552      	lsls	r2, r2, #21
 8006d4c:	d528      	bpl.n	8006da0 <__ssputs_r+0x94>
 8006d4e:	0029      	movs	r1, r5
 8006d50:	9802      	ldr	r0, [sp, #8]
 8006d52:	f7ff ff4b 	bl	8006bec <_malloc_r>
 8006d56:	1e06      	subs	r6, r0, #0
 8006d58:	d02c      	beq.n	8006db4 <__ssputs_r+0xa8>
 8006d5a:	9a01      	ldr	r2, [sp, #4]
 8006d5c:	6921      	ldr	r1, [r4, #16]
 8006d5e:	f000 fae2 	bl	8007326 <memcpy>
 8006d62:	89a2      	ldrh	r2, [r4, #12]
 8006d64:	4b18      	ldr	r3, [pc, #96]	@ (8006dc8 <__ssputs_r+0xbc>)
 8006d66:	401a      	ands	r2, r3
 8006d68:	2380      	movs	r3, #128	@ 0x80
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	9b01      	ldr	r3, [sp, #4]
 8006d70:	6126      	str	r6, [r4, #16]
 8006d72:	18f6      	adds	r6, r6, r3
 8006d74:	6026      	str	r6, [r4, #0]
 8006d76:	003e      	movs	r6, r7
 8006d78:	6165      	str	r5, [r4, #20]
 8006d7a:	1aed      	subs	r5, r5, r3
 8006d7c:	60a5      	str	r5, [r4, #8]
 8006d7e:	42be      	cmp	r6, r7
 8006d80:	d900      	bls.n	8006d84 <__ssputs_r+0x78>
 8006d82:	003e      	movs	r6, r7
 8006d84:	0032      	movs	r2, r6
 8006d86:	9903      	ldr	r1, [sp, #12]
 8006d88:	6820      	ldr	r0, [r4, #0]
 8006d8a:	f000 fa9b 	bl	80072c4 <memmove>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	68a3      	ldr	r3, [r4, #8]
 8006d92:	1b9b      	subs	r3, r3, r6
 8006d94:	60a3      	str	r3, [r4, #8]
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	199b      	adds	r3, r3, r6
 8006d9a:	6023      	str	r3, [r4, #0]
 8006d9c:	b005      	add	sp, #20
 8006d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da0:	002a      	movs	r2, r5
 8006da2:	9802      	ldr	r0, [sp, #8]
 8006da4:	f000 fac8 	bl	8007338 <_realloc_r>
 8006da8:	1e06      	subs	r6, r0, #0
 8006daa:	d1e0      	bne.n	8006d6e <__ssputs_r+0x62>
 8006dac:	6921      	ldr	r1, [r4, #16]
 8006dae:	9802      	ldr	r0, [sp, #8]
 8006db0:	f7ff feb0 	bl	8006b14 <_free_r>
 8006db4:	230c      	movs	r3, #12
 8006db6:	2001      	movs	r0, #1
 8006db8:	9a02      	ldr	r2, [sp, #8]
 8006dba:	4240      	negs	r0, r0
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	89a2      	ldrh	r2, [r4, #12]
 8006dc0:	3334      	adds	r3, #52	@ 0x34
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	81a3      	strh	r3, [r4, #12]
 8006dc6:	e7e9      	b.n	8006d9c <__ssputs_r+0x90>
 8006dc8:	fffffb7f 	.word	0xfffffb7f

08006dcc <_svfiprintf_r>:
 8006dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dce:	b0a1      	sub	sp, #132	@ 0x84
 8006dd0:	9003      	str	r0, [sp, #12]
 8006dd2:	001d      	movs	r5, r3
 8006dd4:	898b      	ldrh	r3, [r1, #12]
 8006dd6:	000f      	movs	r7, r1
 8006dd8:	0016      	movs	r6, r2
 8006dda:	061b      	lsls	r3, r3, #24
 8006ddc:	d511      	bpl.n	8006e02 <_svfiprintf_r+0x36>
 8006dde:	690b      	ldr	r3, [r1, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10e      	bne.n	8006e02 <_svfiprintf_r+0x36>
 8006de4:	2140      	movs	r1, #64	@ 0x40
 8006de6:	f7ff ff01 	bl	8006bec <_malloc_r>
 8006dea:	6038      	str	r0, [r7, #0]
 8006dec:	6138      	str	r0, [r7, #16]
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d105      	bne.n	8006dfe <_svfiprintf_r+0x32>
 8006df2:	230c      	movs	r3, #12
 8006df4:	9a03      	ldr	r2, [sp, #12]
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	2001      	movs	r0, #1
 8006dfa:	4240      	negs	r0, r0
 8006dfc:	e0cf      	b.n	8006f9e <_svfiprintf_r+0x1d2>
 8006dfe:	2340      	movs	r3, #64	@ 0x40
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	2300      	movs	r3, #0
 8006e04:	ac08      	add	r4, sp, #32
 8006e06:	6163      	str	r3, [r4, #20]
 8006e08:	3320      	adds	r3, #32
 8006e0a:	7663      	strb	r3, [r4, #25]
 8006e0c:	3310      	adds	r3, #16
 8006e0e:	76a3      	strb	r3, [r4, #26]
 8006e10:	9507      	str	r5, [sp, #28]
 8006e12:	0035      	movs	r5, r6
 8006e14:	782b      	ldrb	r3, [r5, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <_svfiprintf_r+0x52>
 8006e1a:	2b25      	cmp	r3, #37	@ 0x25
 8006e1c:	d148      	bne.n	8006eb0 <_svfiprintf_r+0xe4>
 8006e1e:	1bab      	subs	r3, r5, r6
 8006e20:	9305      	str	r3, [sp, #20]
 8006e22:	42b5      	cmp	r5, r6
 8006e24:	d00b      	beq.n	8006e3e <_svfiprintf_r+0x72>
 8006e26:	0032      	movs	r2, r6
 8006e28:	0039      	movs	r1, r7
 8006e2a:	9803      	ldr	r0, [sp, #12]
 8006e2c:	f7ff ff6e 	bl	8006d0c <__ssputs_r>
 8006e30:	3001      	adds	r0, #1
 8006e32:	d100      	bne.n	8006e36 <_svfiprintf_r+0x6a>
 8006e34:	e0ae      	b.n	8006f94 <_svfiprintf_r+0x1c8>
 8006e36:	6963      	ldr	r3, [r4, #20]
 8006e38:	9a05      	ldr	r2, [sp, #20]
 8006e3a:	189b      	adds	r3, r3, r2
 8006e3c:	6163      	str	r3, [r4, #20]
 8006e3e:	782b      	ldrb	r3, [r5, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d100      	bne.n	8006e46 <_svfiprintf_r+0x7a>
 8006e44:	e0a6      	b.n	8006f94 <_svfiprintf_r+0x1c8>
 8006e46:	2201      	movs	r2, #1
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4252      	negs	r2, r2
 8006e4c:	6062      	str	r2, [r4, #4]
 8006e4e:	a904      	add	r1, sp, #16
 8006e50:	3254      	adds	r2, #84	@ 0x54
 8006e52:	1852      	adds	r2, r2, r1
 8006e54:	1c6e      	adds	r6, r5, #1
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	60e3      	str	r3, [r4, #12]
 8006e5a:	60a3      	str	r3, [r4, #8]
 8006e5c:	7013      	strb	r3, [r2, #0]
 8006e5e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006e60:	4b54      	ldr	r3, [pc, #336]	@ (8006fb4 <_svfiprintf_r+0x1e8>)
 8006e62:	2205      	movs	r2, #5
 8006e64:	0018      	movs	r0, r3
 8006e66:	7831      	ldrb	r1, [r6, #0]
 8006e68:	9305      	str	r3, [sp, #20]
 8006e6a:	f000 fa51 	bl	8007310 <memchr>
 8006e6e:	1c75      	adds	r5, r6, #1
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d11f      	bne.n	8006eb4 <_svfiprintf_r+0xe8>
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	06d3      	lsls	r3, r2, #27
 8006e78:	d504      	bpl.n	8006e84 <_svfiprintf_r+0xb8>
 8006e7a:	2353      	movs	r3, #83	@ 0x53
 8006e7c:	a904      	add	r1, sp, #16
 8006e7e:	185b      	adds	r3, r3, r1
 8006e80:	2120      	movs	r1, #32
 8006e82:	7019      	strb	r1, [r3, #0]
 8006e84:	0713      	lsls	r3, r2, #28
 8006e86:	d504      	bpl.n	8006e92 <_svfiprintf_r+0xc6>
 8006e88:	2353      	movs	r3, #83	@ 0x53
 8006e8a:	a904      	add	r1, sp, #16
 8006e8c:	185b      	adds	r3, r3, r1
 8006e8e:	212b      	movs	r1, #43	@ 0x2b
 8006e90:	7019      	strb	r1, [r3, #0]
 8006e92:	7833      	ldrb	r3, [r6, #0]
 8006e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e96:	d016      	beq.n	8006ec6 <_svfiprintf_r+0xfa>
 8006e98:	0035      	movs	r5, r6
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	200a      	movs	r0, #10
 8006e9e:	68e3      	ldr	r3, [r4, #12]
 8006ea0:	782a      	ldrb	r2, [r5, #0]
 8006ea2:	1c6e      	adds	r6, r5, #1
 8006ea4:	3a30      	subs	r2, #48	@ 0x30
 8006ea6:	2a09      	cmp	r2, #9
 8006ea8:	d950      	bls.n	8006f4c <_svfiprintf_r+0x180>
 8006eaa:	2900      	cmp	r1, #0
 8006eac:	d111      	bne.n	8006ed2 <_svfiprintf_r+0x106>
 8006eae:	e017      	b.n	8006ee0 <_svfiprintf_r+0x114>
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	e7af      	b.n	8006e14 <_svfiprintf_r+0x48>
 8006eb4:	9b05      	ldr	r3, [sp, #20]
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	1ac0      	subs	r0, r0, r3
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4083      	lsls	r3, r0
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	002e      	movs	r6, r5
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	e7cc      	b.n	8006e60 <_svfiprintf_r+0x94>
 8006ec6:	9b07      	ldr	r3, [sp, #28]
 8006ec8:	1d19      	adds	r1, r3, #4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	9107      	str	r1, [sp, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	db01      	blt.n	8006ed6 <_svfiprintf_r+0x10a>
 8006ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ed4:	e004      	b.n	8006ee0 <_svfiprintf_r+0x114>
 8006ed6:	425b      	negs	r3, r3
 8006ed8:	60e3      	str	r3, [r4, #12]
 8006eda:	2302      	movs	r3, #2
 8006edc:	4313      	orrs	r3, r2
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	782b      	ldrb	r3, [r5, #0]
 8006ee2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ee4:	d10c      	bne.n	8006f00 <_svfiprintf_r+0x134>
 8006ee6:	786b      	ldrb	r3, [r5, #1]
 8006ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eea:	d134      	bne.n	8006f56 <_svfiprintf_r+0x18a>
 8006eec:	9b07      	ldr	r3, [sp, #28]
 8006eee:	3502      	adds	r5, #2
 8006ef0:	1d1a      	adds	r2, r3, #4
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	9207      	str	r2, [sp, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	da01      	bge.n	8006efe <_svfiprintf_r+0x132>
 8006efa:	2301      	movs	r3, #1
 8006efc:	425b      	negs	r3, r3
 8006efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f00:	4e2d      	ldr	r6, [pc, #180]	@ (8006fb8 <_svfiprintf_r+0x1ec>)
 8006f02:	2203      	movs	r2, #3
 8006f04:	0030      	movs	r0, r6
 8006f06:	7829      	ldrb	r1, [r5, #0]
 8006f08:	f000 fa02 	bl	8007310 <memchr>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d006      	beq.n	8006f1e <_svfiprintf_r+0x152>
 8006f10:	2340      	movs	r3, #64	@ 0x40
 8006f12:	1b80      	subs	r0, r0, r6
 8006f14:	4083      	lsls	r3, r0
 8006f16:	6822      	ldr	r2, [r4, #0]
 8006f18:	3501      	adds	r5, #1
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	7829      	ldrb	r1, [r5, #0]
 8006f20:	2206      	movs	r2, #6
 8006f22:	4826      	ldr	r0, [pc, #152]	@ (8006fbc <_svfiprintf_r+0x1f0>)
 8006f24:	1c6e      	adds	r6, r5, #1
 8006f26:	7621      	strb	r1, [r4, #24]
 8006f28:	f000 f9f2 	bl	8007310 <memchr>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d038      	beq.n	8006fa2 <_svfiprintf_r+0x1d6>
 8006f30:	4b23      	ldr	r3, [pc, #140]	@ (8006fc0 <_svfiprintf_r+0x1f4>)
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d122      	bne.n	8006f7c <_svfiprintf_r+0x1b0>
 8006f36:	2207      	movs	r2, #7
 8006f38:	9b07      	ldr	r3, [sp, #28]
 8006f3a:	3307      	adds	r3, #7
 8006f3c:	4393      	bics	r3, r2
 8006f3e:	3308      	adds	r3, #8
 8006f40:	9307      	str	r3, [sp, #28]
 8006f42:	6963      	ldr	r3, [r4, #20]
 8006f44:	9a04      	ldr	r2, [sp, #16]
 8006f46:	189b      	adds	r3, r3, r2
 8006f48:	6163      	str	r3, [r4, #20]
 8006f4a:	e762      	b.n	8006e12 <_svfiprintf_r+0x46>
 8006f4c:	4343      	muls	r3, r0
 8006f4e:	0035      	movs	r5, r6
 8006f50:	2101      	movs	r1, #1
 8006f52:	189b      	adds	r3, r3, r2
 8006f54:	e7a4      	b.n	8006ea0 <_svfiprintf_r+0xd4>
 8006f56:	2300      	movs	r3, #0
 8006f58:	200a      	movs	r0, #10
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	6063      	str	r3, [r4, #4]
 8006f60:	782a      	ldrb	r2, [r5, #0]
 8006f62:	1c6e      	adds	r6, r5, #1
 8006f64:	3a30      	subs	r2, #48	@ 0x30
 8006f66:	2a09      	cmp	r2, #9
 8006f68:	d903      	bls.n	8006f72 <_svfiprintf_r+0x1a6>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0c8      	beq.n	8006f00 <_svfiprintf_r+0x134>
 8006f6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f70:	e7c6      	b.n	8006f00 <_svfiprintf_r+0x134>
 8006f72:	4341      	muls	r1, r0
 8006f74:	0035      	movs	r5, r6
 8006f76:	2301      	movs	r3, #1
 8006f78:	1889      	adds	r1, r1, r2
 8006f7a:	e7f1      	b.n	8006f60 <_svfiprintf_r+0x194>
 8006f7c:	aa07      	add	r2, sp, #28
 8006f7e:	9200      	str	r2, [sp, #0]
 8006f80:	0021      	movs	r1, r4
 8006f82:	003a      	movs	r2, r7
 8006f84:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc4 <_svfiprintf_r+0x1f8>)
 8006f86:	9803      	ldr	r0, [sp, #12]
 8006f88:	e000      	b.n	8006f8c <_svfiprintf_r+0x1c0>
 8006f8a:	bf00      	nop
 8006f8c:	9004      	str	r0, [sp, #16]
 8006f8e:	9b04      	ldr	r3, [sp, #16]
 8006f90:	3301      	adds	r3, #1
 8006f92:	d1d6      	bne.n	8006f42 <_svfiprintf_r+0x176>
 8006f94:	89bb      	ldrh	r3, [r7, #12]
 8006f96:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006f98:	065b      	lsls	r3, r3, #25
 8006f9a:	d500      	bpl.n	8006f9e <_svfiprintf_r+0x1d2>
 8006f9c:	e72c      	b.n	8006df8 <_svfiprintf_r+0x2c>
 8006f9e:	b021      	add	sp, #132	@ 0x84
 8006fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa2:	aa07      	add	r2, sp, #28
 8006fa4:	9200      	str	r2, [sp, #0]
 8006fa6:	0021      	movs	r1, r4
 8006fa8:	003a      	movs	r2, r7
 8006faa:	4b06      	ldr	r3, [pc, #24]	@ (8006fc4 <_svfiprintf_r+0x1f8>)
 8006fac:	9803      	ldr	r0, [sp, #12]
 8006fae:	f000 f87b 	bl	80070a8 <_printf_i>
 8006fb2:	e7eb      	b.n	8006f8c <_svfiprintf_r+0x1c0>
 8006fb4:	08007b5c 	.word	0x08007b5c
 8006fb8:	08007b62 	.word	0x08007b62
 8006fbc:	08007b66 	.word	0x08007b66
 8006fc0:	00000000 	.word	0x00000000
 8006fc4:	08006d0d 	.word	0x08006d0d

08006fc8 <_printf_common>:
 8006fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fca:	0016      	movs	r6, r2
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	688a      	ldr	r2, [r1, #8]
 8006fd0:	690b      	ldr	r3, [r1, #16]
 8006fd2:	000c      	movs	r4, r1
 8006fd4:	9000      	str	r0, [sp, #0]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	da00      	bge.n	8006fdc <_printf_common+0x14>
 8006fda:	0013      	movs	r3, r2
 8006fdc:	0022      	movs	r2, r4
 8006fde:	6033      	str	r3, [r6, #0]
 8006fe0:	3243      	adds	r2, #67	@ 0x43
 8006fe2:	7812      	ldrb	r2, [r2, #0]
 8006fe4:	2a00      	cmp	r2, #0
 8006fe6:	d001      	beq.n	8006fec <_printf_common+0x24>
 8006fe8:	3301      	adds	r3, #1
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	069b      	lsls	r3, r3, #26
 8006ff0:	d502      	bpl.n	8006ff8 <_printf_common+0x30>
 8006ff2:	6833      	ldr	r3, [r6, #0]
 8006ff4:	3302      	adds	r3, #2
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	2306      	movs	r3, #6
 8006ffc:	0015      	movs	r5, r2
 8006ffe:	401d      	ands	r5, r3
 8007000:	421a      	tst	r2, r3
 8007002:	d027      	beq.n	8007054 <_printf_common+0x8c>
 8007004:	0023      	movs	r3, r4
 8007006:	3343      	adds	r3, #67	@ 0x43
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	1e5a      	subs	r2, r3, #1
 800700c:	4193      	sbcs	r3, r2
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	0692      	lsls	r2, r2, #26
 8007012:	d430      	bmi.n	8007076 <_printf_common+0xae>
 8007014:	0022      	movs	r2, r4
 8007016:	9901      	ldr	r1, [sp, #4]
 8007018:	9800      	ldr	r0, [sp, #0]
 800701a:	9d08      	ldr	r5, [sp, #32]
 800701c:	3243      	adds	r2, #67	@ 0x43
 800701e:	47a8      	blx	r5
 8007020:	3001      	adds	r0, #1
 8007022:	d025      	beq.n	8007070 <_printf_common+0xa8>
 8007024:	2206      	movs	r2, #6
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	2500      	movs	r5, #0
 800702a:	4013      	ands	r3, r2
 800702c:	2b04      	cmp	r3, #4
 800702e:	d105      	bne.n	800703c <_printf_common+0x74>
 8007030:	6833      	ldr	r3, [r6, #0]
 8007032:	68e5      	ldr	r5, [r4, #12]
 8007034:	1aed      	subs	r5, r5, r3
 8007036:	43eb      	mvns	r3, r5
 8007038:	17db      	asrs	r3, r3, #31
 800703a:	401d      	ands	r5, r3
 800703c:	68a3      	ldr	r3, [r4, #8]
 800703e:	6922      	ldr	r2, [r4, #16]
 8007040:	4293      	cmp	r3, r2
 8007042:	dd01      	ble.n	8007048 <_printf_common+0x80>
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	18ed      	adds	r5, r5, r3
 8007048:	2600      	movs	r6, #0
 800704a:	42b5      	cmp	r5, r6
 800704c:	d120      	bne.n	8007090 <_printf_common+0xc8>
 800704e:	2000      	movs	r0, #0
 8007050:	e010      	b.n	8007074 <_printf_common+0xac>
 8007052:	3501      	adds	r5, #1
 8007054:	68e3      	ldr	r3, [r4, #12]
 8007056:	6832      	ldr	r2, [r6, #0]
 8007058:	1a9b      	subs	r3, r3, r2
 800705a:	42ab      	cmp	r3, r5
 800705c:	ddd2      	ble.n	8007004 <_printf_common+0x3c>
 800705e:	0022      	movs	r2, r4
 8007060:	2301      	movs	r3, #1
 8007062:	9901      	ldr	r1, [sp, #4]
 8007064:	9800      	ldr	r0, [sp, #0]
 8007066:	9f08      	ldr	r7, [sp, #32]
 8007068:	3219      	adds	r2, #25
 800706a:	47b8      	blx	r7
 800706c:	3001      	adds	r0, #1
 800706e:	d1f0      	bne.n	8007052 <_printf_common+0x8a>
 8007070:	2001      	movs	r0, #1
 8007072:	4240      	negs	r0, r0
 8007074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007076:	2030      	movs	r0, #48	@ 0x30
 8007078:	18e1      	adds	r1, r4, r3
 800707a:	3143      	adds	r1, #67	@ 0x43
 800707c:	7008      	strb	r0, [r1, #0]
 800707e:	0021      	movs	r1, r4
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	3145      	adds	r1, #69	@ 0x45
 8007084:	7809      	ldrb	r1, [r1, #0]
 8007086:	18a2      	adds	r2, r4, r2
 8007088:	3243      	adds	r2, #67	@ 0x43
 800708a:	3302      	adds	r3, #2
 800708c:	7011      	strb	r1, [r2, #0]
 800708e:	e7c1      	b.n	8007014 <_printf_common+0x4c>
 8007090:	0022      	movs	r2, r4
 8007092:	2301      	movs	r3, #1
 8007094:	9901      	ldr	r1, [sp, #4]
 8007096:	9800      	ldr	r0, [sp, #0]
 8007098:	9f08      	ldr	r7, [sp, #32]
 800709a:	321a      	adds	r2, #26
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	d0e6      	beq.n	8007070 <_printf_common+0xa8>
 80070a2:	3601      	adds	r6, #1
 80070a4:	e7d1      	b.n	800704a <_printf_common+0x82>
	...

080070a8 <_printf_i>:
 80070a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070aa:	b08b      	sub	sp, #44	@ 0x2c
 80070ac:	9206      	str	r2, [sp, #24]
 80070ae:	000a      	movs	r2, r1
 80070b0:	3243      	adds	r2, #67	@ 0x43
 80070b2:	9307      	str	r3, [sp, #28]
 80070b4:	9005      	str	r0, [sp, #20]
 80070b6:	9203      	str	r2, [sp, #12]
 80070b8:	7e0a      	ldrb	r2, [r1, #24]
 80070ba:	000c      	movs	r4, r1
 80070bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80070be:	2a78      	cmp	r2, #120	@ 0x78
 80070c0:	d809      	bhi.n	80070d6 <_printf_i+0x2e>
 80070c2:	2a62      	cmp	r2, #98	@ 0x62
 80070c4:	d80b      	bhi.n	80070de <_printf_i+0x36>
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	d100      	bne.n	80070cc <_printf_i+0x24>
 80070ca:	e0bc      	b.n	8007246 <_printf_i+0x19e>
 80070cc:	497b      	ldr	r1, [pc, #492]	@ (80072bc <_printf_i+0x214>)
 80070ce:	9104      	str	r1, [sp, #16]
 80070d0:	2a58      	cmp	r2, #88	@ 0x58
 80070d2:	d100      	bne.n	80070d6 <_printf_i+0x2e>
 80070d4:	e090      	b.n	80071f8 <_printf_i+0x150>
 80070d6:	0025      	movs	r5, r4
 80070d8:	3542      	adds	r5, #66	@ 0x42
 80070da:	702a      	strb	r2, [r5, #0]
 80070dc:	e022      	b.n	8007124 <_printf_i+0x7c>
 80070de:	0010      	movs	r0, r2
 80070e0:	3863      	subs	r0, #99	@ 0x63
 80070e2:	2815      	cmp	r0, #21
 80070e4:	d8f7      	bhi.n	80070d6 <_printf_i+0x2e>
 80070e6:	f7f9 f83f 	bl	8000168 <__gnu_thumb1_case_shi>
 80070ea:	0016      	.short	0x0016
 80070ec:	fff6001f 	.word	0xfff6001f
 80070f0:	fff6fff6 	.word	0xfff6fff6
 80070f4:	001ffff6 	.word	0x001ffff6
 80070f8:	fff6fff6 	.word	0xfff6fff6
 80070fc:	fff6fff6 	.word	0xfff6fff6
 8007100:	003600a1 	.word	0x003600a1
 8007104:	fff60080 	.word	0xfff60080
 8007108:	00b2fff6 	.word	0x00b2fff6
 800710c:	0036fff6 	.word	0x0036fff6
 8007110:	fff6fff6 	.word	0xfff6fff6
 8007114:	0084      	.short	0x0084
 8007116:	0025      	movs	r5, r4
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	3542      	adds	r5, #66	@ 0x42
 800711c:	1d11      	adds	r1, r2, #4
 800711e:	6019      	str	r1, [r3, #0]
 8007120:	6813      	ldr	r3, [r2, #0]
 8007122:	702b      	strb	r3, [r5, #0]
 8007124:	2301      	movs	r3, #1
 8007126:	e0a0      	b.n	800726a <_printf_i+0x1c2>
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	6809      	ldr	r1, [r1, #0]
 800712c:	1d02      	adds	r2, r0, #4
 800712e:	060d      	lsls	r5, r1, #24
 8007130:	d50b      	bpl.n	800714a <_printf_i+0xa2>
 8007132:	6806      	ldr	r6, [r0, #0]
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	2e00      	cmp	r6, #0
 8007138:	da03      	bge.n	8007142 <_printf_i+0x9a>
 800713a:	232d      	movs	r3, #45	@ 0x2d
 800713c:	9a03      	ldr	r2, [sp, #12]
 800713e:	4276      	negs	r6, r6
 8007140:	7013      	strb	r3, [r2, #0]
 8007142:	4b5e      	ldr	r3, [pc, #376]	@ (80072bc <_printf_i+0x214>)
 8007144:	270a      	movs	r7, #10
 8007146:	9304      	str	r3, [sp, #16]
 8007148:	e018      	b.n	800717c <_printf_i+0xd4>
 800714a:	6806      	ldr	r6, [r0, #0]
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	0649      	lsls	r1, r1, #25
 8007150:	d5f1      	bpl.n	8007136 <_printf_i+0x8e>
 8007152:	b236      	sxth	r6, r6
 8007154:	e7ef      	b.n	8007136 <_printf_i+0x8e>
 8007156:	6808      	ldr	r0, [r1, #0]
 8007158:	6819      	ldr	r1, [r3, #0]
 800715a:	c940      	ldmia	r1!, {r6}
 800715c:	0605      	lsls	r5, r0, #24
 800715e:	d402      	bmi.n	8007166 <_printf_i+0xbe>
 8007160:	0640      	lsls	r0, r0, #25
 8007162:	d500      	bpl.n	8007166 <_printf_i+0xbe>
 8007164:	b2b6      	uxth	r6, r6
 8007166:	6019      	str	r1, [r3, #0]
 8007168:	4b54      	ldr	r3, [pc, #336]	@ (80072bc <_printf_i+0x214>)
 800716a:	270a      	movs	r7, #10
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	2a6f      	cmp	r2, #111	@ 0x6f
 8007170:	d100      	bne.n	8007174 <_printf_i+0xcc>
 8007172:	3f02      	subs	r7, #2
 8007174:	0023      	movs	r3, r4
 8007176:	2200      	movs	r2, #0
 8007178:	3343      	adds	r3, #67	@ 0x43
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	6863      	ldr	r3, [r4, #4]
 800717e:	60a3      	str	r3, [r4, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	db03      	blt.n	800718c <_printf_i+0xe4>
 8007184:	2104      	movs	r1, #4
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	438a      	bics	r2, r1
 800718a:	6022      	str	r2, [r4, #0]
 800718c:	2e00      	cmp	r6, #0
 800718e:	d102      	bne.n	8007196 <_printf_i+0xee>
 8007190:	9d03      	ldr	r5, [sp, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00c      	beq.n	80071b0 <_printf_i+0x108>
 8007196:	9d03      	ldr	r5, [sp, #12]
 8007198:	0030      	movs	r0, r6
 800719a:	0039      	movs	r1, r7
 800719c:	f7f9 f874 	bl	8000288 <__aeabi_uidivmod>
 80071a0:	9b04      	ldr	r3, [sp, #16]
 80071a2:	3d01      	subs	r5, #1
 80071a4:	5c5b      	ldrb	r3, [r3, r1]
 80071a6:	702b      	strb	r3, [r5, #0]
 80071a8:	0033      	movs	r3, r6
 80071aa:	0006      	movs	r6, r0
 80071ac:	429f      	cmp	r7, r3
 80071ae:	d9f3      	bls.n	8007198 <_printf_i+0xf0>
 80071b0:	2f08      	cmp	r7, #8
 80071b2:	d109      	bne.n	80071c8 <_printf_i+0x120>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	07db      	lsls	r3, r3, #31
 80071b8:	d506      	bpl.n	80071c8 <_printf_i+0x120>
 80071ba:	6862      	ldr	r2, [r4, #4]
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	429a      	cmp	r2, r3
 80071c0:	dc02      	bgt.n	80071c8 <_printf_i+0x120>
 80071c2:	2330      	movs	r3, #48	@ 0x30
 80071c4:	3d01      	subs	r5, #1
 80071c6:	702b      	strb	r3, [r5, #0]
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	1b5b      	subs	r3, r3, r5
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	9b07      	ldr	r3, [sp, #28]
 80071d0:	0021      	movs	r1, r4
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	9805      	ldr	r0, [sp, #20]
 80071d6:	9b06      	ldr	r3, [sp, #24]
 80071d8:	aa09      	add	r2, sp, #36	@ 0x24
 80071da:	f7ff fef5 	bl	8006fc8 <_printf_common>
 80071de:	3001      	adds	r0, #1
 80071e0:	d148      	bne.n	8007274 <_printf_i+0x1cc>
 80071e2:	2001      	movs	r0, #1
 80071e4:	4240      	negs	r0, r0
 80071e6:	b00b      	add	sp, #44	@ 0x2c
 80071e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ea:	2220      	movs	r2, #32
 80071ec:	6809      	ldr	r1, [r1, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	6022      	str	r2, [r4, #0]
 80071f2:	2278      	movs	r2, #120	@ 0x78
 80071f4:	4932      	ldr	r1, [pc, #200]	@ (80072c0 <_printf_i+0x218>)
 80071f6:	9104      	str	r1, [sp, #16]
 80071f8:	0021      	movs	r1, r4
 80071fa:	3145      	adds	r1, #69	@ 0x45
 80071fc:	700a      	strb	r2, [r1, #0]
 80071fe:	6819      	ldr	r1, [r3, #0]
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	c940      	ldmia	r1!, {r6}
 8007204:	0610      	lsls	r0, r2, #24
 8007206:	d402      	bmi.n	800720e <_printf_i+0x166>
 8007208:	0650      	lsls	r0, r2, #25
 800720a:	d500      	bpl.n	800720e <_printf_i+0x166>
 800720c:	b2b6      	uxth	r6, r6
 800720e:	6019      	str	r1, [r3, #0]
 8007210:	07d3      	lsls	r3, r2, #31
 8007212:	d502      	bpl.n	800721a <_printf_i+0x172>
 8007214:	2320      	movs	r3, #32
 8007216:	4313      	orrs	r3, r2
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	2e00      	cmp	r6, #0
 800721c:	d001      	beq.n	8007222 <_printf_i+0x17a>
 800721e:	2710      	movs	r7, #16
 8007220:	e7a8      	b.n	8007174 <_printf_i+0xcc>
 8007222:	2220      	movs	r2, #32
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	4393      	bics	r3, r2
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	e7f8      	b.n	800721e <_printf_i+0x176>
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	680d      	ldr	r5, [r1, #0]
 8007230:	1d10      	adds	r0, r2, #4
 8007232:	6949      	ldr	r1, [r1, #20]
 8007234:	6018      	str	r0, [r3, #0]
 8007236:	6813      	ldr	r3, [r2, #0]
 8007238:	062e      	lsls	r6, r5, #24
 800723a:	d501      	bpl.n	8007240 <_printf_i+0x198>
 800723c:	6019      	str	r1, [r3, #0]
 800723e:	e002      	b.n	8007246 <_printf_i+0x19e>
 8007240:	066d      	lsls	r5, r5, #25
 8007242:	d5fb      	bpl.n	800723c <_printf_i+0x194>
 8007244:	8019      	strh	r1, [r3, #0]
 8007246:	2300      	movs	r3, #0
 8007248:	9d03      	ldr	r5, [sp, #12]
 800724a:	6123      	str	r3, [r4, #16]
 800724c:	e7bf      	b.n	80071ce <_printf_i+0x126>
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	1d11      	adds	r1, r2, #4
 8007252:	6019      	str	r1, [r3, #0]
 8007254:	6815      	ldr	r5, [r2, #0]
 8007256:	2100      	movs	r1, #0
 8007258:	0028      	movs	r0, r5
 800725a:	6862      	ldr	r2, [r4, #4]
 800725c:	f000 f858 	bl	8007310 <memchr>
 8007260:	2800      	cmp	r0, #0
 8007262:	d001      	beq.n	8007268 <_printf_i+0x1c0>
 8007264:	1b40      	subs	r0, r0, r5
 8007266:	6060      	str	r0, [r4, #4]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	2300      	movs	r3, #0
 800726e:	9a03      	ldr	r2, [sp, #12]
 8007270:	7013      	strb	r3, [r2, #0]
 8007272:	e7ac      	b.n	80071ce <_printf_i+0x126>
 8007274:	002a      	movs	r2, r5
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	9906      	ldr	r1, [sp, #24]
 800727a:	9805      	ldr	r0, [sp, #20]
 800727c:	9d07      	ldr	r5, [sp, #28]
 800727e:	47a8      	blx	r5
 8007280:	3001      	adds	r0, #1
 8007282:	d0ae      	beq.n	80071e2 <_printf_i+0x13a>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	079b      	lsls	r3, r3, #30
 8007288:	d415      	bmi.n	80072b6 <_printf_i+0x20e>
 800728a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800728c:	68e0      	ldr	r0, [r4, #12]
 800728e:	4298      	cmp	r0, r3
 8007290:	daa9      	bge.n	80071e6 <_printf_i+0x13e>
 8007292:	0018      	movs	r0, r3
 8007294:	e7a7      	b.n	80071e6 <_printf_i+0x13e>
 8007296:	0022      	movs	r2, r4
 8007298:	2301      	movs	r3, #1
 800729a:	9906      	ldr	r1, [sp, #24]
 800729c:	9805      	ldr	r0, [sp, #20]
 800729e:	9e07      	ldr	r6, [sp, #28]
 80072a0:	3219      	adds	r2, #25
 80072a2:	47b0      	blx	r6
 80072a4:	3001      	adds	r0, #1
 80072a6:	d09c      	beq.n	80071e2 <_printf_i+0x13a>
 80072a8:	3501      	adds	r5, #1
 80072aa:	68e3      	ldr	r3, [r4, #12]
 80072ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	dcf0      	bgt.n	8007296 <_printf_i+0x1ee>
 80072b4:	e7e9      	b.n	800728a <_printf_i+0x1e2>
 80072b6:	2500      	movs	r5, #0
 80072b8:	e7f7      	b.n	80072aa <_printf_i+0x202>
 80072ba:	46c0      	nop			@ (mov r8, r8)
 80072bc:	08007b6d 	.word	0x08007b6d
 80072c0:	08007b7e 	.word	0x08007b7e

080072c4 <memmove>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4288      	cmp	r0, r1
 80072c8:	d806      	bhi.n	80072d8 <memmove+0x14>
 80072ca:	2300      	movs	r3, #0
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d008      	beq.n	80072e2 <memmove+0x1e>
 80072d0:	5ccc      	ldrb	r4, [r1, r3]
 80072d2:	54c4      	strb	r4, [r0, r3]
 80072d4:	3301      	adds	r3, #1
 80072d6:	e7f9      	b.n	80072cc <memmove+0x8>
 80072d8:	188b      	adds	r3, r1, r2
 80072da:	4298      	cmp	r0, r3
 80072dc:	d2f5      	bcs.n	80072ca <memmove+0x6>
 80072de:	3a01      	subs	r2, #1
 80072e0:	d200      	bcs.n	80072e4 <memmove+0x20>
 80072e2:	bd10      	pop	{r4, pc}
 80072e4:	5c8b      	ldrb	r3, [r1, r2]
 80072e6:	5483      	strb	r3, [r0, r2]
 80072e8:	e7f9      	b.n	80072de <memmove+0x1a>
	...

080072ec <_sbrk_r>:
 80072ec:	2300      	movs	r3, #0
 80072ee:	b570      	push	{r4, r5, r6, lr}
 80072f0:	4d06      	ldr	r5, [pc, #24]	@ (800730c <_sbrk_r+0x20>)
 80072f2:	0004      	movs	r4, r0
 80072f4:	0008      	movs	r0, r1
 80072f6:	602b      	str	r3, [r5, #0]
 80072f8:	f7fb fd12 	bl	8002d20 <_sbrk>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d103      	bne.n	8007308 <_sbrk_r+0x1c>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d000      	beq.n	8007308 <_sbrk_r+0x1c>
 8007306:	6023      	str	r3, [r4, #0]
 8007308:	bd70      	pop	{r4, r5, r6, pc}
 800730a:	46c0      	nop			@ (mov r8, r8)
 800730c:	200013b0 	.word	0x200013b0

08007310 <memchr>:
 8007310:	b2c9      	uxtb	r1, r1
 8007312:	1882      	adds	r2, r0, r2
 8007314:	4290      	cmp	r0, r2
 8007316:	d101      	bne.n	800731c <memchr+0xc>
 8007318:	2000      	movs	r0, #0
 800731a:	4770      	bx	lr
 800731c:	7803      	ldrb	r3, [r0, #0]
 800731e:	428b      	cmp	r3, r1
 8007320:	d0fb      	beq.n	800731a <memchr+0xa>
 8007322:	3001      	adds	r0, #1
 8007324:	e7f6      	b.n	8007314 <memchr+0x4>

08007326 <memcpy>:
 8007326:	2300      	movs	r3, #0
 8007328:	b510      	push	{r4, lr}
 800732a:	429a      	cmp	r2, r3
 800732c:	d100      	bne.n	8007330 <memcpy+0xa>
 800732e:	bd10      	pop	{r4, pc}
 8007330:	5ccc      	ldrb	r4, [r1, r3]
 8007332:	54c4      	strb	r4, [r0, r3]
 8007334:	3301      	adds	r3, #1
 8007336:	e7f8      	b.n	800732a <memcpy+0x4>

08007338 <_realloc_r>:
 8007338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800733a:	0006      	movs	r6, r0
 800733c:	000c      	movs	r4, r1
 800733e:	0015      	movs	r5, r2
 8007340:	2900      	cmp	r1, #0
 8007342:	d105      	bne.n	8007350 <_realloc_r+0x18>
 8007344:	0011      	movs	r1, r2
 8007346:	f7ff fc51 	bl	8006bec <_malloc_r>
 800734a:	0004      	movs	r4, r0
 800734c:	0020      	movs	r0, r4
 800734e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007350:	2a00      	cmp	r2, #0
 8007352:	d103      	bne.n	800735c <_realloc_r+0x24>
 8007354:	f7ff fbde 	bl	8006b14 <_free_r>
 8007358:	2400      	movs	r4, #0
 800735a:	e7f7      	b.n	800734c <_realloc_r+0x14>
 800735c:	f000 f81b 	bl	8007396 <_malloc_usable_size_r>
 8007360:	0007      	movs	r7, r0
 8007362:	4285      	cmp	r5, r0
 8007364:	d802      	bhi.n	800736c <_realloc_r+0x34>
 8007366:	0843      	lsrs	r3, r0, #1
 8007368:	42ab      	cmp	r3, r5
 800736a:	d3ef      	bcc.n	800734c <_realloc_r+0x14>
 800736c:	0029      	movs	r1, r5
 800736e:	0030      	movs	r0, r6
 8007370:	f7ff fc3c 	bl	8006bec <_malloc_r>
 8007374:	9001      	str	r0, [sp, #4]
 8007376:	2800      	cmp	r0, #0
 8007378:	d0ee      	beq.n	8007358 <_realloc_r+0x20>
 800737a:	002a      	movs	r2, r5
 800737c:	42bd      	cmp	r5, r7
 800737e:	d900      	bls.n	8007382 <_realloc_r+0x4a>
 8007380:	003a      	movs	r2, r7
 8007382:	0021      	movs	r1, r4
 8007384:	9801      	ldr	r0, [sp, #4]
 8007386:	f7ff ffce 	bl	8007326 <memcpy>
 800738a:	0021      	movs	r1, r4
 800738c:	0030      	movs	r0, r6
 800738e:	f7ff fbc1 	bl	8006b14 <_free_r>
 8007392:	9c01      	ldr	r4, [sp, #4]
 8007394:	e7da      	b.n	800734c <_realloc_r+0x14>

08007396 <_malloc_usable_size_r>:
 8007396:	1f0b      	subs	r3, r1, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	1f18      	subs	r0, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	da01      	bge.n	80073a4 <_malloc_usable_size_r+0xe>
 80073a0:	580b      	ldr	r3, [r1, r0]
 80073a2:	18c0      	adds	r0, r0, r3
 80073a4:	4770      	bx	lr
	...

080073a8 <roundf>:
 80073a8:	0dc3      	lsrs	r3, r0, #23
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	3b7f      	subs	r3, #127	@ 0x7f
 80073ae:	0002      	movs	r2, r0
 80073b0:	b510      	push	{r4, lr}
 80073b2:	2b16      	cmp	r3, #22
 80073b4:	dc13      	bgt.n	80073de <roundf+0x36>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	da07      	bge.n	80073ca <roundf+0x22>
 80073ba:	0fc2      	lsrs	r2, r0, #31
 80073bc:	07d0      	lsls	r0, r2, #31
 80073be:	3301      	adds	r3, #1
 80073c0:	d102      	bne.n	80073c8 <roundf+0x20>
 80073c2:	23fe      	movs	r3, #254	@ 0xfe
 80073c4:	059b      	lsls	r3, r3, #22
 80073c6:	4318      	orrs	r0, r3
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	4908      	ldr	r1, [pc, #32]	@ (80073ec <roundf+0x44>)
 80073cc:	4119      	asrs	r1, r3
 80073ce:	4208      	tst	r0, r1
 80073d0:	d0fa      	beq.n	80073c8 <roundf+0x20>
 80073d2:	2080      	movs	r0, #128	@ 0x80
 80073d4:	03c0      	lsls	r0, r0, #15
 80073d6:	4118      	asrs	r0, r3
 80073d8:	1880      	adds	r0, r0, r2
 80073da:	4388      	bics	r0, r1
 80073dc:	e7f4      	b.n	80073c8 <roundf+0x20>
 80073de:	2b80      	cmp	r3, #128	@ 0x80
 80073e0:	d1f2      	bne.n	80073c8 <roundf+0x20>
 80073e2:	1c01      	adds	r1, r0, #0
 80073e4:	f7f9 f888 	bl	80004f8 <__aeabi_fadd>
 80073e8:	e7ee      	b.n	80073c8 <roundf+0x20>
 80073ea:	46c0      	nop			@ (mov r8, r8)
 80073ec:	007fffff 	.word	0x007fffff

080073f0 <_init>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	46c0      	nop			@ (mov r8, r8)
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr

080073fc <_fini>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	46c0      	nop			@ (mov r8, r8)
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr
